#
# Copyright (c) 2008-2010 Cisco Systems, Inc. All rights reserved.
#
# Cisco Systems, Inc. retains all right, title and interest (including all
# intellectual property rights) in and to this computer program, which is
# protected by applicable intellectual property laws.  Unless you have obtained
# a separate written license from Cisco Systems, Inc., you are not authorized
# to utilize all or a part of this computer program for any purpose (including
# reproduction, distribution, modification, and compilation into object code),
# and you must immediately destroy or return to Cisco Systems, Inc. all copies
# of this computer program.  If you are licensed by Cisco Systems, Inc., your
# rights to utilize this computer program are limited by the terms of that
# license.  To obtain a license, please contact Cisco Systems, Inc.
#
# This computer program contains trade secrets owned by Cisco Systems, Inc.
# and, unless unauthorized by Cisco Systems, Inc. in writing, you agree to
# maintain the confidentiality of this computer program and related information
# and to not disclose this computer program and related information to any
# other person or entity.
#
# THIS COMPUTER PROGRAM IS PROVIDED AS IS WITHOUT ANY WARRANTIES, AND CISCO
# SYSTEMS, INC. EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
# INCLUDING THE WARRANTIES OF MERCHANTIBILITY, FITNESS FOR A PARTICULAR
# PURPOSE, TITLE, AND NONINFRINGEMENT.
#

####
# Makefile.expat.build.nmake - Builds static and dynamic versions of the libexpat library.
# Note: this makefile MUST be run in the root expat install directoy
#
# Generated Binary Files
#   + Dynamic library
#      - libexpat.dll : The dynamic library, linked against the multithreaded shared crt (msvcrXX.dll) libraries.
#      - libexpat.lib : Defines import methods.
#   + Static library
#      - libexpatMT.lib : The static library, linked against the multithreaded static crt (libcmt.lib) libraries.
#
# Build environment variables
#   - DEBUG : If defined, the resulting binaries will be built with debug information.
#             The default is not defined.
####

# HDK root directory
HDKDIR = ..

# Build directory
!ifndef BUILDDIR
BUILDDIR = $(HDKDIR)\build\libhdkxml
!endif

!ifndef EXPATDIR
!if "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
EXPATDIR = %ProgramFiles(x86)%\Expat 2.0.1
!else
EXPATDIR = %ProgramFiles%\Expat 2.0.1
!endif
!endif

# Source directory
SOURCE = \
	"$(EXPATDIR)\Source\lib\xmlparse.c" \
	"$(EXPATDIR)\Source\lib\xmlrole.c" \
	"$(EXPATDIR)\Source\lib\xmltok.c" \
	"$(EXPATDIR)\Source\lib\xmltok_impl.c" \
	"$(EXPATDIR)\Source\lib\xmltok_ns.c"

# Targets
DYNAMIC_LIB = $(BUILDDIR)\libexpat.dll
STATIC_LIB = $(BUILDDIR)\libexpatMT.lib

# Object files for the dynamic library
BUILDDIR_DYNAMIC = $(BUILDDIR)\obj_dynamic
OBJS_DYNAMIC = \
	"$(BUILDDIR_DYNAMIC)\xmlparse.obj" \
	"$(BUILDDIR_DYNAMIC)\xmlrole.obj" \
	"$(BUILDDIR_DYNAMIC)\xmltok.obj" \
	"$(BUILDDIR_DYNAMIC)\xmltok_impl.obj" \
	"$(BUILDDIR_DYNAMIC)\xmltok_ns.obj"

# Object files for the static library
BUILDDIR_STATIC = $(BUILDDIR)\obj_static
OBJS_STATIC = \
	"$(BUILDDIR_STATIC)\xmlparse.obj" \
	"$(BUILDDIR_STATIC)\xmlrole.obj" \
	"$(BUILDDIR_STATIC)\xmltok.obj" \
	"$(BUILDDIR_STATIC)\xmltok_impl.obj" \
	"$(BUILDDIR_STATIC)\xmltok_ns.obj"

# Compiler flags
!ifdef EXPAT_CXX
EXPAT_CC = $(CXX)
EXPAT_CFLAGS = $(CXXFLAGS) /TP
!else
EXPAT_CC = $(CC)
EXPAT_CFLAGS = $(CFLAGS) /TC
!endif

EXPAT_CFLAGS = $(EXPAT_CFLAGS) /W3
EXPAT_CFLAGS = $(EXPAT_CFLAGS) /I.
# libexpat macros
EXPAT_CFLAGS = $(EXPAT_CFLAGS) /DCOMPILED_FROM_DSP /DWIN32 /D_WINDOWS /D_MBCS

!ifdef DEBUG
EXPAT_CFLAGS = $(EXPAT_CFLAGS) /Od /Zi /D_DEBUG
!else
EXPAT_CFLAGS = $(EXPAT_CFLAGS) /Os /DNDEBUG
!endif

EXPAT_CFLAGS_DYNAMIC = $(EXPAT_CFLAGS) /D_USRDLL /DEXPAT_EXPORTS
EXPAT_CFLAGS_STATIC = $(EXPAT_CFLAGS) /D_LIB

!ifdef DEBUG
EXPAT_CFLAGS_DYNAMIC = $(EXPAT_CFLAGS_DYNAMIC) /MDd
EXPAT_CFLAGS_STATIC = $(EXPAT_CFLAGS_STATIC) /MTd
!else
EXPAT_CFLAGS_DYNAMIC = $(EXPAT_CFLAGS_DYNAMIC) /MD
EXPAT_CFLAGS_STATIC = $(EXPAT_CFLAGS_STATIC) /MT
!endif

# Linker flags
LDFLAGS = /NOLOGO /DLL /DEF:"$(EXPATDIR)\Source\lib\libexpat.def"
!ifdef DEBUG
LDFLAGS = /DEBUG $(LDFLAGS)
!endif

# Lib flags
LIBFLAGS = /NOLOGO /WX

# Build target (default)
build: $(DYNAMIC_LIB) $(STATIC_LIB)

# Clean the object build directories
clean:
	if exist "$(BUILDDIR)" @rmdir /s /q "$(BUILDDIR)"

# Rule for linking the dynamic library
$(DYNAMIC_LIB): $(OBJS_DYNAMIC)
	link.exe $(LDFLAGS) $(**) /OUT:$(DYNAMIC_LIB)

# Rule for generating the static library
$(STATIC_LIB): $(OBJS_STATIC)
	lib.exe $(LIBFLAGS) $(**) /OUT:$(STATIC_LIB)

#
# There are individual rules for each compilation unit in the libexpat library intentionally.
# nmake.exe does not support spaces in the file inference rule directory path which means
# a default install of libexpat will not work with the inference rules.
# E.g. {$(EXPATDIR)}.c{$(BUILDDIR_DYNAMIC)}.obj: would fail due to spaces
# in the $(EXPATDIR) macro expansion.  The cleanest workaround was to have an
# explicit target for each compilation unit.
#

# Rule for compiling source files for the dynamic library
"$(BUILDDIR_DYNAMIC)\xmlparse.obj" : "$(EXPATDIR)\Source\lib\xmlparse.c"
	@if not exist "$(BUILDDIR_DYNAMIC)" @mkdir "$(BUILDDIR_DYNAMIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_DYNAMIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_DYNAMIC)\xmlrole.obj" : "$(EXPATDIR)\Source\lib\xmlrole.c"
	@if not exist "$(BUILDDIR_DYNAMIC)" @mkdir "$(BUILDDIR_DYNAMIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_DYNAMIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_DYNAMIC)\xmltok.obj" : "$(EXPATDIR)\Source\lib\xmltok.c"
	@if not exist "$(BUILDDIR_DYNAMIC)" @mkdir "$(BUILDDIR_DYNAMIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_DYNAMIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_DYNAMIC)\xmltok_impl.obj" : "$(EXPATDIR)\Source\lib\xmltok_impl.c"
	@if not exist "$(BUILDDIR_DYNAMIC)" @mkdir "$(BUILDDIR_DYNAMIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_DYNAMIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_DYNAMIC)\xmltok_ns.obj" : "$(EXPATDIR)\Source\lib\xmltok_ns.c"
	@if not exist "$(BUILDDIR_DYNAMIC)" @mkdir "$(BUILDDIR_DYNAMIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_DYNAMIC) /Fd$(*R) /Fo$@ /c $(**)

# Rule for compiling source files for the static library
"$(BUILDDIR_STATIC)\xmlparse.obj" : "$(EXPATDIR)\Source\lib\xmlparse.c"
	@if not exist "$(BUILDDIR_STATIC)" @mkdir "$(BUILDDIR_STATIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_STATIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_STATIC)\xmlrole.obj" : "$(EXPATDIR)\Source\lib\xmlrole.c"
	@if not exist "$(BUILDDIR_STATIC)" @mkdir "$(BUILDDIR_STATIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_STATIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_STATIC)\xmltok.obj" : "$(EXPATDIR)\Source\lib\xmltok.c"
	@if not exist "$(BUILDDIR_STATIC)" @mkdir "$(BUILDDIR_STATIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_STATIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_STATIC)\xmltok_impl.obj" : "$(EXPATDIR)\Source\lib\xmltok_impl.c"
	@if not exist "$(BUILDDIR_STATIC)" @mkdir "$(BUILDDIR_STATIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_STATIC) /Fd$(*R) /Fo$@ /c $(**)

"$(BUILDDIR_STATIC)\xmltok_ns.obj" : "$(EXPATDIR)\Source\lib\xmltok_ns.c"
	@if not exist "$(BUILDDIR_STATIC)" @mkdir "$(BUILDDIR_STATIC)"
	$(EXPAT_CC) $(EXPAT_CFLAGS_STATIC) /Fd$(*R) /Fo$@ /c $(**)