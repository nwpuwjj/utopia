#
# Copyright (c) 2008-2010 Cisco Systems, Inc. All rights reserved.
#
# Cisco Systems, Inc. retains all right, title and interest (including all
# intellectual property rights) in and to this computer program, which is
# protected by applicable intellectual property laws.  Unless you have obtained
# a separate written license from Cisco Systems, Inc., you are not authorized
# to utilize all or a part of this computer program for any purpose (including
# reproduction, distribution, modification, and compilation into object code),
# and you must immediately destroy or return to Cisco Systems, Inc. all copies
# of this computer program.  If you are licensed by Cisco Systems, Inc., your
# rights to utilize this computer program are limited by the terms of that
# license.  To obtain a license, please contact Cisco Systems, Inc.
#
# This computer program contains trade secrets owned by Cisco Systems, Inc.
# and, unless unauthorized by Cisco Systems, Inc. in writing, you agree to
# maintain the confidentiality of this computer program and related information
# and to not disclose this computer program and related information to any
# other person or entity.
#
# THIS COMPUTER PROGRAM IS PROVIDED AS IS WITHOUT ANY WARRANTIES, AND CISCO
# SYSTEMS, INC. EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
# INCLUDING THE WARRANTIES OF MERCHANTIBILITY, FITNESS FOR A PARTICULAR
# PURPOSE, TITLE, AND NONINFRINGEMENT.
#

####
# Makefile.nmake - Builds static and dynamic versions of the libhdkxml library.
#
# Generated Binary Files
#   + Dynamic library
#      - libhdkxml.dll : The dynamic library, linked against shared (dynamic) libexpat (libexpat.dll) and
#                        multithreaded crt (msvcrXX.dll) libraries.
#      - libhdkxml.lib : Defines import methods for libhdkxml.dll.
#      - libexpat.dll : The libexpat dynamic library, required by libdhkxml.dll.
#   + Static library
#      - libhdkxmlMT.lib : The static library, linked against static versions of libexpat (libexpatMT.lib) and
#                          multithreaded static crt (libcmt.lib) libraries.
#      - libexpatMT.lib : The libexpat static library, required by libhdkxmlMT.lib.
#
# Build environment variables
#   - BUILDDIR : The directory in which the generated binary files are placed.
#                The default is $(HDKDIR)\build\libhdkxml
#   - EXPATDIR : The directory in which libexpat is installed.
#                The default is C:\Program Files\Expat 2.0.1
#   - DEBUG : If defined, the resulting binaries will be built with debug information.
#             The default is not defined.
####

# HDK root directory
HDKDIR = ..

# Build directory
!ifndef BUILDDIR
BUILDDIR = $(HDKDIR)\build\libhdkxml
!endif

# Location of Expat.  Note there is currently only a 32-bit install.
!ifndef EXPATDIR
!if "$(PROCESSOR_ARCHITECTURE)" == "AMD64"
EXPATDIR = %ProgramFiles(x86)%\Expat 2.0.1
!else
EXPATDIR = %ProgramFiles%\Expat 2.0.1
!endif
!endif

# Targets
DYNAMIC_LIB = $(BUILDDIR)\libhdkxml.dll
STATIC_LIB = $(BUILDDIR)\libhdkxmlMT.lib

# Object files for the dynamic library
BUILDDIR_DYNAMIC = $(BUILDDIR)\obj_dynamic
OBJS_DYNAMIC = \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_encode.obj" \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_log.obj" \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_parse.obj" \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_schema.obj" \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_serialize.obj" \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_stream.obj" \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_type.obj" \
	"$(BUILDDIR_DYNAMIC)\hdk_xml_validate.obj"

# Object files for the static library
BUILDDIR_STATIC = $(BUILDDIR)\obj_static
OBJS_STATIC = \
	"$(BUILDDIR_STATIC)\hdk_xml_encode.obj" \
	"$(BUILDDIR_STATIC)\hdk_xml_log.obj" \
	"$(BUILDDIR_STATIC)\hdk_xml_parse.obj" \
	"$(BUILDDIR_STATIC)\hdk_xml_schema.obj" \
	"$(BUILDDIR_STATIC)\hdk_xml_serialize.obj" \
	"$(BUILDDIR_STATIC)\hdk_xml_stream.obj" \
	"$(BUILDDIR_STATIC)\hdk_xml_type.obj" \
	"$(BUILDDIR_STATIC)\hdk_xml_validate.obj"

# Compiler flags
!ifdef HDK_XML_CXX
HDK_XML_CC = $(CXX)
HDK_XML_CFLAGS = $(CXXFLAGS) /TP
!else
HDK_XML_CC = $(CC)
HDK_XML_CFLAGS = $(CFLAGS) /TC
!endif

# Enable highest warning level; treat warnings as errors
HDK_XML_CFLAGS = $(HDK_XML_CFLAGS) /W4 /WX /analyze
# Disable "'function': was declared deprecated" warning
HDK_XML_CFLAGS = $(HDK_XML_CFLAGS) /wd4996
HDK_XML_CFLAGS = $(HDK_XML_CFLAGS) /DHDK_XML_BUILD /I. /I$(HDKDIR)\include

# Include libexpat include directory
HDK_XML_CFLAGS = $(HDK_XML_CFLAGS) /I"$(EXPATDIR)\Source\lib"

!ifdef DEBUG
HDK_XML_CFLAGS = $(HDK_XML_CFLAGS) /Od /Zi
!else
HDK_XML_CFLAGS = $(HDK_XML_CFLAGS) /Os
!endif

!ifdef HDK_XML_LOGGING
HDK_XML_CFLAGS = $(HDK_XML_CFLAGS) /DHDK_LOGGING=1
!endif

# Library type-specific flags (note the /DXML_STATIC to indicate static linkage with expat)
HDK_XML_CFLAGS_DYNAMIC = $(HDK_XML_CFLAGS)
HDK_XML_CFLAGS_STATIC = $(HDK_XML_CFLAGS) /DXML_STATIC

!ifdef DEBUG
HDK_XML_CFLAGS_DYNAMIC = $(HDK_XML_CFLAGS_DYNAMIC) /MDd
HDK_XML_CFLAGS_STATIC = $(HDK_XML_CFLAGS_STATIC) /MTd
!else
HDK_XML_CFLAGS_DYNAMIC = $(HDK_XML_CFLAGS_DYNAMIC) /MD
HDK_XML_CFLAGS_STATIC = $(HDK_XML_CFLAGS_STATIC) /MT
!endif

# Linker flags
LDFLAGS = /NOLOGO /DLL
LDFLAGS = $(LDFLAGS) "$(BUILDDIR)\libexpat.lib"
!ifdef DEBUG
LDFLAGS = /DEBUG $(LDFLAGS)
!endif

# Lib flags
LIBFLAGS = /NOLOGO /WX

# Build target (default)
build: libexpat $(DYNAMIC_LIB) $(STATIC_LIB)

# Clean the build directory
clean:
	if exist "$(BUILDDIR)" @rmdir /s /q "$(BUILDDIR)"

# Rule for building (if needed) and locating libexpat binaries.
# The following magic is doing this:
#  - retrieving the compiler version ('cl /?')
#  - redirecting the banner to stdout ('2>&1'),
#  - piping that output to findstr to determine if this is the x64 compiler ('findstr /e /c:x64')
#  - calling the expat make file with the correct arguments depending on the result of the the findstr call
libexpat:
	-1 @$(CXX) /? 2>&1 | @findstr /e /c:x64 && nmake.exe /NOLOGO /f Makefile.expat.nmake BUILDDIR="$(BUILDDIR)" LIBEXPAT_BUILD=1
	-1 @$(CXX) /? 2>&1 | @findstr /e /c:x64 || nmake.exe /NOLOGO /f Makefile.expat.nmake BUILDDIR="$(BUILDDIR)"

# Rule for linking the dynamic library
$(DYNAMIC_LIB): $(OBJS_DYNAMIC)
	link.exe $(LDFLAGS) $(**) /OUT:$(DYNAMIC_LIB)

# Rule for generating the static library
$(STATIC_LIB): $(OBJS_STATIC)
	lib.exe $(LIBFLAGS) $(**) /OUT:$(STATIC_LIB)

# Rule for compiling source files for the dynamic library
{}.c{$(BUILDDIR_DYNAMIC)}.obj:
	@if not exist "$(BUILDDIR_DYNAMIC)" @mkdir "$(BUILDDIR_DYNAMIC)"
	$(HDK_XML_CC) $(HDK_XML_CFLAGS_DYNAMIC) /Fd$(*R) /Fo$@ /c $(<)

# Rule for compiling source files for the static library
{}.c{$(BUILDDIR_STATIC)}.obj:
	@if not exist "$(BUILDDIR_STATIC)" @mkdir "$(BUILDDIR_STATIC)"
	$(HDK_XML_CC) $(HDK_XML_CFLAGS_STATIC) /Fd$(*R) /Fo$@ /c $(<)
