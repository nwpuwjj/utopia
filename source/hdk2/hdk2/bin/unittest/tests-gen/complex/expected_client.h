/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/*
 * Copyright (c) 2008-2010 Cisco Systems, Inc. All rights reserved.
 *
 * Cisco Systems, Inc. retains all right, title and interest (including all
 * intellectual property rights) in and to this computer program, which is
 * protected by applicable intellectual property laws.  Unless you have obtained
 * a separate written license from Cisco Systems, Inc., you are not authorized
 * to utilize all or a part of this computer program for any purpose (including
 * reproduction, distribution, modification, and compilation into object code),
 * and you must immediately destroy or return to Cisco Systems, Inc. all copies
 * of this computer program.  If you are licensed by Cisco Systems, Inc., your
 * rights to utilize this computer program are limited by the terms of that
 * license.  To obtain a license, please contact Cisco Systems, Inc.
 *
 * This computer program contains trade secrets owned by Cisco Systems, Inc.
 * and, unless unauthorized by Cisco Systems, Inc. in writing, you agree to
 * maintain the confidentiality of this computer program and related information
 * and to not disclose this computer program and related information to any
 * other person or entity.
 *
 * THIS COMPUTER PROGRAM IS PROVIDED AS IS WITHOUT ANY WARRANTIES, AND CISCO
 * SYSTEMS, INC. EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING THE WARRANTIES OF MERCHANTIBILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, TITLE, AND NONINFRINGEMENT.
 */

#pragma once

// actual_client.h - [Generated by hdkcli_cpp]

// Non-generated client code.
#include "hdk_cli_cpp.h"

// Underlying schema module.
#include "actual_client_mod.h"


namespace HDK
{
    ///
    /// \fn InitializeClient
    ///      Initialize the HDK client library.  This should be called once per application instance.
    ///      Each call to InitializeClient should be matched by a call to UninitializeClient.
    ///      \retval true if initialization was successful, false if not.
    ///
    bool InitializeClient() throw();

    ///
    /// \fn UninitializeClient
    ///      Cleanup the HDK client library.  This should be called if true was returned from InitializeClient
    ///      When the caller is done using the HDK client library.
    ///
    void UninitializeClient() throw();


    namespace Cisco_HNAP
    {
        ///
        /// \enum GetServiceInfoResult
        ///      <a>http://cisco.com/HNAP/GetServiceInfoResult</a>
        ///
        enum GetServiceInfoResult
        {
            GetServiceInfoResult_Unknown = ACTUAL_CLIENT_MOD_Enum_GetServiceInfoResult__UNKNOWN__ /*<! Unknown value */,
            GetServiceInfoResult_OK = ACTUAL_CLIENT_MOD_Enum_GetServiceInfoResult_OK /*!< OK */,
            GetServiceInfoResult_ERROR = ACTUAL_CLIENT_MOD_Enum_GetServiceInfoResult_ERROR /*!< ERROR */
        }; // enum GetServiceInfoResult

        ///
        /// \enum GetServicesResult
        ///      <a>http://cisco.com/HNAP/GetServicesResult</a>
        ///
        enum GetServicesResult
        {
            GetServicesResult_Unknown = ACTUAL_CLIENT_MOD_Enum_GetServicesResult__UNKNOWN__ /*<! Unknown value */,
            GetServicesResult_OK = ACTUAL_CLIENT_MOD_Enum_GetServicesResult_OK /*!< OK */,
            GetServicesResult_ERROR = ACTUAL_CLIENT_MOD_Enum_GetServicesResult_ERROR /*!< ERROR */
        }; // enum GetServicesResult

    } // namespace Cisco_HNAP

    namespace Purenetworks_HNAP1
    {
        ///
        /// \enum AddPortMappingResult
        ///      <a>http://purenetworks.com/HNAP1/AddPortMappingResult</a>
        ///
        enum AddPortMappingResult
        {
            AddPortMappingResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_AddPortMappingResult__UNKNOWN__ /*<! Unknown value */,
            AddPortMappingResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_AddPortMappingResult_OK /*!< OK */,
            AddPortMappingResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_AddPortMappingResult_REBOOT /*!< REBOOT */,
            AddPortMappingResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_AddPortMappingResult_ERROR /*!< ERROR */
        }; // enum AddPortMappingResult

        ///
        /// \enum DeletePortMappingResult
        ///      <a>http://purenetworks.com/HNAP1/DeletePortMappingResult</a>
        ///
        enum DeletePortMappingResult
        {
            DeletePortMappingResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_DeletePortMappingResult__UNKNOWN__ /*<! Unknown value */,
            DeletePortMappingResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_DeletePortMappingResult_OK /*!< OK */,
            DeletePortMappingResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_DeletePortMappingResult_ERROR /*!< ERROR */
        }; // enum DeletePortMappingResult

        ///
        /// \enum DeviceType
        ///      <a>http://purenetworks.com/HNAP1/DeviceType</a>
        ///
        enum DeviceType
        {
            DeviceType_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType__UNKNOWN__ /*<! Unknown value */,
            DeviceType_Computer = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_Computer /*!< Computer */,
            DeviceType_ComputerServer = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_ComputerServer /*!< ComputerServer */,
            DeviceType_DigitalDVR = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_DigitalDVR /*!< DigitalDVR */,
            DeviceType_DigitalJukebox = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_DigitalJukebox /*!< DigitalJukebox */,
            DeviceType_Gateway = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_Gateway /*!< Gateway */,
            DeviceType_GatewayWithWiFi = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_GatewayWithWiFi /*!< GatewayWithWiFi */,
            DeviceType_LaptopComputer = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_LaptopComputer /*!< LaptopComputer */,
            DeviceType_MediaAdapter = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_MediaAdapter /*!< MediaAdapter */,
            DeviceType_NetworkCamera = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_NetworkCamera /*!< NetworkCamera */,
            DeviceType_NetworkDevice = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_NetworkDevice /*!< NetworkDevice */,
            DeviceType_NetworkDrive = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_NetworkDrive /*!< NetworkDrive */,
            DeviceType_NetworkGameConsole = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_NetworkGameConsole /*!< NetworkGameConsole */,
            DeviceType_NetworkPDA = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_NetworkPDA /*!< NetworkPDA */,
            DeviceType_NetworkPrintServer = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_NetworkPrintServer /*!< NetworkPrintServer */,
            DeviceType_NetworkPrinter = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_NetworkPrinter /*!< NetworkPrinter */,
            DeviceType_PhotoFrame = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_PhotoFrame /*!< PhotoFrame */,
            DeviceType_SetTopBox = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_SetTopBox /*!< SetTopBox */,
            DeviceType_VOIPDevice = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_VOIPDevice /*!< VOIPDevice */,
            DeviceType_WiFiAccessPoint = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_WiFiAccessPoint /*!< WiFiAccessPoint */,
            DeviceType_WiFiBridge = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_WiFiBridge /*!< WiFiBridge */,
            DeviceType_WorkstationComputer = ACTUAL_CLIENT_MOD_Enum_PN_DeviceType_WorkstationComputer /*!< WorkstationComputer */
        }; // enum DeviceType

        ///
        /// \enum DownloadSpeedTestResult
        ///      <a>http://purenetworks.com/HNAP1/DownloadSpeedTestResult</a>
        ///
        enum DownloadSpeedTestResult
        {
            DownloadSpeedTestResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_DownloadSpeedTestResult__UNKNOWN__ /*<! Unknown value */,
            DownloadSpeedTestResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_DownloadSpeedTestResult_OK /*!< OK */,
            DownloadSpeedTestResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_DownloadSpeedTestResult_ERROR /*!< ERROR */
        }; // enum DownloadSpeedTestResult

        ///
        /// \enum FirmwareUploadResult
        ///      <a>http://purenetworks.com/HNAP1/FirmwareUploadResult</a>
        ///
        enum FirmwareUploadResult
        {
            FirmwareUploadResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_FirmwareUploadResult__UNKNOWN__ /*<! Unknown value */,
            FirmwareUploadResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_FirmwareUploadResult_OK /*!< OK */,
            FirmwareUploadResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_FirmwareUploadResult_REBOOT /*!< REBOOT */,
            FirmwareUploadResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_FirmwareUploadResult_ERROR /*!< ERROR */
        }; // enum FirmwareUploadResult

        ///
        /// \enum GetClientStatsResult
        ///      <a>http://purenetworks.com/HNAP1/GetClientStatsResult</a>
        ///
        enum GetClientStatsResult
        {
            GetClientStatsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetClientStatsResult__UNKNOWN__ /*<! Unknown value */,
            GetClientStatsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetClientStatsResult_OK /*!< OK */,
            GetClientStatsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetClientStatsResult_ERROR /*!< ERROR */
        }; // enum GetClientStatsResult

        ///
        /// \enum GetConfigBlobResult
        ///      <a>http://purenetworks.com/HNAP1/GetConfigBlobResult</a>
        ///
        enum GetConfigBlobResult
        {
            GetConfigBlobResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetConfigBlobResult__UNKNOWN__ /*<! Unknown value */,
            GetConfigBlobResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetConfigBlobResult_OK /*!< OK */,
            GetConfigBlobResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetConfigBlobResult_ERROR /*!< ERROR */
        }; // enum GetConfigBlobResult

        ///
        /// \enum GetConnectedDevicesResult
        ///      <a>http://purenetworks.com/HNAP1/GetConnectedDevicesResult</a>
        ///
        enum GetConnectedDevicesResult
        {
            GetConnectedDevicesResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetConnectedDevicesResult__UNKNOWN__ /*<! Unknown value */,
            GetConnectedDevicesResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetConnectedDevicesResult_OK /*!< OK */,
            GetConnectedDevicesResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetConnectedDevicesResult_ERROR /*!< ERROR */
        }; // enum GetConnectedDevicesResult

        ///
        /// \enum GetDeviceSettings2Result
        ///      <a>http://purenetworks.com/HNAP1/GetDeviceSettings2Result</a>
        ///
        enum GetDeviceSettings2Result
        {
            GetDeviceSettings2Result_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetDeviceSettings2Result__UNKNOWN__ /*<! Unknown value */,
            GetDeviceSettings2Result_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetDeviceSettings2Result_OK /*!< OK */,
            GetDeviceSettings2Result_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetDeviceSettings2Result_ERROR /*!< ERROR */
        }; // enum GetDeviceSettings2Result

        ///
        /// \enum GetDeviceSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/GetDeviceSettingsResult</a>
        ///
        enum GetDeviceSettingsResult
        {
            GetDeviceSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetDeviceSettingsResult__UNKNOWN__ /*<! Unknown value */,
            GetDeviceSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetDeviceSettingsResult_OK /*!< OK */,
            GetDeviceSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetDeviceSettingsResult_ERROR /*!< ERROR */
        }; // enum GetDeviceSettingsResult

        ///
        /// \enum GetFirmwareSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/GetFirmwareSettingsResult</a>
        ///
        enum GetFirmwareSettingsResult
        {
            GetFirmwareSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetFirmwareSettingsResult__UNKNOWN__ /*<! Unknown value */,
            GetFirmwareSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetFirmwareSettingsResult_OK /*!< OK */,
            GetFirmwareSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetFirmwareSettingsResult_ERROR /*!< ERROR */
        }; // enum GetFirmwareSettingsResult

        ///
        /// \enum GetMACFilters2Result
        ///      <a>http://purenetworks.com/HNAP1/GetMACFilters2Result</a>
        ///
        enum GetMACFilters2Result
        {
            GetMACFilters2Result_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetMACFilters2Result__UNKNOWN__ /*<! Unknown value */,
            GetMACFilters2Result_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetMACFilters2Result_OK /*!< OK */,
            GetMACFilters2Result_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetMACFilters2Result_ERROR /*!< ERROR */
        }; // enum GetMACFilters2Result

        ///
        /// \enum GetNetworkStatsResult
        ///      <a>http://purenetworks.com/HNAP1/GetNetworkStatsResult</a>
        ///
        enum GetNetworkStatsResult
        {
            GetNetworkStatsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetNetworkStatsResult__UNKNOWN__ /*<! Unknown value */,
            GetNetworkStatsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetNetworkStatsResult_OK /*!< OK */,
            GetNetworkStatsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetNetworkStatsResult_ERROR /*!< ERROR */
        }; // enum GetNetworkStatsResult

        ///
        /// \enum GetPortMappingsResult
        ///      <a>http://purenetworks.com/HNAP1/GetPortMappingsResult</a>
        ///
        enum GetPortMappingsResult
        {
            GetPortMappingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetPortMappingsResult__UNKNOWN__ /*<! Unknown value */,
            GetPortMappingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetPortMappingsResult_OK /*!< OK */,
            GetPortMappingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetPortMappingsResult_ERROR /*!< ERROR */
        }; // enum GetPortMappingsResult

        ///
        /// \enum GetRouterLanSettings2Result
        ///      <a>http://purenetworks.com/HNAP1/GetRouterLanSettings2Result</a>
        ///
        enum GetRouterLanSettings2Result
        {
            GetRouterLanSettings2Result_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetRouterLanSettings2Result__UNKNOWN__ /*<! Unknown value */,
            GetRouterLanSettings2Result_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetRouterLanSettings2Result_OK /*!< OK */,
            GetRouterLanSettings2Result_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetRouterLanSettings2Result_ERROR /*!< ERROR */
        }; // enum GetRouterLanSettings2Result

        ///
        /// \enum GetRouterSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/GetRouterSettingsResult</a>
        ///
        enum GetRouterSettingsResult
        {
            GetRouterSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetRouterSettingsResult__UNKNOWN__ /*<! Unknown value */,
            GetRouterSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetRouterSettingsResult_OK /*!< OK */,
            GetRouterSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetRouterSettingsResult_ERROR /*!< ERROR */
        }; // enum GetRouterSettingsResult

        ///
        /// \enum GetWLanRadioFrequenciesResult
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioFrequenciesResult</a>
        ///
        enum GetWLanRadioFrequenciesResult
        {
            GetWLanRadioFrequenciesResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioFrequenciesResult__UNKNOWN__ /*<! Unknown value */,
            GetWLanRadioFrequenciesResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioFrequenciesResult_OK /*!< OK */,
            GetWLanRadioFrequenciesResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioFrequenciesResult_ERROR /*!< ERROR */
        }; // enum GetWLanRadioFrequenciesResult

        ///
        /// \enum GetWLanRadioSecurityResult
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioSecurityResult</a>
        ///
        enum GetWLanRadioSecurityResult
        {
            GetWLanRadioSecurityResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSecurityResult__UNKNOWN__ /*<! Unknown value */,
            GetWLanRadioSecurityResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSecurityResult_OK /*!< OK */,
            GetWLanRadioSecurityResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSecurityResult_ERROR /*!< ERROR */,
            GetWLanRadioSecurityResult_ERROR_BAD_RADIOID = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSecurityResult_ERROR_BAD_RADIOID /*!< ERROR_BAD_RADIOID */
        }; // enum GetWLanRadioSecurityResult

        ///
        /// \enum GetWLanRadioSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioSettingsResult</a>
        ///
        enum GetWLanRadioSettingsResult
        {
            GetWLanRadioSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSettingsResult__UNKNOWN__ /*<! Unknown value */,
            GetWLanRadioSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSettingsResult_OK /*!< OK */,
            GetWLanRadioSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSettingsResult_ERROR /*!< ERROR */,
            GetWLanRadioSettingsResult_ERROR_BAD_RADIOID = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadioSettingsResult_ERROR_BAD_RADIOID /*!< ERROR_BAD_RADIOID */
        }; // enum GetWLanRadioSettingsResult

        ///
        /// \enum GetWLanRadiosResult
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadiosResult</a>
        ///
        enum GetWLanRadiosResult
        {
            GetWLanRadiosResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadiosResult__UNKNOWN__ /*<! Unknown value */,
            GetWLanRadiosResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadiosResult_OK /*!< OK */,
            GetWLanRadiosResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetWLanRadiosResult_ERROR /*!< ERROR */
        }; // enum GetWLanRadiosResult

        ///
        /// \enum GetWanInfoResult
        ///      <a>http://purenetworks.com/HNAP1/GetWanInfoResult</a>
        ///
        enum GetWanInfoResult
        {
            GetWanInfoResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetWanInfoResult__UNKNOWN__ /*<! Unknown value */,
            GetWanInfoResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetWanInfoResult_OK /*!< OK */,
            GetWanInfoResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetWanInfoResult_ERROR /*!< ERROR */
        }; // enum GetWanInfoResult

        ///
        /// \enum GetWanSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/GetWanSettingsResult</a>
        ///
        enum GetWanSettingsResult
        {
            GetWanSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_GetWanSettingsResult__UNKNOWN__ /*<! Unknown value */,
            GetWanSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_GetWanSettingsResult_OK /*!< OK */,
            GetWanSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_GetWanSettingsResult_ERROR /*!< ERROR */
        }; // enum GetWanSettingsResult

        ///
        /// \enum IPProtocol
        ///      <a>http://purenetworks.com/HNAP1/IPProtocol</a>
        ///
        enum IPProtocol
        {
            IPProtocol_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_IPProtocol__UNKNOWN__ /*<! Unknown value */,
            IPProtocol_TCP = ACTUAL_CLIENT_MOD_Enum_PN_IPProtocol_TCP /*!< TCP */,
            IPProtocol_UDP = ACTUAL_CLIENT_MOD_Enum_PN_IPProtocol_UDP /*!< UDP */
        }; // enum IPProtocol

        ///
        /// \enum IsDeviceReadyResult
        ///      <a>http://purenetworks.com/HNAP1/IsDeviceReadyResult</a>
        ///
        enum IsDeviceReadyResult
        {
            IsDeviceReadyResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_IsDeviceReadyResult__UNKNOWN__ /*<! Unknown value */,
            IsDeviceReadyResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_IsDeviceReadyResult_OK /*!< OK */,
            IsDeviceReadyResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_IsDeviceReadyResult_ERROR /*!< ERROR */
        }; // enum IsDeviceReadyResult

        ///
        /// \enum LANConnection
        ///      <a>http://purenetworks.com/HNAP1/LANConnection</a>
        ///
        enum LANConnection
        {
            LANConnection_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_LANConnection__UNKNOWN__ /*<! Unknown value */,
            LANConnection_LAN = ACTUAL_CLIENT_MOD_Enum_PN_LANConnection_LAN /*!< LAN */,
            LANConnection_WAN = ACTUAL_CLIENT_MOD_Enum_PN_LANConnection_WAN /*!< WAN */,
            LANConnection_WLAN_802_11a = ACTUAL_CLIENT_MOD_Enum_PN_LANConnection_WLAN_802_11a /*!< WLAN 802.11a */,
            LANConnection_WLAN_802_11b = ACTUAL_CLIENT_MOD_Enum_PN_LANConnection_WLAN_802_11b /*!< WLAN 802.11b */,
            LANConnection_WLAN_802_11g = ACTUAL_CLIENT_MOD_Enum_PN_LANConnection_WLAN_802_11g /*!< WLAN 802.11g */,
            LANConnection_WLAN_802_11n = ACTUAL_CLIENT_MOD_Enum_PN_LANConnection_WLAN_802_11n /*!< WLAN 802.11n */
        }; // enum LANConnection

        ///
        /// \enum RebootResult
        ///      <a>http://purenetworks.com/HNAP1/RebootResult</a>
        ///
        enum RebootResult
        {
            RebootResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_RebootResult__UNKNOWN__ /*<! Unknown value */,
            RebootResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_RebootResult_OK /*!< OK */,
            RebootResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_RebootResult_REBOOT /*!< REBOOT */,
            RebootResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_RebootResult_ERROR /*!< ERROR */
        }; // enum RebootResult

        ///
        /// \enum RenewWanConnectionResult
        ///      <a>http://purenetworks.com/HNAP1/RenewWanConnectionResult</a>
        ///
        enum RenewWanConnectionResult
        {
            RenewWanConnectionResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_RenewWanConnectionResult__UNKNOWN__ /*<! Unknown value */,
            RenewWanConnectionResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_RenewWanConnectionResult_OK /*!< OK */,
            RenewWanConnectionResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_RenewWanConnectionResult_ERROR /*!< ERROR */
        }; // enum RenewWanConnectionResult

        ///
        /// \enum RestoreFactoryDefaultsResult
        ///      <a>http://purenetworks.com/HNAP1/RestoreFactoryDefaultsResult</a>
        ///
        enum RestoreFactoryDefaultsResult
        {
            RestoreFactoryDefaultsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_RestoreFactoryDefaultsResult__UNKNOWN__ /*<! Unknown value */,
            RestoreFactoryDefaultsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_RestoreFactoryDefaultsResult_OK /*!< OK */,
            RestoreFactoryDefaultsResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_RestoreFactoryDefaultsResult_REBOOT /*!< REBOOT */,
            RestoreFactoryDefaultsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_RestoreFactoryDefaultsResult_ERROR /*!< ERROR */
        }; // enum RestoreFactoryDefaultsResult

        ///
        /// \enum SetAccessPointModeResult
        ///      <a>http://purenetworks.com/HNAP1/SetAccessPointModeResult</a>
        ///
        enum SetAccessPointModeResult
        {
            SetAccessPointModeResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetAccessPointModeResult__UNKNOWN__ /*<! Unknown value */,
            SetAccessPointModeResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetAccessPointModeResult_OK /*!< OK */,
            SetAccessPointModeResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetAccessPointModeResult_REBOOT /*!< REBOOT */,
            SetAccessPointModeResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetAccessPointModeResult_ERROR /*!< ERROR */
        }; // enum SetAccessPointModeResult

        ///
        /// \enum SetConfigBlobResult
        ///      <a>http://purenetworks.com/HNAP1/SetConfigBlobResult</a>
        ///
        enum SetConfigBlobResult
        {
            SetConfigBlobResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetConfigBlobResult__UNKNOWN__ /*<! Unknown value */,
            SetConfigBlobResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetConfigBlobResult_OK /*!< OK */,
            SetConfigBlobResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetConfigBlobResult_REBOOT /*!< REBOOT */,
            SetConfigBlobResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetConfigBlobResult_ERROR /*!< ERROR */
        }; // enum SetConfigBlobResult

        ///
        /// \enum SetDeviceSettings2Result
        ///      <a>http://purenetworks.com/HNAP1/SetDeviceSettings2Result</a>
        ///
        enum SetDeviceSettings2Result
        {
            SetDeviceSettings2Result_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettings2Result__UNKNOWN__ /*<! Unknown value */,
            SetDeviceSettings2Result_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettings2Result_OK /*!< OK */,
            SetDeviceSettings2Result_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettings2Result_REBOOT /*!< REBOOT */,
            SetDeviceSettings2Result_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettings2Result_ERROR /*!< ERROR */,
            SetDeviceSettings2Result_ERROR_REMOTE_SSL_NEEDS_SSL = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettings2Result_ERROR_REMOTE_SSL_NEEDS_SSL /*!< ERROR_REMOTE_SSL_NEEDS_SSL */,
            SetDeviceSettings2Result_ERROR_TIMEZONE_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettings2Result_ERROR_TIMEZONE_NOT_SUPPORTED /*!< ERROR_TIMEZONE_NOT_SUPPORTED */,
            SetDeviceSettings2Result_ERROR_USERNAME_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettings2Result_ERROR_USERNAME_NOT_SUPPORTED /*!< ERROR_USERNAME_NOT_SUPPORTED */
        }; // enum SetDeviceSettings2Result

        ///
        /// \enum SetDeviceSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/SetDeviceSettingsResult</a>
        ///
        enum SetDeviceSettingsResult
        {
            SetDeviceSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettingsResult__UNKNOWN__ /*<! Unknown value */,
            SetDeviceSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettingsResult_OK /*!< OK */,
            SetDeviceSettingsResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettingsResult_REBOOT /*!< REBOOT */,
            SetDeviceSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetDeviceSettingsResult_ERROR /*!< ERROR */
        }; // enum SetDeviceSettingsResult

        ///
        /// \enum SetMACFilters2Result
        ///      <a>http://purenetworks.com/HNAP1/SetMACFilters2Result</a>
        ///
        enum SetMACFilters2Result
        {
            SetMACFilters2Result_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetMACFilters2Result__UNKNOWN__ /*<! Unknown value */,
            SetMACFilters2Result_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetMACFilters2Result_OK /*!< OK */,
            SetMACFilters2Result_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetMACFilters2Result_REBOOT /*!< REBOOT */,
            SetMACFilters2Result_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetMACFilters2Result_ERROR /*!< ERROR */
        }; // enum SetMACFilters2Result

        ///
        /// \enum SetRouterLanSettings2Result
        ///      <a>http://purenetworks.com/HNAP1/SetRouterLanSettings2Result</a>
        ///
        enum SetRouterLanSettings2Result
        {
            SetRouterLanSettings2Result_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result__UNKNOWN__ /*<! Unknown value */,
            SetRouterLanSettings2Result_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result_OK /*!< OK */,
            SetRouterLanSettings2Result_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result_ERROR /*!< ERROR */,
            SetRouterLanSettings2Result_ERROR_BAD_IP_ADDRESS = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result_ERROR_BAD_IP_ADDRESS /*!< ERROR_BAD_IP_ADDRESS */,
            SetRouterLanSettings2Result_ERROR_BAD_IP_RANGE = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result_ERROR_BAD_IP_RANGE /*!< ERROR_BAD_IP_RANGE */,
            SetRouterLanSettings2Result_ERROR_BAD_RESERVATION = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result_ERROR_BAD_RESERVATION /*!< ERROR_BAD_RESERVATION */,
            SetRouterLanSettings2Result_ERROR_BAD_SUBNET = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result_ERROR_BAD_SUBNET /*!< ERROR_BAD_SUBNET */,
            SetRouterLanSettings2Result_ERROR_RESERVATIONS_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterLanSettings2Result_ERROR_RESERVATIONS_NOT_SUPPORTED /*!< ERROR_RESERVATIONS_NOT_SUPPORTED */
        }; // enum SetRouterLanSettings2Result

        ///
        /// \enum SetRouterSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/SetRouterSettingsResult</a>
        ///
        enum SetRouterSettingsResult
        {
            SetRouterSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult__UNKNOWN__ /*<! Unknown value */,
            SetRouterSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_OK /*!< OK */,
            SetRouterSettingsResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_REBOOT /*!< REBOOT */,
            SetRouterSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR /*!< ERROR */,
            SetRouterSettingsResult_ERROR_DOMAIN_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR_DOMAIN_NOT_SUPPORTED /*!< ERROR_DOMAIN_NOT_SUPPORTED */,
            SetRouterSettingsResult_ERROR_QOS_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR_QOS_NOT_SUPPORTED /*!< ERROR_QOS_NOT_SUPPORTED */,
            SetRouterSettingsResult_ERROR_REMOTE_MANAGE_DEFAULT_PASSWORD = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR_REMOTE_MANAGE_DEFAULT_PASSWORD /*!< ERROR_REMOTE_MANAGE_DEFAULT_PASSWORD */,
            SetRouterSettingsResult_ERROR_REMOTE_MANAGE_MUST_BE_SSL = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR_REMOTE_MANAGE_MUST_BE_SSL /*!< ERROR_REMOTE_MANAGE_MUST_BE_SSL */,
            SetRouterSettingsResult_ERROR_REMOTE_MANAGE_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR_REMOTE_MANAGE_NOT_SUPPORTED /*!< ERROR_REMOTE_MANAGE_NOT_SUPPORTED */,
            SetRouterSettingsResult_ERROR_REMOTE_SSL_NEEDS_SSL = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR_REMOTE_SSL_NEEDS_SSL /*!< ERROR_REMOTE_SSL_NEEDS_SSL */,
            SetRouterSettingsResult_ERROR_REMOTE_SSL_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetRouterSettingsResult_ERROR_REMOTE_SSL_NOT_SUPPORTED /*!< ERROR_REMOTE_SSL_NOT_SUPPORTED */
        }; // enum SetRouterSettingsResult

        ///
        /// \enum SetWLanRadioFrequencyResult
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioFrequencyResult</a>
        ///
        enum SetWLanRadioFrequencyResult
        {
            SetWLanRadioFrequencyResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioFrequencyResult__UNKNOWN__ /*<! Unknown value */,
            SetWLanRadioFrequencyResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioFrequencyResult_OK /*!< OK */,
            SetWLanRadioFrequencyResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioFrequencyResult_REBOOT /*!< REBOOT */,
            SetWLanRadioFrequencyResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioFrequencyResult_ERROR /*!< ERROR */,
            SetWLanRadioFrequencyResult_ERROR_BAD_RADIOID = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioFrequencyResult_ERROR_BAD_RADIOID /*!< ERROR_BAD_RADIOID */
        }; // enum SetWLanRadioFrequencyResult

        ///
        /// \enum SetWLanRadioSecurityResult
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioSecurityResult</a>
        ///
        enum SetWLanRadioSecurityResult
        {
            SetWLanRadioSecurityResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult__UNKNOWN__ /*<! Unknown value */,
            SetWLanRadioSecurityResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_OK /*!< OK */,
            SetWLanRadioSecurityResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_REBOOT /*!< REBOOT */,
            SetWLanRadioSecurityResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_ERROR /*!< ERROR */,
            SetWLanRadioSecurityResult_ERROR_BAD_RADIOID = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_ERROR_BAD_RADIOID /*!< ERROR_BAD_RADIOID */,
            SetWLanRadioSecurityResult_ERROR_BAD_RADIUS_VALUES = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_ERROR_BAD_RADIUS_VALUES /*!< ERROR_BAD_RADIUS_VALUES */,
            SetWLanRadioSecurityResult_ERROR_ENCRYPTION_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_ERROR_ENCRYPTION_NOT_SUPPORTED /*!< ERROR_ENCRYPTION_NOT_SUPPORTED */,
            SetWLanRadioSecurityResult_ERROR_ILLEGAL_KEY_VALUE = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_ERROR_ILLEGAL_KEY_VALUE /*!< ERROR_ILLEGAL_KEY_VALUE */,
            SetWLanRadioSecurityResult_ERROR_KEY_RENEWAL_BAD_VALUE = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_ERROR_KEY_RENEWAL_BAD_VALUE /*!< ERROR_KEY_RENEWAL_BAD_VALUE */,
            SetWLanRadioSecurityResult_ERROR_TYPE_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSecurityResult_ERROR_TYPE_NOT_SUPPORTED /*!< ERROR_TYPE_NOT_SUPPORTED */
        }; // enum SetWLanRadioSecurityResult

        ///
        /// \enum SetWLanRadioSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioSettingsResult</a>
        ///
        enum SetWLanRadioSettingsResult
        {
            SetWLanRadioSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult__UNKNOWN__ /*<! Unknown value */,
            SetWLanRadioSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_OK /*!< OK */,
            SetWLanRadioSettingsResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_REBOOT /*!< REBOOT */,
            SetWLanRadioSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_ERROR /*!< ERROR */,
            SetWLanRadioSettingsResult_ERROR_BAD_CHANNEL = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_ERROR_BAD_CHANNEL /*!< ERROR_BAD_CHANNEL */,
            SetWLanRadioSettingsResult_ERROR_BAD_CHANNEL_WIDTH = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_ERROR_BAD_CHANNEL_WIDTH /*!< ERROR_BAD_CHANNEL_WIDTH */,
            SetWLanRadioSettingsResult_ERROR_BAD_MODE = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_ERROR_BAD_MODE /*!< ERROR_BAD_MODE */,
            SetWLanRadioSettingsResult_ERROR_BAD_RADIOID = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_ERROR_BAD_RADIOID /*!< ERROR_BAD_RADIOID */,
            SetWLanRadioSettingsResult_ERROR_BAD_SECONDARY_CHANNEL = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_ERROR_BAD_SECONDARY_CHANNEL /*!< ERROR_BAD_SECONDARY_CHANNEL */,
            SetWLanRadioSettingsResult_ERROR_BAD_SSID = ACTUAL_CLIENT_MOD_Enum_PN_SetWLanRadioSettingsResult_ERROR_BAD_SSID /*!< ERROR_BAD_SSID */
        }; // enum SetWLanRadioSettingsResult

        ///
        /// \enum SetWanSettingsResult
        ///      <a>http://purenetworks.com/HNAP1/SetWanSettingsResult</a>
        ///
        enum SetWanSettingsResult
        {
            SetWanSettingsResult_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_SetWanSettingsResult__UNKNOWN__ /*<! Unknown value */,
            SetWanSettingsResult_OK = ACTUAL_CLIENT_MOD_Enum_PN_SetWanSettingsResult_OK /*!< OK */,
            SetWanSettingsResult_REBOOT = ACTUAL_CLIENT_MOD_Enum_PN_SetWanSettingsResult_REBOOT /*!< REBOOT */,
            SetWanSettingsResult_ERROR = ACTUAL_CLIENT_MOD_Enum_PN_SetWanSettingsResult_ERROR /*!< ERROR */,
            SetWanSettingsResult_ERROR_AUTO_MTU_NOT_SUPPORTED = ACTUAL_CLIENT_MOD_Enum_PN_SetWanSettingsResult_ERROR_AUTO_MTU_NOT_SUPPORTED /*!< ERROR_AUTO_MTU_NOT_SUPPORTED */,
            SetWanSettingsResult_ERROR_BAD_WANTYPE = ACTUAL_CLIENT_MOD_Enum_PN_SetWanSettingsResult_ERROR_BAD_WANTYPE /*!< ERROR_BAD_WANTYPE */
        }; // enum SetWanSettingsResult

        ///
        /// \enum TaskExtType
        ///      <a>http://purenetworks.com/HNAP1/TaskExtType</a>
        ///
        enum TaskExtType
        {
            TaskExtType_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_TaskExtType__UNKNOWN__ /*<! Unknown value */,
            TaskExtType_Browser = ACTUAL_CLIENT_MOD_Enum_PN_TaskExtType_Browser /*!< Browser */,
            TaskExtType_MessageBox = ACTUAL_CLIENT_MOD_Enum_PN_TaskExtType_MessageBox /*!< MessageBox */,
            TaskExtType_PUI = ACTUAL_CLIENT_MOD_Enum_PN_TaskExtType_PUI /*!< PUI */,
            TaskExtType_Silent = ACTUAL_CLIENT_MOD_Enum_PN_TaskExtType_Silent /*!< Silent */
        }; // enum TaskExtType

        ///
        /// \enum UpdateMethod
        ///      <a>http://purenetworks.com/HNAP1/UpdateMethod</a>
        ///
        enum UpdateMethod
        {
            UpdateMethod_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_UpdateMethod__UNKNOWN__ /*<! Unknown value */,
            UpdateMethod_HNAP_UPLOAD = ACTUAL_CLIENT_MOD_Enum_PN_UpdateMethod_HNAP_UPLOAD /*!< HNAP_UPLOAD */,
            UpdateMethod_TFTP_UPLOAD = ACTUAL_CLIENT_MOD_Enum_PN_UpdateMethod_TFTP_UPLOAD /*!< TFTP_UPLOAD */
        }; // enum UpdateMethod

        ///
        /// \enum WANStatus
        ///      <a>http://purenetworks.com/HNAP1/WANStatus</a>
        ///
        enum WANStatus
        {
            WANStatus_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_WANStatus__UNKNOWN__ /*<! Unknown value */,
            WANStatus_CONNECTED = ACTUAL_CLIENT_MOD_Enum_PN_WANStatus_CONNECTED /*!< CONNECTED */,
            WANStatus_CONNECTING = ACTUAL_CLIENT_MOD_Enum_PN_WANStatus_CONNECTING /*!< CONNECTING */,
            WANStatus_DISCONNECTED = ACTUAL_CLIENT_MOD_Enum_PN_WANStatus_DISCONNECTED /*!< DISCONNECTED */,
            WANStatus_LIMITED_CONNECTION = ACTUAL_CLIENT_MOD_Enum_PN_WANStatus_LIMITED_CONNECTION /*!< LIMITED_CONNECTION */,
            WANStatus_UNKNOWN = ACTUAL_CLIENT_MOD_Enum_PN_WANStatus_UNKNOWN /*!< UNKNOWN */
        }; // enum WANStatus

        ///
        /// \enum WANType
        ///      <a>http://purenetworks.com/HNAP1/WANType</a>
        ///
        enum WANType
        {
            WANType_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_WANType__UNKNOWN__ /*<! Unknown value */,
            WANType_BigPond = ACTUAL_CLIENT_MOD_Enum_PN_WANType_BigPond /*!< BigPond */,
            WANType_BridgedOnly = ACTUAL_CLIENT_MOD_Enum_PN_WANType_BridgedOnly /*!< BridgedOnly */,
            WANType_DETECTING = ACTUAL_CLIENT_MOD_Enum_PN_WANType_DETECTING /*!< DETECTING */,
            WANType_DHCP = ACTUAL_CLIENT_MOD_Enum_PN_WANType_DHCP /*!< DHCP */,
            WANType_DHCPPPPoE = ACTUAL_CLIENT_MOD_Enum_PN_WANType_DHCPPPPoE /*!< DHCPPPPoE */,
            WANType_Dynamic1483Bridged = ACTUAL_CLIENT_MOD_Enum_PN_WANType_Dynamic1483Bridged /*!< Dynamic1483Bridged */,
            WANType_DynamicL2TP = ACTUAL_CLIENT_MOD_Enum_PN_WANType_DynamicL2TP /*!< DynamicL2TP */,
            WANType_DynamicPPPOA = ACTUAL_CLIENT_MOD_Enum_PN_WANType_DynamicPPPOA /*!< DynamicPPPOA */,
            WANType_DynamicPPTP = ACTUAL_CLIENT_MOD_Enum_PN_WANType_DynamicPPTP /*!< DynamicPPTP */,
            WANType_Static = ACTUAL_CLIENT_MOD_Enum_PN_WANType_Static /*!< Static */,
            WANType_Static1483Bridged = ACTUAL_CLIENT_MOD_Enum_PN_WANType_Static1483Bridged /*!< Static1483Bridged */,
            WANType_Static1483Routed = ACTUAL_CLIENT_MOD_Enum_PN_WANType_Static1483Routed /*!< Static1483Routed */,
            WANType_StaticIPOA = ACTUAL_CLIENT_MOD_Enum_PN_WANType_StaticIPOA /*!< StaticIPOA */,
            WANType_StaticL2TP = ACTUAL_CLIENT_MOD_Enum_PN_WANType_StaticL2TP /*!< StaticL2TP */,
            WANType_StaticPPPOA = ACTUAL_CLIENT_MOD_Enum_PN_WANType_StaticPPPOA /*!< StaticPPPOA */,
            WANType_StaticPPPoE = ACTUAL_CLIENT_MOD_Enum_PN_WANType_StaticPPPoE /*!< StaticPPPoE */,
            WANType_StaticPPTP = ACTUAL_CLIENT_MOD_Enum_PN_WANType_StaticPPTP /*!< StaticPPTP */,
            WANType_UNKNOWN = ACTUAL_CLIENT_MOD_Enum_PN_WANType_UNKNOWN /*!< UNKNOWN */
        }; // enum WANType

        ///
        /// \enum WiFiEncryption
        ///      <a>http://purenetworks.com/HNAP1/WiFiEncryption</a>
        ///
        enum WiFiEncryption
        {
            WiFiEncryption_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_WiFiEncryption__UNKNOWN__ /*<! Unknown value */,
            WiFiEncryption = ACTUAL_CLIENT_MOD_Enum_PN_WiFiEncryption_ /*!<  */,
            WiFiEncryption_AES = ACTUAL_CLIENT_MOD_Enum_PN_WiFiEncryption_AES /*!< AES */,
            WiFiEncryption_TKIP = ACTUAL_CLIENT_MOD_Enum_PN_WiFiEncryption_TKIP /*!< TKIP */,
            WiFiEncryption_TKIPORAES = ACTUAL_CLIENT_MOD_Enum_PN_WiFiEncryption_TKIPORAES /*!< TKIPORAES */,
            WiFiEncryption_WEP_128 = ACTUAL_CLIENT_MOD_Enum_PN_WiFiEncryption_WEP_128 /*!< WEP-128 */,
            WiFiEncryption_WEP_64 = ACTUAL_CLIENT_MOD_Enum_PN_WiFiEncryption_WEP_64 /*!< WEP-64 */
        }; // enum WiFiEncryption

        ///
        /// \enum WiFiMode
        ///      <a>http://purenetworks.com/HNAP1/WiFiMode</a>
        ///
        enum WiFiMode
        {
            WiFiMode_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode__UNKNOWN__ /*<! Unknown value */,
            WiFiMode = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_ /*!<  */,
            WiFiMode_802_11a = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11a /*!< 802.11a */,
            WiFiMode_802_11an = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11an /*!< 802.11an */,
            WiFiMode_802_11b = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11b /*!< 802.11b */,
            WiFiMode_802_11bg = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11bg /*!< 802.11bg */,
            WiFiMode_802_11bgn = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11bgn /*!< 802.11bgn */,
            WiFiMode_802_11bn = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11bn /*!< 802.11bn */,
            WiFiMode_802_11g = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11g /*!< 802.11g */,
            WiFiMode_802_11gn = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11gn /*!< 802.11gn */,
            WiFiMode_802_11n = ACTUAL_CLIENT_MOD_Enum_PN_WiFiMode_802_11n /*!< 802.11n */
        }; // enum WiFiMode

        ///
        /// \enum WiFiSecurity
        ///      <a>http://purenetworks.com/HNAP1/WiFiSecurity</a>
        ///
        enum WiFiSecurity
        {
            WiFiSecurity_Unknown = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity__UNKNOWN__ /*<! Unknown value */,
            WiFiSecurity = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_ /*!<  */,
            WiFiSecurity_WEP = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WEP /*!< WEP */,
            WiFiSecurity_WEP_AUTO = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WEP_AUTO /*!< WEP-AUTO */,
            WiFiSecurity_WEP_OPEN = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WEP_OPEN /*!< WEP-OPEN */,
            WiFiSecurity_WEP_RADIUS = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WEP_RADIUS /*!< WEP-RADIUS */,
            WiFiSecurity_WEP_SHARED = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WEP_SHARED /*!< WEP-SHARED */,
            WiFiSecurity_WPA_AUTO_PSK = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WPA_AUTO_PSK /*!< WPA-AUTO-PSK */,
            WiFiSecurity_WPA_PSK = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WPA_PSK /*!< WPA-PSK */,
            WiFiSecurity_WPA_RADIUS = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WPA_RADIUS /*!< WPA-RADIUS */,
            WiFiSecurity_WPA2_PSK = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WPA2_PSK /*!< WPA2-PSK */,
            WiFiSecurity_WPA2_RADIUS = ACTUAL_CLIENT_MOD_Enum_PN_WiFiSecurity_WPA2_RADIUS /*!< WPA2-RADIUS */
        }; // enum WiFiSecurity

    } // namespace Purenetworks_HNAP1

    namespace Cisco_HNAP
    {
        ///
        /// \class ServiceInfoArray
        ///      Wrapper class for accessing arrays of ServiceInfo values.
        ///
        class ServiceInfoStruct; // forward declaration
        typedef HDK::StructArray<ServiceInfoStruct, ACTUAL_CLIENT_MOD_Element_ServiceInfo> ServiceInfoArray;
        typedef HDK::StructArray<ServiceInfoStruct, ACTUAL_CLIENT_MOD_Element_ServiceInfo>::StructArrayIter ServiceInfoArrayIter;

    } // namespace Cisco_HNAP

    namespace Purenetworks_HNAP1
    {
        ///
        /// \class ClientStatArray
        ///      Wrapper class for accessing arrays of ClientStat values.
        ///
        class ClientStatStruct; // forward declaration
        typedef HDK::StructArray<ClientStatStruct, ACTUAL_CLIENT_MOD_Element_PN_ClientStat> ClientStatArray;
        typedef HDK::StructArray<ClientStatStruct, ACTUAL_CLIENT_MOD_Element_PN_ClientStat>::StructArrayIter ClientStatArrayIter;

        ///
        /// \class ConnectedClientArray
        ///      Wrapper class for accessing arrays of ConnectedClient values.
        ///
        class ConnectedClientStruct; // forward declaration
        typedef HDK::StructArray<ConnectedClientStruct, ACTUAL_CLIENT_MOD_Element_PN_ConnectedClient> ConnectedClientArray;
        typedef HDK::StructArray<ConnectedClientStruct, ACTUAL_CLIENT_MOD_Element_PN_ConnectedClient>::StructArrayIter ConnectedClientArrayIter;

        ///
        /// \class DHCPReservationArray
        ///      Wrapper class for accessing arrays of DHCPReservation values.
        ///
        class DHCPReservationStruct; // forward declaration
        typedef HDK::StructArray<DHCPReservationStruct, ACTUAL_CLIENT_MOD_Element_PN_DHCPReservation> DHCPReservationArray;
        typedef HDK::StructArray<DHCPReservationStruct, ACTUAL_CLIENT_MOD_Element_PN_DHCPReservation>::StructArrayIter DHCPReservationArrayIter;

        ///
        /// \class IntArray
        ///      Wrapper class for accessing arrays of int values.
        ///
        typedef HDK::IntArray<ACTUAL_CLIENT_MOD_Element_PN_int> IntArray;
        typedef HDK::IntArray<ACTUAL_CLIENT_MOD_Element_PN_int>::IntArrayIter IntArrayIter;

        ///
        /// \class MACInfoArray
        ///      Wrapper class for accessing arrays of MACInfo values.
        ///
        class MACInfoStruct; // forward declaration
        typedef HDK::StructArray<MACInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_MACInfo> MACInfoArray;
        typedef HDK::StructArray<MACInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_MACInfo>::StructArrayIter MACInfoArrayIter;

        ///
        /// \class NetworkStatsArray
        ///      Wrapper class for accessing arrays of NetworkStats values.
        ///
        class NetworkStatsStruct; // forward declaration
        typedef HDK::StructArray<NetworkStatsStruct, ACTUAL_CLIENT_MOD_Element_PN_NetworkStats> NetworkStatsArray;
        typedef HDK::StructArray<NetworkStatsStruct, ACTUAL_CLIENT_MOD_Element_PN_NetworkStats>::StructArrayIter NetworkStatsArrayIter;

        ///
        /// \class PortMappingArray
        ///      Wrapper class for accessing arrays of PortMapping values.
        ///
        class PortMappingStruct; // forward declaration
        typedef HDK::StructArray<PortMappingStruct, ACTUAL_CLIENT_MOD_Element_PN_PortMapping> PortMappingArray;
        typedef HDK::StructArray<PortMappingStruct, ACTUAL_CLIENT_MOD_Element_PN_PortMapping>::StructArrayIter PortMappingArrayIter;

        ///
        /// \class RadioFrequencyInfoArray
        ///      Wrapper class for accessing arrays of RadioFrequencyInfo values.
        ///
        class RadioFrequencyInfoStruct; // forward declaration
        typedef HDK::StructArray<RadioFrequencyInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_RadioFrequencyInfo> RadioFrequencyInfoArray;
        typedef HDK::StructArray<RadioFrequencyInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_RadioFrequencyInfo>::StructArrayIter RadioFrequencyInfoArrayIter;

        ///
        /// \class RadioInfoArray
        ///      Wrapper class for accessing arrays of RadioInfo values.
        ///
        class RadioInfoStruct; // forward declaration
        typedef HDK::StructArray<RadioInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_RadioInfo> RadioInfoArray;
        typedef HDK::StructArray<RadioInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_RadioInfo>::StructArrayIter RadioInfoArrayIter;

        ///
        /// \class SecurityInfoArray
        ///      Wrapper class for accessing arrays of SecurityInfo values.
        ///
        class SecurityInfoStruct; // forward declaration
        typedef HDK::StructArray<SecurityInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_SecurityInfo> SecurityInfoArray;
        typedef HDK::StructArray<SecurityInfoStruct, ACTUAL_CLIENT_MOD_Element_PN_SecurityInfo>::StructArrayIter SecurityInfoArrayIter;

        ///
        /// \class StringArray
        ///      Wrapper class for accessing arrays of string values.
        ///
        typedef HDK::StringArray<ACTUAL_CLIENT_MOD_Element_PN_string> StringArray;
        typedef HDK::StringArray<ACTUAL_CLIENT_MOD_Element_PN_string>::StringArrayIter StringArrayIter;

        ///
        /// \class TaskExtensionArray
        ///      Wrapper class for accessing arrays of TaskExtension values.
        ///
        class TaskExtensionStruct; // forward declaration
        typedef HDK::StructArray<TaskExtensionStruct, ACTUAL_CLIENT_MOD_Element_PN_TaskExtension> TaskExtensionArray;
        typedef HDK::StructArray<TaskExtensionStruct, ACTUAL_CLIENT_MOD_Element_PN_TaskExtension>::StructArrayIter TaskExtensionArrayIter;

        ///
        /// \class UpdateMethodArray
        ///      Wrapper class for accessing arrays of UpdateMethod values.
        ///
        typedef HDK::EnumArray<enum UpdateMethod, ACTUAL_CLIENT_MOD_EnumType_PN_UpdateMethod, ACTUAL_CLIENT_MOD_Element_PN_string> UpdateMethodArray;
        typedef HDK::EnumArray<enum UpdateMethod, ACTUAL_CLIENT_MOD_EnumType_PN_UpdateMethod, ACTUAL_CLIENT_MOD_Element_PN_string>::EnumArrayIter UpdateMethodArrayIter;

        ///
        /// \class WANTypeArray
        ///      Wrapper class for accessing arrays of WANType values.
        ///
        typedef HDK::EnumArray<enum WANType, ACTUAL_CLIENT_MOD_EnumType_PN_WANType, ACTUAL_CLIENT_MOD_Element_PN_string> WANTypeArray;
        typedef HDK::EnumArray<enum WANType, ACTUAL_CLIENT_MOD_EnumType_PN_WANType, ACTUAL_CLIENT_MOD_Element_PN_string>::EnumArrayIter WANTypeArrayIter;

        ///
        /// \class WiFiEncryptionArray
        ///      Wrapper class for accessing arrays of WiFiEncryption values.
        ///
        typedef HDK::EnumArray<enum WiFiEncryption, ACTUAL_CLIENT_MOD_EnumType_PN_WiFiEncryption, ACTUAL_CLIENT_MOD_Element_PN_string> WiFiEncryptionArray;
        typedef HDK::EnumArray<enum WiFiEncryption, ACTUAL_CLIENT_MOD_EnumType_PN_WiFiEncryption, ACTUAL_CLIENT_MOD_Element_PN_string>::EnumArrayIter WiFiEncryptionArrayIter;

        ///
        /// \class WiFiModeArray
        ///      Wrapper class for accessing arrays of WiFiMode values.
        ///
        typedef HDK::EnumArray<enum WiFiMode, ACTUAL_CLIENT_MOD_EnumType_PN_WiFiMode, ACTUAL_CLIENT_MOD_Element_PN_string> WiFiModeArray;
        typedef HDK::EnumArray<enum WiFiMode, ACTUAL_CLIENT_MOD_EnumType_PN_WiFiMode, ACTUAL_CLIENT_MOD_Element_PN_string>::EnumArrayIter WiFiModeArrayIter;

        ///
        /// \class WideChannelArray
        ///      Wrapper class for accessing arrays of WideChannel values.
        ///
        class WideChannelStruct; // forward declaration
        typedef HDK::StructArray<WideChannelStruct, ACTUAL_CLIENT_MOD_Element_PN_WideChannel> WideChannelArray;
        typedef HDK::StructArray<WideChannelStruct, ACTUAL_CLIENT_MOD_Element_PN_WideChannel>::StructArrayIter WideChannelArrayIter;

    } // namespace Purenetworks_HNAP1

    namespace Cisco_HNAP
    {
        ///
        /// \brief ServiceInfo
        ///      <a>http://cisco.com/HNAP/ServiceInfo</a>
        ///
        class ServiceInfoStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            ServiceInfoStruct() throw();

            ServiceInfoStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the ServiceName value.
            ///
            const char* get_ServiceName() const throw();

            ///
            /// \brief Set the ServiceName value.
            ///
            void set_ServiceName(const char* value) throw();

            ///
            /// \brief Get the ServiceLevel value.
            ///
            HDK_XML_Int get_ServiceLevel() const throw();

            ///
            /// \brief Set the ServiceLevel value.
            ///
            void set_ServiceLevel(HDK_XML_Int value) throw();

        }; // class ServiceInfoStruct : public Struct

    } // namespace Cisco_HNAP

    namespace Purenetworks_HNAP1
    {
        ///
        /// \brief ClientStat
        ///      <a>http://purenetworks.com/HNAP1/ClientStat</a>
        ///
        class ClientStatStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            ClientStatStruct() throw();

            ClientStatStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the MacAddress value.
            ///
            MACAddress get_MacAddress() const throw();

            ///
            /// \brief Set the MacAddress value.
            ///
            void set_MacAddress(const MACAddress& value) throw();

            ///
            /// \brief Get the Wireless value.
            ///
            bool get_Wireless() const throw();

            ///
            /// \brief Set the Wireless value.
            ///
            void set_Wireless(bool value) throw();

            ///
            /// \brief Get the LinkSpeedIn value.
            ///
            HDK_XML_Int get_LinkSpeedIn() const throw();

            ///
            /// \brief Set the LinkSpeedIn value.
            ///
            void set_LinkSpeedIn(HDK_XML_Int value) throw();

            ///
            /// \brief Get the LinkSpeedOut value.
            ///
            HDK_XML_Int get_LinkSpeedOut() const throw();

            ///
            /// \brief Set the LinkSpeedOut value.
            ///
            void set_LinkSpeedOut(HDK_XML_Int value) throw();

            ///
            /// \brief Get the SignalStrength value.
            ///
            HDK_XML_Int get_SignalStrength() const throw();

            ///
            /// \brief Set the SignalStrength value.
            ///
            void set_SignalStrength(HDK_XML_Int value) throw();

        }; // class ClientStatStruct : public Struct

        ///
        /// \brief ConnectedClient
        ///      <a>http://purenetworks.com/HNAP1/ConnectedClient</a>
        ///
        class ConnectedClientStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            ConnectedClientStruct() throw();

            ConnectedClientStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the ConnectTime value.
            ///
            time_t get_ConnectTime() const throw();

            ///
            /// \brief Set the ConnectTime value.
            ///
            void set_ConnectTime(time_t value) throw();

            ///
            /// \brief Get the MacAddress value.
            ///
            MACAddress get_MacAddress() const throw();

            ///
            /// \brief Set the MacAddress value.
            ///
            void set_MacAddress(const MACAddress& value) throw();

            ///
            /// \brief Get the DeviceName value.
            ///
            const char* get_DeviceName() const throw();

            ///
            /// \brief Set the DeviceName value.
            ///
            void set_DeviceName(const char* value) throw();

            ///
            /// \brief Get the PortName value.
            ///
            enum LANConnection get_PortName() const throw();

            ///
            /// \brief Set the PortName value.
            ///
            void set_PortName(enum LANConnection value) throw();

            ///
            /// \brief Get the Wireless value.
            ///
            bool get_Wireless() const throw();

            ///
            /// \brief Set the Wireless value.
            ///
            void set_Wireless(bool value) throw();

            ///
            /// \brief Get the Active value.
            ///
            bool get_Active() const throw();

            ///
            /// \brief Set the Active value.
            ///
            void set_Active(bool value) throw();

        }; // class ConnectedClientStruct : public Struct

        ///
        /// \brief DHCPReservation
        ///      <a>http://purenetworks.com/HNAP1/DHCPReservation</a>
        ///
        class DHCPReservationStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            DHCPReservationStruct() throw();

            DHCPReservationStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the DeviceName value.
            ///
            const char* get_DeviceName() const throw();

            ///
            /// \brief Set the DeviceName value.
            ///
            void set_DeviceName(const char* value) throw();

            ///
            /// \brief Get the IPAddress value.
            ///
            IPv4Address get_IPAddress() const throw();

            ///
            /// \brief Set the IPAddress value.
            ///
            void set_IPAddress(const IPv4Address& value) throw();

            ///
            /// \brief Get the MacAddress value.
            ///
            MACAddress get_MacAddress() const throw();

            ///
            /// \brief Set the MacAddress value.
            ///
            void set_MacAddress(const MACAddress& value) throw();

        }; // class DHCPReservationStruct : public Struct

        ///
        /// \brief DNSSettings
        ///      <a>http://purenetworks.com/HNAP1/DNSSettings</a>
        ///
        class DNSSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            DNSSettingsStruct() throw();

            DNSSettingsStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the Primary value.
            ///
            IPv4Address get_Primary() const throw();

            ///
            /// \brief Set the Primary value.
            ///
            void set_Primary(const IPv4Address& value) throw();

            ///
            /// \brief Get the Secondary value.
            ///
            IPv4Address get_Secondary() const throw();

            ///
            /// \brief Set the Secondary value.
            ///
            void set_Secondary(const IPv4Address& value) throw();

            ///
            /// \brief Get the Tertiary value.
            ///
            IPv4Address get_Tertiary() const throw();

            ///
            /// \brief Set the Tertiary value.
            ///
            void set_Tertiary(const IPv4Address& value) throw();

        }; // class DNSSettingsStruct : public Struct

        ///
        /// \brief MACInfo
        ///      <a>http://purenetworks.com/HNAP1/MACInfo</a>
        ///
        class MACInfoStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            MACInfoStruct() throw();

            MACInfoStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the MacAddress value.
            ///
            MACAddress get_MacAddress() const throw();

            ///
            /// \brief Set the MacAddress value.
            ///
            void set_MacAddress(const MACAddress& value) throw();

            ///
            /// \brief Get the DeviceName value.
            ///
            const char* get_DeviceName() const throw();

            ///
            /// \brief Set the DeviceName value.
            ///
            void set_DeviceName(const char* value) throw();

        }; // class MACInfoStruct : public Struct

        ///
        /// \brief NetworkStats
        ///      <a>http://purenetworks.com/HNAP1/NetworkStats</a>
        ///
        class NetworkStatsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            NetworkStatsStruct() throw();

            NetworkStatsStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the PortName value.
            ///
            enum LANConnection get_PortName() const throw();

            ///
            /// \brief Set the PortName value.
            ///
            void set_PortName(enum LANConnection value) throw();

            ///
            /// \brief Get the PacketsReceived value.
            ///
            HDK_XML_Long get_PacketsReceived() const throw();

            ///
            /// \brief Set the PacketsReceived value.
            ///
            void set_PacketsReceived(HDK_XML_Long value) throw();

            ///
            /// \brief Get the PacketsSent value.
            ///
            HDK_XML_Long get_PacketsSent() const throw();

            ///
            /// \brief Set the PacketsSent value.
            ///
            void set_PacketsSent(HDK_XML_Long value) throw();

            ///
            /// \brief Get the BytesReceived value.
            ///
            HDK_XML_Long get_BytesReceived() const throw();

            ///
            /// \brief Set the BytesReceived value.
            ///
            void set_BytesReceived(HDK_XML_Long value) throw();

            ///
            /// \brief Get the BytesSent value.
            ///
            HDK_XML_Long get_BytesSent() const throw();

            ///
            /// \brief Set the BytesSent value.
            ///
            void set_BytesSent(HDK_XML_Long value) throw();

        }; // class NetworkStatsStruct : public Struct

        ///
        /// \brief PortMapping
        ///      <a>http://purenetworks.com/HNAP1/PortMapping</a>
        ///
        class PortMappingStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            PortMappingStruct() throw();

            PortMappingStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the PortMappingDescription value.
            ///
            const char* get_PortMappingDescription() const throw();

            ///
            /// \brief Set the PortMappingDescription value.
            ///
            void set_PortMappingDescription(const char* value) throw();

            ///
            /// \brief Get the InternalClient value.
            ///
            IPv4Address get_InternalClient() const throw();

            ///
            /// \brief Set the InternalClient value.
            ///
            void set_InternalClient(const IPv4Address& value) throw();

            ///
            /// \brief Get the PortMappingProtocol value.
            ///
            enum IPProtocol get_PortMappingProtocol() const throw();

            ///
            /// \brief Set the PortMappingProtocol value.
            ///
            void set_PortMappingProtocol(enum IPProtocol value) throw();

            ///
            /// \brief Get the ExternalPort value.
            ///
            HDK_XML_Int get_ExternalPort() const throw();

            ///
            /// \brief Set the ExternalPort value.
            ///
            void set_ExternalPort(HDK_XML_Int value) throw();

            ///
            /// \brief Get the InternalPort value.
            ///
            HDK_XML_Int get_InternalPort() const throw();

            ///
            /// \brief Set the InternalPort value.
            ///
            void set_InternalPort(HDK_XML_Int value) throw();

        }; // class PortMappingStruct : public Struct

        ///
        /// \brief RadioFrequencyInfo
        ///      <a>http://purenetworks.com/HNAP1/RadioFrequencyInfo</a>
        ///
        class RadioFrequencyInfoStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RadioFrequencyInfoStruct() throw();

            RadioFrequencyInfoStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the RadioID value.
            ///
            const char* get_RadioID() const throw();

            ///
            /// \brief Set the RadioID value.
            ///
            void set_RadioID(const char* value) throw();

            ///
            /// \brief Get the Frequencies value.
            ///
            IntArray get_Frequencies() const throw();

            ///
            /// \brief Set the Frequencies value.
            ///
            void set_Frequencies(const IntArray& value) throw();

        }; // class RadioFrequencyInfoStruct : public Struct

        class WideChannelStruct;
        class SecurityInfoStruct;
        ///
        /// \brief RadioInfo
        ///      <a>http://purenetworks.com/HNAP1/RadioInfo</a>
        ///
        class RadioInfoStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RadioInfoStruct() throw();

            RadioInfoStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the RadioID value.
            ///
            const char* get_RadioID() const throw();

            ///
            /// \brief Set the RadioID value.
            ///
            void set_RadioID(const char* value) throw();

            ///
            /// \brief Get the Frequency value.
            ///
            HDK_XML_Int get_Frequency() const throw();

            ///
            /// \brief Set the Frequency value.
            ///
            void set_Frequency(HDK_XML_Int value) throw();

            ///
            /// \brief Get the SupportedModes value.
            ///
            WiFiModeArray get_SupportedModes() const throw();

            ///
            /// \brief Set the SupportedModes value.
            ///
            void set_SupportedModes(const WiFiModeArray& value) throw();

            ///
            /// \brief Get the Channels value.
            ///
            IntArray get_Channels() const throw();

            ///
            /// \brief Set the Channels value.
            ///
            void set_Channels(const IntArray& value) throw();

            ///
            /// \brief Get the WideChannels value.
            ///
            WideChannelArray get_WideChannels() const throw();

            ///
            /// \brief Set the WideChannels value.
            ///
            void set_WideChannels(const WideChannelArray& value) throw();

            ///
            /// \brief Get the SupportedSecurity value.
            ///
            SecurityInfoArray get_SupportedSecurity() const throw();

            ///
            /// \brief Set the SupportedSecurity value.
            ///
            void set_SupportedSecurity(const SecurityInfoArray& value) throw();

        }; // class RadioInfoStruct : public Struct

        ///
        /// \brief SecurityInfo
        ///      <a>http://purenetworks.com/HNAP1/SecurityInfo</a>
        ///
        class SecurityInfoStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SecurityInfoStruct() throw();

            SecurityInfoStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the SecurityType value.
            ///
            enum WiFiSecurity get_SecurityType() const throw();

            ///
            /// \brief Set the SecurityType value.
            ///
            void set_SecurityType(enum WiFiSecurity value) throw();

            ///
            /// \brief Get the Encryptions value.
            ///
            WiFiEncryptionArray get_Encryptions() const throw();

            ///
            /// \brief Set the Encryptions value.
            ///
            void set_Encryptions(const WiFiEncryptionArray& value) throw();

        }; // class SecurityInfoStruct : public Struct

        ///
        /// \brief TaskExtension
        ///      <a>http://purenetworks.com/HNAP1/TaskExtension</a>
        ///
        class TaskExtensionStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            TaskExtensionStruct() throw();

            TaskExtensionStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the Name value.
            ///
            const char* get_Name() const throw();

            ///
            /// \brief Set the Name value.
            ///
            void set_Name(const char* value) throw();

            ///
            /// \brief Get the URL value.
            ///
            const char* get_URL() const throw();

            ///
            /// \brief Set the URL value.
            ///
            void set_URL(const char* value) throw();

            ///
            /// \brief Get the Type value.
            ///
            enum TaskExtType get_Type() const throw();

            ///
            /// \brief Set the Type value.
            ///
            void set_Type(enum TaskExtType value) throw();

        }; // class TaskExtensionStruct : public Struct

        ///
        /// \brief WideChannel
        ///      <a>http://purenetworks.com/HNAP1/WideChannel</a>
        ///
        class WideChannelStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            WideChannelStruct() throw();

            WideChannelStruct(HDK_XML_Struct* phdkstruct) throw();

            ///
            /// \brief Get the Channel value.
            ///
            HDK_XML_Int get_Channel() const throw();

            ///
            /// \brief Set the Channel value.
            ///
            void set_Channel(HDK_XML_Int value) throw();

            ///
            /// \brief Get the SecondaryChannels value.
            ///
            IntArray get_SecondaryChannels() const throw();

            ///
            /// \brief Set the SecondaryChannels value.
            ///
            void set_SecondaryChannels(const IntArray& value) throw();

        }; // class WideChannelStruct : public Struct

    } // namespace Purenetworks_HNAP1

    namespace Cisco_HNAP
    {
        ///
        /// \brief GetServiceInfo
        ///      <a>http://cisco.com/HNAP/GetServiceInfo</a>
        ///
        class GetServiceInfoStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetServiceInfoStruct() throw();

            ///
            /// \brief Get the ServiceName value.
            ///
            const char* get_ServiceName() const throw();

            ///
            /// \brief Set the ServiceName value.
            ///
            void set_ServiceName(const char* value) throw();

        }; // class GetServiceInfoStruct : public Struct

        ///
        /// \brief GetServiceInfoResponse
        ///      <a>http://cisco.com/HNAP/GetServiceInfoResponse</a>
        ///
        class GetServiceInfoResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetServiceInfoResponseStruct() throw();

            ///
            /// \brief Get the GetServiceInfoResult value.
            ///
            enum GetServiceInfoResult get_GetServiceInfoResult() const throw();

            ///
            /// \brief Get the Info value.
            ///
            ServiceInfoStruct get_Info() const throw();

        }; // class GetServiceInfoResponseStruct : public Struct

        ///
        /// \brief GetServices
        ///      <a>http://cisco.com/HNAP/GetServices</a>
        ///
        class GetServicesStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetServicesStruct() throw();

        }; // class GetServicesStruct : public Struct

        ///
        /// \brief GetServicesResponse
        ///      <a>http://cisco.com/HNAP/GetServicesResponse</a>
        ///
        class GetServicesResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetServicesResponseStruct() throw();

            ///
            /// \brief Get the GetServicesResult value.
            ///
            enum GetServicesResult get_GetServicesResult() const throw();

            ///
            /// \brief Get the Services value.
            ///
            ServiceInfoArray get_Services() const throw();

        }; // class GetServicesResponseStruct : public Struct

    } // namespace Cisco_HNAP

    namespace Purenetworks_HNAP1
    {
        ///
        /// \brief AddPortMapping
        ///      <a>http://purenetworks.com/HNAP1/AddPortMapping</a>
        ///
        class AddPortMappingStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            AddPortMappingStruct() throw();

            ///
            /// \brief Get the PortMappingDescription value.
            ///
            const char* get_PortMappingDescription() const throw();

            ///
            /// \brief Set the PortMappingDescription value.
            ///
            void set_PortMappingDescription(const char* value) throw();

            ///
            /// \brief Get the InternalClient value.
            ///
            IPv4Address get_InternalClient() const throw();

            ///
            /// \brief Set the InternalClient value.
            ///
            void set_InternalClient(const IPv4Address& value) throw();

            ///
            /// \brief Get the PortMappingProtocol value.
            ///
            enum IPProtocol get_PortMappingProtocol() const throw();

            ///
            /// \brief Set the PortMappingProtocol value.
            ///
            void set_PortMappingProtocol(enum IPProtocol value) throw();

            ///
            /// \brief Get the ExternalPort value.
            ///
            HDK_XML_Int get_ExternalPort() const throw();

            ///
            /// \brief Set the ExternalPort value.
            ///
            void set_ExternalPort(HDK_XML_Int value) throw();

            ///
            /// \brief Get the InternalPort value.
            ///
            HDK_XML_Int get_InternalPort() const throw();

            ///
            /// \brief Set the InternalPort value.
            ///
            void set_InternalPort(HDK_XML_Int value) throw();

        }; // class AddPortMappingStruct : public Struct

        ///
        /// \brief AddPortMappingResponse
        ///      <a>http://purenetworks.com/HNAP1/AddPortMappingResponse</a>
        ///
        class AddPortMappingResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            AddPortMappingResponseStruct() throw();

            ///
            /// \brief Get the AddPortMappingResult value.
            ///
            enum AddPortMappingResult get_AddPortMappingResult() const throw();

        }; // class AddPortMappingResponseStruct : public Struct

        ///
        /// \brief DeletePortMapping
        ///      <a>http://purenetworks.com/HNAP1/DeletePortMapping</a>
        ///
        class DeletePortMappingStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            DeletePortMappingStruct() throw();

            ///
            /// \brief Get the PortMappingProtocol value.
            ///
            enum IPProtocol get_PortMappingProtocol() const throw();

            ///
            /// \brief Set the PortMappingProtocol value.
            ///
            void set_PortMappingProtocol(enum IPProtocol value) throw();

            ///
            /// \brief Get the ExternalPort value.
            ///
            HDK_XML_Int get_ExternalPort() const throw();

            ///
            /// \brief Set the ExternalPort value.
            ///
            void set_ExternalPort(HDK_XML_Int value) throw();

        }; // class DeletePortMappingStruct : public Struct

        ///
        /// \brief DeletePortMappingResponse
        ///      <a>http://purenetworks.com/HNAP1/DeletePortMappingResponse</a>
        ///
        class DeletePortMappingResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            DeletePortMappingResponseStruct() throw();

            ///
            /// \brief Get the DeletePortMappingResult value.
            ///
            enum DeletePortMappingResult get_DeletePortMappingResult() const throw();

        }; // class DeletePortMappingResponseStruct : public Struct

        ///
        /// \brief DownloadSpeedTest
        ///      <a>http://purenetworks.com/HNAP1/DownloadSpeedTest</a>
        ///
        class DownloadSpeedTestStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            DownloadSpeedTestStruct() throw();

            ///
            /// \brief Get the Bytes value.
            ///
            HDK_XML_Int get_Bytes() const throw();

            ///
            /// \brief Set the Bytes value.
            ///
            void set_Bytes(HDK_XML_Int value) throw();

            ///
            /// \brief Get the BufferSize value.
            ///
            HDK_XML_Int get_BufferSize() const throw();

            ///
            /// \brief Set the BufferSize value.
            ///
            void set_BufferSize(HDK_XML_Int value) throw();

        }; // class DownloadSpeedTestStruct : public Struct

        ///
        /// \brief DownloadSpeedTestResponse
        ///      <a>http://purenetworks.com/HNAP1/DownloadSpeedTestResponse</a>
        ///
        class DownloadSpeedTestResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            DownloadSpeedTestResponseStruct() throw();

            ///
            /// \brief Get the DownloadSpeedTestResult value.
            ///
            enum DownloadSpeedTestResult get_DownloadSpeedTestResult() const throw();

            ///
            /// \brief Get the ByteStream value.
            ///
            const char* get_ByteStream() const throw();

        }; // class DownloadSpeedTestResponseStruct : public Struct

        ///
        /// \brief FirmwareUpload
        ///      <a>http://purenetworks.com/HNAP1/FirmwareUpload</a>
        ///
        class FirmwareUploadStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            FirmwareUploadStruct() throw();

            ///
            /// \brief Get the Base64Image value.
            ///
            Blob get_Base64Image() const throw();

            ///
            /// \brief Set the Base64Image value.
            ///
            void set_Base64Image(const Blob& value) throw();

        }; // class FirmwareUploadStruct : public Struct

        ///
        /// \brief FirmwareUploadResponse
        ///      <a>http://purenetworks.com/HNAP1/FirmwareUploadResponse</a>
        ///
        class FirmwareUploadResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            FirmwareUploadResponseStruct() throw();

            ///
            /// \brief Get the FirmwareUploadResult value.
            ///
            enum FirmwareUploadResult get_FirmwareUploadResult() const throw();

        }; // class FirmwareUploadResponseStruct : public Struct

        ///
        /// \brief GetClientStats
        ///      <a>http://purenetworks.com/HNAP1/GetClientStats</a>
        ///
        class GetClientStatsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetClientStatsStruct() throw();

        }; // class GetClientStatsStruct : public Struct

        ///
        /// \brief GetClientStatsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetClientStatsResponse</a>
        ///
        class GetClientStatsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetClientStatsResponseStruct() throw();

            ///
            /// \brief Get the GetClientStatsResult value.
            ///
            enum GetClientStatsResult get_GetClientStatsResult() const throw();

            ///
            /// \brief Get the ClientStats value.
            ///
            ClientStatArray get_ClientStats() const throw();

        }; // class GetClientStatsResponseStruct : public Struct

        ///
        /// \brief GetConfigBlob
        ///      <a>http://purenetworks.com/HNAP1/GetConfigBlob</a>
        ///
        class GetConfigBlobStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetConfigBlobStruct() throw();

        }; // class GetConfigBlobStruct : public Struct

        ///
        /// \brief GetConfigBlobResponse
        ///      <a>http://purenetworks.com/HNAP1/GetConfigBlobResponse</a>
        ///
        class GetConfigBlobResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetConfigBlobResponseStruct() throw();

            ///
            /// \brief Get the GetConfigBlobResult value.
            ///
            enum GetConfigBlobResult get_GetConfigBlobResult() const throw();

            ///
            /// \brief Get the ConfigBlob value.
            ///
            Blob get_ConfigBlob() const throw();

        }; // class GetConfigBlobResponseStruct : public Struct

        ///
        /// \brief GetConnectedDevices
        ///      <a>http://purenetworks.com/HNAP1/GetConnectedDevices</a>
        ///
        class GetConnectedDevicesStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetConnectedDevicesStruct() throw();

        }; // class GetConnectedDevicesStruct : public Struct

        ///
        /// \brief GetConnectedDevicesResponse
        ///      <a>http://purenetworks.com/HNAP1/GetConnectedDevicesResponse</a>
        ///
        class GetConnectedDevicesResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetConnectedDevicesResponseStruct() throw();

            ///
            /// \brief Get the GetConnectedDevicesResult value.
            ///
            enum GetConnectedDevicesResult get_GetConnectedDevicesResult() const throw();

            ///
            /// \brief Get the ConnectedClients value.
            ///
            ConnectedClientArray get_ConnectedClients() const throw();

        }; // class GetConnectedDevicesResponseStruct : public Struct

        ///
        /// \brief GetDeviceSettings
        ///      <a>http://purenetworks.com/HNAP1/GetDeviceSettings</a>
        ///
        class GetDeviceSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetDeviceSettingsStruct() throw();

        }; // class GetDeviceSettingsStruct : public Struct

        ///
        /// \brief GetDeviceSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetDeviceSettingsResponse</a>
        ///
        class GetDeviceSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetDeviceSettingsResponseStruct() throw();

            ///
            /// \brief Get the GetDeviceSettingsResult value.
            ///
            enum GetDeviceSettingsResult get_GetDeviceSettingsResult() const throw();

            ///
            /// \brief Get the Type value.
            ///
            enum DeviceType get_Type() const throw();

            ///
            /// \brief Get the DeviceName value.
            ///
            const char* get_DeviceName() const throw();

            ///
            /// \brief Get the VendorName value.
            ///
            const char* get_VendorName() const throw();

            ///
            /// \brief Get the ModelDescription value.
            ///
            const char* get_ModelDescription() const throw();

            ///
            /// \brief Get the ModelName value.
            ///
            const char* get_ModelName() const throw();

            ///
            /// \brief Get the FirmwareVersion value.
            ///
            const char* get_FirmwareVersion() const throw();

            ///
            /// \brief Get the PresentationURL value.
            ///
            const char* get_PresentationURL() const throw();

            ///
            /// \brief Get the SOAPActions value.
            ///
            StringArray get_SOAPActions() const throw();

            ///
            /// \brief Get the SubDeviceURLs value.
            ///
            StringArray get_SubDeviceURLs() const throw();

            ///
            /// \brief Get the Tasks value.
            ///
            TaskExtensionArray get_Tasks() const throw();

        }; // class GetDeviceSettingsResponseStruct : public Struct

        ///
        /// \brief GetDeviceSettings2
        ///      <a>http://purenetworks.com/HNAP1/GetDeviceSettings2</a>
        ///
        class GetDeviceSettings2Struct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetDeviceSettings2Struct() throw();

        }; // class GetDeviceSettings2Struct : public Struct

        ///
        /// \brief GetDeviceSettings2Response
        ///      <a>http://purenetworks.com/HNAP1/GetDeviceSettings2Response</a>
        ///
        class GetDeviceSettings2ResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetDeviceSettings2ResponseStruct() throw();

            ///
            /// \brief Get the GetDeviceSettings2Result value.
            ///
            enum GetDeviceSettings2Result get_GetDeviceSettings2Result() const throw();

            ///
            /// \brief Get the SerialNumber value.
            ///
            const char* get_SerialNumber() const throw();

            ///
            /// \brief Get the TimeZone value.
            ///
            const char* get_TimeZone() const throw();

            ///
            /// \brief Get the AutoAdjustDST value.
            ///
            bool get_AutoAdjustDST() const throw();

            ///
            /// \brief Get the Locale value.
            ///
            const char* get_Locale() const throw();

            ///
            /// \brief Get the SupportedLocales value.
            ///
            StringArray get_SupportedLocales() const throw();

            ///
            /// \brief Get the SSL value.
            ///
            bool get_SSL() const throw();

        }; // class GetDeviceSettings2ResponseStruct : public Struct

        ///
        /// \brief GetFirmwareSettings
        ///      <a>http://purenetworks.com/HNAP1/GetFirmwareSettings</a>
        ///
        class GetFirmwareSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetFirmwareSettingsStruct() throw();

        }; // class GetFirmwareSettingsStruct : public Struct

        ///
        /// \brief GetFirmwareSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetFirmwareSettingsResponse</a>
        ///
        class GetFirmwareSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetFirmwareSettingsResponseStruct() throw();

            ///
            /// \brief Get the GetFirmwareSettingsResult value.
            ///
            enum GetFirmwareSettingsResult get_GetFirmwareSettingsResult() const throw();

            ///
            /// \brief Get the VendorName value.
            ///
            const char* get_VendorName() const throw();

            ///
            /// \brief Get the ModelName value.
            ///
            const char* get_ModelName() const throw();

            ///
            /// \brief Get the ModelRevision value.
            ///
            const char* get_ModelRevision() const throw();

            ///
            /// \brief Get the FirmwareVersion value.
            ///
            const char* get_FirmwareVersion() const throw();

            ///
            /// \brief Get the FirmwareDate value.
            ///
            time_t get_FirmwareDate() const throw();

            ///
            /// \brief Get the UpdateMethods value.
            ///
            UpdateMethodArray get_UpdateMethods() const throw();

        }; // class GetFirmwareSettingsResponseStruct : public Struct

        ///
        /// \brief GetMACFilters2
        ///      <a>http://purenetworks.com/HNAP1/GetMACFilters2</a>
        ///
        class GetMACFilters2Struct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetMACFilters2Struct() throw();

        }; // class GetMACFilters2Struct : public Struct

        ///
        /// \brief GetMACFilters2Response
        ///      <a>http://purenetworks.com/HNAP1/GetMACFilters2Response</a>
        ///
        class GetMACFilters2ResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetMACFilters2ResponseStruct() throw();

            ///
            /// \brief Get the GetMACFilters2Result value.
            ///
            enum GetMACFilters2Result get_GetMACFilters2Result() const throw();

            ///
            /// \brief Get the Enabled value.
            ///
            bool get_Enabled() const throw();

            ///
            /// \brief Get the IsAllowList value.
            ///
            bool get_IsAllowList() const throw();

            ///
            /// \brief Get the MACList value.
            ///
            MACInfoArray get_MACList() const throw();

        }; // class GetMACFilters2ResponseStruct : public Struct

        ///
        /// \brief GetNetworkStats
        ///      <a>http://purenetworks.com/HNAP1/GetNetworkStats</a>
        ///
        class GetNetworkStatsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetNetworkStatsStruct() throw();

        }; // class GetNetworkStatsStruct : public Struct

        ///
        /// \brief GetNetworkStatsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetNetworkStatsResponse</a>
        ///
        class GetNetworkStatsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetNetworkStatsResponseStruct() throw();

            ///
            /// \brief Get the GetNetworkStatsResult value.
            ///
            enum GetNetworkStatsResult get_GetNetworkStatsResult() const throw();

            ///
            /// \brief Get the Stats value.
            ///
            NetworkStatsArray get_Stats() const throw();

        }; // class GetNetworkStatsResponseStruct : public Struct

        ///
        /// \brief GetPortMappings
        ///      <a>http://purenetworks.com/HNAP1/GetPortMappings</a>
        ///
        class GetPortMappingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetPortMappingsStruct() throw();

        }; // class GetPortMappingsStruct : public Struct

        ///
        /// \brief GetPortMappingsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetPortMappingsResponse</a>
        ///
        class GetPortMappingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetPortMappingsResponseStruct() throw();

            ///
            /// \brief Get the GetPortMappingsResult value.
            ///
            enum GetPortMappingsResult get_GetPortMappingsResult() const throw();

            ///
            /// \brief Get the PortMappings value.
            ///
            PortMappingArray get_PortMappings() const throw();

        }; // class GetPortMappingsResponseStruct : public Struct

        ///
        /// \brief GetRouterLanSettings2
        ///      <a>http://purenetworks.com/HNAP1/GetRouterLanSettings2</a>
        ///
        class GetRouterLanSettings2Struct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetRouterLanSettings2Struct() throw();

        }; // class GetRouterLanSettings2Struct : public Struct

        ///
        /// \brief GetRouterLanSettings2Response
        ///      <a>http://purenetworks.com/HNAP1/GetRouterLanSettings2Response</a>
        ///
        class GetRouterLanSettings2ResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetRouterLanSettings2ResponseStruct() throw();

            ///
            /// \brief Get the GetRouterLanSettings2Result value.
            ///
            enum GetRouterLanSettings2Result get_GetRouterLanSettings2Result() const throw();

            ///
            /// \brief Get the RouterIPAddress value.
            ///
            IPv4Address get_RouterIPAddress() const throw();

            ///
            /// \brief Get the RouterSubnetMask value.
            ///
            IPv4Address get_RouterSubnetMask() const throw();

            ///
            /// \brief Get the DHCPServerEnabled value.
            ///
            bool get_DHCPServerEnabled() const throw();

            ///
            /// \brief Get the IPAddressFirst value.
            ///
            IPv4Address get_IPAddressFirst() const throw();

            ///
            /// \brief Get the IPAddressLast value.
            ///
            IPv4Address get_IPAddressLast() const throw();

            ///
            /// \brief Get the LeaseTime value.
            ///
            HDK_XML_Int get_LeaseTime() const throw();

            ///
            /// \brief Get the DHCPReservations value.
            ///
            DHCPReservationArray get_DHCPReservations() const throw();

        }; // class GetRouterLanSettings2ResponseStruct : public Struct

        ///
        /// \brief GetRouterSettings
        ///      <a>http://purenetworks.com/HNAP1/GetRouterSettings</a>
        ///
        class GetRouterSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetRouterSettingsStruct() throw();

        }; // class GetRouterSettingsStruct : public Struct

        ///
        /// \brief GetRouterSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetRouterSettingsResponse</a>
        ///
        class GetRouterSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetRouterSettingsResponseStruct() throw();

            ///
            /// \brief Get the GetRouterSettingsResult value.
            ///
            enum GetRouterSettingsResult get_GetRouterSettingsResult() const throw();

            ///
            /// \brief Get the ManageRemote value.
            ///
            bool get_ManageRemote() const throw();

            ///
            /// \brief Get the ManageWireless value.
            ///
            bool get_ManageWireless() const throw();

            ///
            /// \brief Get the RemotePort value.
            ///
            HDK_XML_Int get_RemotePort() const throw();

            ///
            /// \brief Get the RemoteSSL value.
            ///
            bool get_RemoteSSL() const throw();

            ///
            /// \brief Get the DomainName value.
            ///
            const char* get_DomainName() const throw();

            ///
            /// \brief Get the WiredQoS value.
            ///
            bool get_WiredQoS() const throw();

            ///
            /// \brief Get the WPSPin value.
            ///
            const char* get_WPSPin() const throw();

        }; // class GetRouterSettingsResponseStruct : public Struct

        ///
        /// \brief GetWLanRadioFrequencies
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioFrequencies</a>
        ///
        class GetWLanRadioFrequenciesStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadioFrequenciesStruct() throw();

        }; // class GetWLanRadioFrequenciesStruct : public Struct

        ///
        /// \brief GetWLanRadioFrequenciesResponse
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioFrequenciesResponse</a>
        ///
        class GetWLanRadioFrequenciesResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadioFrequenciesResponseStruct() throw();

            ///
            /// \brief Get the GetWLanRadioFrequenciesResult value.
            ///
            enum GetWLanRadioFrequenciesResult get_GetWLanRadioFrequenciesResult() const throw();

            ///
            /// \brief Get the RadioFrequencyInfos value.
            ///
            RadioFrequencyInfoArray get_RadioFrequencyInfos() const throw();

        }; // class GetWLanRadioFrequenciesResponseStruct : public Struct

        ///
        /// \brief GetWLanRadioSecurity
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioSecurity</a>
        ///
        class GetWLanRadioSecurityStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadioSecurityStruct() throw();

            ///
            /// \brief Get the RadioID value.
            ///
            const char* get_RadioID() const throw();

            ///
            /// \brief Set the RadioID value.
            ///
            void set_RadioID(const char* value) throw();

        }; // class GetWLanRadioSecurityStruct : public Struct

        ///
        /// \brief GetWLanRadioSecurityResponse
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioSecurityResponse</a>
        ///
        class GetWLanRadioSecurityResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadioSecurityResponseStruct() throw();

            ///
            /// \brief Get the GetWLanRadioSecurityResult value.
            ///
            enum GetWLanRadioSecurityResult get_GetWLanRadioSecurityResult() const throw();

            ///
            /// \brief Get the Enabled value.
            ///
            bool get_Enabled() const throw();

            ///
            /// \brief Get the Type value.
            ///
            enum WiFiSecurity get_Type() const throw();

            ///
            /// \brief Get the Encryption value.
            ///
            enum WiFiEncryption get_Encryption() const throw();

            ///
            /// \brief Get the Key value.
            ///
            const char* get_Key() const throw();

            ///
            /// \brief Get the KeyRenewal value.
            ///
            HDK_XML_Int get_KeyRenewal() const throw();

            ///
            /// \brief Get the RadiusIP1 value.
            ///
            IPv4Address get_RadiusIP1() const throw();

            ///
            /// \brief Get the RadiusPort1 value.
            ///
            HDK_XML_Int get_RadiusPort1() const throw();

            ///
            /// \brief Get the RadiusSecret1 value.
            ///
            const char* get_RadiusSecret1() const throw();

            ///
            /// \brief Get the RadiusIP2 value.
            ///
            IPv4Address get_RadiusIP2() const throw();

            ///
            /// \brief Get the RadiusPort2 value.
            ///
            HDK_XML_Int get_RadiusPort2() const throw();

            ///
            /// \brief Get the RadiusSecret2 value.
            ///
            const char* get_RadiusSecret2() const throw();

        }; // class GetWLanRadioSecurityResponseStruct : public Struct

        ///
        /// \brief GetWLanRadioSettings
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioSettings</a>
        ///
        class GetWLanRadioSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadioSettingsStruct() throw();

            ///
            /// \brief Get the RadioID value.
            ///
            const char* get_RadioID() const throw();

            ///
            /// \brief Set the RadioID value.
            ///
            void set_RadioID(const char* value) throw();

        }; // class GetWLanRadioSettingsStruct : public Struct

        ///
        /// \brief GetWLanRadioSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadioSettingsResponse</a>
        ///
        class GetWLanRadioSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadioSettingsResponseStruct() throw();

            ///
            /// \brief Get the GetWLanRadioSettingsResult value.
            ///
            enum GetWLanRadioSettingsResult get_GetWLanRadioSettingsResult() const throw();

            ///
            /// \brief Get the Enabled value.
            ///
            bool get_Enabled() const throw();

            ///
            /// \brief Get the Mode value.
            ///
            enum WiFiMode get_Mode() const throw();

            ///
            /// \brief Get the MacAddress value.
            ///
            MACAddress get_MacAddress() const throw();

            ///
            /// \brief Get the SSID value.
            ///
            const char* get_SSID() const throw();

            ///
            /// \brief Get the SSIDBroadcast value.
            ///
            bool get_SSIDBroadcast() const throw();

            ///
            /// \brief Get the ChannelWidth value.
            ///
            HDK_XML_Int get_ChannelWidth() const throw();

            ///
            /// \brief Get the Channel value.
            ///
            HDK_XML_Int get_Channel() const throw();

            ///
            /// \brief Get the SecondaryChannel value.
            ///
            HDK_XML_Int get_SecondaryChannel() const throw();

            ///
            /// \brief Get the QoS value.
            ///
            bool get_QoS() const throw();

        }; // class GetWLanRadioSettingsResponseStruct : public Struct

        ///
        /// \brief GetWLanRadios
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadios</a>
        ///
        class GetWLanRadiosStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadiosStruct() throw();

        }; // class GetWLanRadiosStruct : public Struct

        ///
        /// \brief GetWLanRadiosResponse
        ///      <a>http://purenetworks.com/HNAP1/GetWLanRadiosResponse</a>
        ///
        class GetWLanRadiosResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWLanRadiosResponseStruct() throw();

            ///
            /// \brief Get the GetWLanRadiosResult value.
            ///
            enum GetWLanRadiosResult get_GetWLanRadiosResult() const throw();

            ///
            /// \brief Get the RadioInfos value.
            ///
            RadioInfoArray get_RadioInfos() const throw();

        }; // class GetWLanRadiosResponseStruct : public Struct

        ///
        /// \brief GetWanInfo
        ///      <a>http://purenetworks.com/HNAP1/GetWanInfo</a>
        ///
        class GetWanInfoStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWanInfoStruct() throw();

        }; // class GetWanInfoStruct : public Struct

        ///
        /// \brief GetWanInfoResponse
        ///      <a>http://purenetworks.com/HNAP1/GetWanInfoResponse</a>
        ///
        class GetWanInfoResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWanInfoResponseStruct() throw();

            ///
            /// \brief Get the GetWanInfoResult value.
            ///
            enum GetWanInfoResult get_GetWanInfoResult() const throw();

            ///
            /// \brief Get the SupportedTypes value.
            ///
            WANTypeArray get_SupportedTypes() const throw();

            ///
            /// \brief Get the AutoDetectType value.
            ///
            enum WANType get_AutoDetectType() const throw();

            ///
            /// \brief Get the Status value.
            ///
            enum WANStatus get_Status() const throw();

        }; // class GetWanInfoResponseStruct : public Struct

        ///
        /// \brief GetWanSettings
        ///      <a>http://purenetworks.com/HNAP1/GetWanSettings</a>
        ///
        class GetWanSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWanSettingsStruct() throw();

        }; // class GetWanSettingsStruct : public Struct

        ///
        /// \brief GetWanSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/GetWanSettingsResponse</a>
        ///
        class GetWanSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            GetWanSettingsResponseStruct() throw();

            ///
            /// \brief Get the GetWanSettingsResult value.
            ///
            enum GetWanSettingsResult get_GetWanSettingsResult() const throw();

            ///
            /// \brief Get the Type value.
            ///
            enum WANType get_Type() const throw();

            ///
            /// \brief Get the Username value.
            ///
            const char* get_Username() const throw();

            ///
            /// \brief Get the Password value.
            ///
            const char* get_Password() const throw();

            ///
            /// \brief Get the MaxIdleTime value.
            ///
            HDK_XML_Int get_MaxIdleTime() const throw();

            ///
            /// \brief Get the MTU value.
            ///
            HDK_XML_Int get_MTU() const throw();

            ///
            /// \brief Get the ServiceName value.
            ///
            const char* get_ServiceName() const throw();

            ///
            /// \brief Get the AutoReconnect value.
            ///
            bool get_AutoReconnect() const throw();

            ///
            /// \brief Get the IPAddress value.
            ///
            IPv4Address get_IPAddress() const throw();

            ///
            /// \brief Get the SubnetMask value.
            ///
            IPv4Address get_SubnetMask() const throw();

            ///
            /// \brief Get the Gateway value.
            ///
            IPv4Address get_Gateway() const throw();

            ///
            /// \brief Get the DNS value.
            ///
            DNSSettingsStruct get_DNS() const throw();

            ///
            /// \brief Get the MacAddress value.
            ///
            MACAddress get_MacAddress() const throw();

        }; // class GetWanSettingsResponseStruct : public Struct

        ///
        /// \brief IsDeviceReady
        ///      <a>http://purenetworks.com/HNAP1/IsDeviceReady</a>
        ///
        class IsDeviceReadyStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            IsDeviceReadyStruct() throw();

        }; // class IsDeviceReadyStruct : public Struct

        ///
        /// \brief IsDeviceReadyResponse
        ///      <a>http://purenetworks.com/HNAP1/IsDeviceReadyResponse</a>
        ///
        class IsDeviceReadyResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            IsDeviceReadyResponseStruct() throw();

            ///
            /// \brief Get the IsDeviceReadyResult value.
            ///
            enum IsDeviceReadyResult get_IsDeviceReadyResult() const throw();

        }; // class IsDeviceReadyResponseStruct : public Struct

        ///
        /// \brief Reboot
        ///      <a>http://purenetworks.com/HNAP1/Reboot</a>
        ///
        class RebootStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RebootStruct() throw();

        }; // class RebootStruct : public Struct

        ///
        /// \brief RebootResponse
        ///      <a>http://purenetworks.com/HNAP1/RebootResponse</a>
        ///
        class RebootResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RebootResponseStruct() throw();

            ///
            /// \brief Get the RebootResult value.
            ///
            enum RebootResult get_RebootResult() const throw();

        }; // class RebootResponseStruct : public Struct

        ///
        /// \brief RenewWanConnection
        ///      <a>http://purenetworks.com/HNAP1/RenewWanConnection</a>
        ///
        class RenewWanConnectionStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RenewWanConnectionStruct() throw();

            ///
            /// \brief Get the RenewTimeout value.
            ///
            HDK_XML_Int get_RenewTimeout() const throw();

            ///
            /// \brief Set the RenewTimeout value.
            ///
            void set_RenewTimeout(HDK_XML_Int value) throw();

        }; // class RenewWanConnectionStruct : public Struct

        ///
        /// \brief RenewWanConnectionResponse
        ///      <a>http://purenetworks.com/HNAP1/RenewWanConnectionResponse</a>
        ///
        class RenewWanConnectionResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RenewWanConnectionResponseStruct() throw();

            ///
            /// \brief Get the RenewWanConnectionResult value.
            ///
            enum RenewWanConnectionResult get_RenewWanConnectionResult() const throw();

        }; // class RenewWanConnectionResponseStruct : public Struct

        ///
        /// \brief RestoreFactoryDefaults
        ///      <a>http://purenetworks.com/HNAP1/RestoreFactoryDefaults</a>
        ///
        class RestoreFactoryDefaultsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RestoreFactoryDefaultsStruct() throw();

        }; // class RestoreFactoryDefaultsStruct : public Struct

        ///
        /// \brief RestoreFactoryDefaultsResponse
        ///      <a>http://purenetworks.com/HNAP1/RestoreFactoryDefaultsResponse</a>
        ///
        class RestoreFactoryDefaultsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            RestoreFactoryDefaultsResponseStruct() throw();

            ///
            /// \brief Get the RestoreFactoryDefaultsResult value.
            ///
            enum RestoreFactoryDefaultsResult get_RestoreFactoryDefaultsResult() const throw();

        }; // class RestoreFactoryDefaultsResponseStruct : public Struct

        ///
        /// \brief SetAccessPointMode
        ///      <a>http://purenetworks.com/HNAP1/SetAccessPointMode</a>
        ///
        class SetAccessPointModeStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetAccessPointModeStruct() throw();

            ///
            /// \brief Get the IsAccessPoint value.
            ///
            bool get_IsAccessPoint() const throw();

            ///
            /// \brief Set the IsAccessPoint value.
            ///
            void set_IsAccessPoint(bool value) throw();

        }; // class SetAccessPointModeStruct : public Struct

        ///
        /// \brief SetAccessPointModeResponse
        ///      <a>http://purenetworks.com/HNAP1/SetAccessPointModeResponse</a>
        ///
        class SetAccessPointModeResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetAccessPointModeResponseStruct() throw();

            ///
            /// \brief Get the SetAccessPointModeResult value.
            ///
            enum SetAccessPointModeResult get_SetAccessPointModeResult() const throw();

            ///
            /// \brief Get the NewIPAddress value.
            ///
            IPv4Address get_NewIPAddress() const throw();

        }; // class SetAccessPointModeResponseStruct : public Struct

        ///
        /// \brief SetConfigBlob
        ///      <a>http://purenetworks.com/HNAP1/SetConfigBlob</a>
        ///
        class SetConfigBlobStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetConfigBlobStruct() throw();

            ///
            /// \brief Get the ConfigBlob value.
            ///
            Blob get_ConfigBlob() const throw();

            ///
            /// \brief Set the ConfigBlob value.
            ///
            void set_ConfigBlob(const Blob& value) throw();

        }; // class SetConfigBlobStruct : public Struct

        ///
        /// \brief SetConfigBlobResponse
        ///      <a>http://purenetworks.com/HNAP1/SetConfigBlobResponse</a>
        ///
        class SetConfigBlobResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetConfigBlobResponseStruct() throw();

            ///
            /// \brief Get the SetConfigBlobResult value.
            ///
            enum SetConfigBlobResult get_SetConfigBlobResult() const throw();

        }; // class SetConfigBlobResponseStruct : public Struct

        ///
        /// \brief SetDeviceSettings
        ///      <a>http://purenetworks.com/HNAP1/SetDeviceSettings</a>
        ///
        class SetDeviceSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetDeviceSettingsStruct() throw();

            ///
            /// \brief Get the DeviceName value.
            ///
            const char* get_DeviceName() const throw();

            ///
            /// \brief Set the DeviceName value.
            ///
            void set_DeviceName(const char* value) throw();

            ///
            /// \brief Get the AdminPassword value.
            ///
            const char* get_AdminPassword() const throw();

            ///
            /// \brief Set the AdminPassword value.
            ///
            void set_AdminPassword(const char* value) throw();

        }; // class SetDeviceSettingsStruct : public Struct

        ///
        /// \brief SetDeviceSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/SetDeviceSettingsResponse</a>
        ///
        class SetDeviceSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetDeviceSettingsResponseStruct() throw();

            ///
            /// \brief Get the SetDeviceSettingsResult value.
            ///
            enum SetDeviceSettingsResult get_SetDeviceSettingsResult() const throw();

        }; // class SetDeviceSettingsResponseStruct : public Struct

        ///
        /// \brief SetDeviceSettings2
        ///      <a>http://purenetworks.com/HNAP1/SetDeviceSettings2</a>
        ///
        class SetDeviceSettings2Struct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetDeviceSettings2Struct() throw();

            ///
            /// \brief Get the Username value.
            ///
            const char* get_Username() const throw();

            ///
            /// \brief Set the Username value.
            ///
            void set_Username(const char* value) throw();

            ///
            /// \brief Get the TimeZone value.
            ///
            const char* get_TimeZone() const throw();

            ///
            /// \brief Set the TimeZone value.
            ///
            void set_TimeZone(const char* value) throw();

            ///
            /// \brief Get the AutoAdjustDST value.
            ///
            bool get_AutoAdjustDST() const throw();

            ///
            /// \brief Set the AutoAdjustDST value.
            ///
            void set_AutoAdjustDST(bool value) throw();

            ///
            /// \brief Get the Locale value.
            ///
            const char* get_Locale() const throw();

            ///
            /// \brief Set the Locale value.
            ///
            void set_Locale(const char* value) throw();

            ///
            /// \brief Get the SSL value.
            ///
            bool get_SSL() const throw();

            ///
            /// \brief Set the SSL value.
            ///
            void set_SSL(bool value) throw();

        }; // class SetDeviceSettings2Struct : public Struct

        ///
        /// \brief SetDeviceSettings2Response
        ///      <a>http://purenetworks.com/HNAP1/SetDeviceSettings2Response</a>
        ///
        class SetDeviceSettings2ResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetDeviceSettings2ResponseStruct() throw();

            ///
            /// \brief Get the SetDeviceSettings2Result value.
            ///
            enum SetDeviceSettings2Result get_SetDeviceSettings2Result() const throw();

        }; // class SetDeviceSettings2ResponseStruct : public Struct

        ///
        /// \brief SetMACFilters2
        ///      <a>http://purenetworks.com/HNAP1/SetMACFilters2</a>
        ///
        class SetMACFilters2Struct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetMACFilters2Struct() throw();

            ///
            /// \brief Get the Enabled value.
            ///
            bool get_Enabled() const throw();

            ///
            /// \brief Set the Enabled value.
            ///
            void set_Enabled(bool value) throw();

            ///
            /// \brief Get the IsAllowList value.
            ///
            bool get_IsAllowList() const throw();

            ///
            /// \brief Set the IsAllowList value.
            ///
            void set_IsAllowList(bool value) throw();

            ///
            /// \brief Get the MACList value.
            ///
            MACInfoArray get_MACList() const throw();

            ///
            /// \brief Set the MACList value.
            ///
            void set_MACList(const MACInfoArray& value) throw();

        }; // class SetMACFilters2Struct : public Struct

        ///
        /// \brief SetMACFilters2Response
        ///      <a>http://purenetworks.com/HNAP1/SetMACFilters2Response</a>
        ///
        class SetMACFilters2ResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetMACFilters2ResponseStruct() throw();

            ///
            /// \brief Get the SetMACFilters2Result value.
            ///
            enum SetMACFilters2Result get_SetMACFilters2Result() const throw();

        }; // class SetMACFilters2ResponseStruct : public Struct

        ///
        /// \brief SetRouterLanSettings2
        ///      <a>http://purenetworks.com/HNAP1/SetRouterLanSettings2</a>
        ///
        class SetRouterLanSettings2Struct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetRouterLanSettings2Struct() throw();

            ///
            /// \brief Get the RouterIPAddress value.
            ///
            IPv4Address get_RouterIPAddress() const throw();

            ///
            /// \brief Set the RouterIPAddress value.
            ///
            void set_RouterIPAddress(const IPv4Address& value) throw();

            ///
            /// \brief Get the RouterSubnetMask value.
            ///
            IPv4Address get_RouterSubnetMask() const throw();

            ///
            /// \brief Set the RouterSubnetMask value.
            ///
            void set_RouterSubnetMask(const IPv4Address& value) throw();

            ///
            /// \brief Get the DHCPServerEnabled value.
            ///
            bool get_DHCPServerEnabled() const throw();

            ///
            /// \brief Set the DHCPServerEnabled value.
            ///
            void set_DHCPServerEnabled(bool value) throw();

            ///
            /// \brief Get the IPAddressFirst value.
            ///
            IPv4Address get_IPAddressFirst() const throw();

            ///
            /// \brief Set the IPAddressFirst value.
            ///
            void set_IPAddressFirst(const IPv4Address& value) throw();

            ///
            /// \brief Get the IPAddressLast value.
            ///
            IPv4Address get_IPAddressLast() const throw();

            ///
            /// \brief Set the IPAddressLast value.
            ///
            void set_IPAddressLast(const IPv4Address& value) throw();

            ///
            /// \brief Get the LeaseTime value.
            ///
            HDK_XML_Int get_LeaseTime() const throw();

            ///
            /// \brief Set the LeaseTime value.
            ///
            void set_LeaseTime(HDK_XML_Int value) throw();

            ///
            /// \brief Get the DHCPReservations value.
            ///
            DHCPReservationArray get_DHCPReservations() const throw();

            ///
            /// \brief Set the DHCPReservations value.
            ///
            void set_DHCPReservations(const DHCPReservationArray& value) throw();

        }; // class SetRouterLanSettings2Struct : public Struct

        ///
        /// \brief SetRouterLanSettings2Response
        ///      <a>http://purenetworks.com/HNAP1/SetRouterLanSettings2Response</a>
        ///
        class SetRouterLanSettings2ResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetRouterLanSettings2ResponseStruct() throw();

            ///
            /// \brief Get the SetRouterLanSettings2Result value.
            ///
            enum SetRouterLanSettings2Result get_SetRouterLanSettings2Result() const throw();

        }; // class SetRouterLanSettings2ResponseStruct : public Struct

        ///
        /// \brief SetRouterSettings
        ///      <a>http://purenetworks.com/HNAP1/SetRouterSettings</a>
        ///
        class SetRouterSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetRouterSettingsStruct() throw();

            ///
            /// \brief Get the ManageRemote value.
            ///
            bool get_ManageRemote() const throw();

            ///
            /// \brief Set the ManageRemote value.
            ///
            void set_ManageRemote(bool value) throw();

            ///
            /// \brief Get the ManageWireless value.
            ///
            bool get_ManageWireless() const throw();

            ///
            /// \brief Set the ManageWireless value.
            ///
            void set_ManageWireless(bool value) throw();

            ///
            /// \brief Get the RemotePort value.
            ///
            HDK_XML_Int get_RemotePort() const throw();

            ///
            /// \brief Set the RemotePort value.
            ///
            void set_RemotePort(HDK_XML_Int value) throw();

            ///
            /// \brief Get the RemoteSSL value.
            ///
            bool get_RemoteSSL() const throw();

            ///
            /// \brief Set the RemoteSSL value.
            ///
            void set_RemoteSSL(bool value) throw();

            ///
            /// \brief Get the DomainName value.
            ///
            const char* get_DomainName() const throw();

            ///
            /// \brief Set the DomainName value.
            ///
            void set_DomainName(const char* value) throw();

            ///
            /// \brief Get the WiredQoS value.
            ///
            bool get_WiredQoS() const throw();

            ///
            /// \brief Set the WiredQoS value.
            ///
            void set_WiredQoS(bool value) throw();

        }; // class SetRouterSettingsStruct : public Struct

        ///
        /// \brief SetRouterSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/SetRouterSettingsResponse</a>
        ///
        class SetRouterSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetRouterSettingsResponseStruct() throw();

            ///
            /// \brief Get the SetRouterSettingsResult value.
            ///
            enum SetRouterSettingsResult get_SetRouterSettingsResult() const throw();

        }; // class SetRouterSettingsResponseStruct : public Struct

        ///
        /// \brief SetWLanRadioFrequency
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioFrequency</a>
        ///
        class SetWLanRadioFrequencyStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWLanRadioFrequencyStruct() throw();

            ///
            /// \brief Get the RadioID value.
            ///
            const char* get_RadioID() const throw();

            ///
            /// \brief Set the RadioID value.
            ///
            void set_RadioID(const char* value) throw();

            ///
            /// \brief Get the Frequency value.
            ///
            HDK_XML_Int get_Frequency() const throw();

            ///
            /// \brief Set the Frequency value.
            ///
            void set_Frequency(HDK_XML_Int value) throw();

        }; // class SetWLanRadioFrequencyStruct : public Struct

        ///
        /// \brief SetWLanRadioFrequencyResponse
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioFrequencyResponse</a>
        ///
        class SetWLanRadioFrequencyResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWLanRadioFrequencyResponseStruct() throw();

            ///
            /// \brief Get the SetWLanRadioFrequencyResult value.
            ///
            enum SetWLanRadioFrequencyResult get_SetWLanRadioFrequencyResult() const throw();

        }; // class SetWLanRadioFrequencyResponseStruct : public Struct

        ///
        /// \brief SetWLanRadioSecurity
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioSecurity</a>
        ///
        class SetWLanRadioSecurityStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWLanRadioSecurityStruct() throw();

            ///
            /// \brief Get the RadioID value.
            ///
            const char* get_RadioID() const throw();

            ///
            /// \brief Set the RadioID value.
            ///
            void set_RadioID(const char* value) throw();

            ///
            /// \brief Get the Enabled value.
            ///
            bool get_Enabled() const throw();

            ///
            /// \brief Set the Enabled value.
            ///
            void set_Enabled(bool value) throw();

            ///
            /// \brief Get the Type value.
            ///
            enum WiFiSecurity get_Type() const throw();

            ///
            /// \brief Set the Type value.
            ///
            void set_Type(enum WiFiSecurity value) throw();

            ///
            /// \brief Get the Encryption value.
            ///
            enum WiFiEncryption get_Encryption() const throw();

            ///
            /// \brief Set the Encryption value.
            ///
            void set_Encryption(enum WiFiEncryption value) throw();

            ///
            /// \brief Get the Key value.
            ///
            const char* get_Key() const throw();

            ///
            /// \brief Set the Key value.
            ///
            void set_Key(const char* value) throw();

            ///
            /// \brief Get the KeyRenewal value.
            ///
            HDK_XML_Int get_KeyRenewal() const throw();

            ///
            /// \brief Set the KeyRenewal value.
            ///
            void set_KeyRenewal(HDK_XML_Int value) throw();

            ///
            /// \brief Get the RadiusIP1 value.
            ///
            IPv4Address get_RadiusIP1() const throw();

            ///
            /// \brief Set the RadiusIP1 value.
            ///
            void set_RadiusIP1(const IPv4Address& value) throw();

            ///
            /// \brief Get the RadiusPort1 value.
            ///
            HDK_XML_Int get_RadiusPort1() const throw();

            ///
            /// \brief Set the RadiusPort1 value.
            ///
            void set_RadiusPort1(HDK_XML_Int value) throw();

            ///
            /// \brief Get the RadiusSecret1 value.
            ///
            const char* get_RadiusSecret1() const throw();

            ///
            /// \brief Set the RadiusSecret1 value.
            ///
            void set_RadiusSecret1(const char* value) throw();

            ///
            /// \brief Get the RadiusIP2 value.
            ///
            IPv4Address get_RadiusIP2() const throw();

            ///
            /// \brief Set the RadiusIP2 value.
            ///
            void set_RadiusIP2(const IPv4Address& value) throw();

            ///
            /// \brief Get the RadiusPort2 value.
            ///
            HDK_XML_Int get_RadiusPort2() const throw();

            ///
            /// \brief Set the RadiusPort2 value.
            ///
            void set_RadiusPort2(HDK_XML_Int value) throw();

            ///
            /// \brief Get the RadiusSecret2 value.
            ///
            const char* get_RadiusSecret2() const throw();

            ///
            /// \brief Set the RadiusSecret2 value.
            ///
            void set_RadiusSecret2(const char* value) throw();

        }; // class SetWLanRadioSecurityStruct : public Struct

        ///
        /// \brief SetWLanRadioSecurityResponse
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioSecurityResponse</a>
        ///
        class SetWLanRadioSecurityResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWLanRadioSecurityResponseStruct() throw();

            ///
            /// \brief Get the SetWLanRadioSecurityResult value.
            ///
            enum SetWLanRadioSecurityResult get_SetWLanRadioSecurityResult() const throw();

        }; // class SetWLanRadioSecurityResponseStruct : public Struct

        ///
        /// \brief SetWLanRadioSettings
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioSettings</a>
        ///
        class SetWLanRadioSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWLanRadioSettingsStruct() throw();

            ///
            /// \brief Get the RadioID value.
            ///
            const char* get_RadioID() const throw();

            ///
            /// \brief Set the RadioID value.
            ///
            void set_RadioID(const char* value) throw();

            ///
            /// \brief Get the Enabled value.
            ///
            bool get_Enabled() const throw();

            ///
            /// \brief Set the Enabled value.
            ///
            void set_Enabled(bool value) throw();

            ///
            /// \brief Get the Mode value.
            ///
            enum WiFiMode get_Mode() const throw();

            ///
            /// \brief Set the Mode value.
            ///
            void set_Mode(enum WiFiMode value) throw();

            ///
            /// \brief Get the SSID value.
            ///
            const char* get_SSID() const throw();

            ///
            /// \brief Set the SSID value.
            ///
            void set_SSID(const char* value) throw();

            ///
            /// \brief Get the SSIDBroadcast value.
            ///
            bool get_SSIDBroadcast() const throw();

            ///
            /// \brief Set the SSIDBroadcast value.
            ///
            void set_SSIDBroadcast(bool value) throw();

            ///
            /// \brief Get the ChannelWidth value.
            ///
            HDK_XML_Int get_ChannelWidth() const throw();

            ///
            /// \brief Set the ChannelWidth value.
            ///
            void set_ChannelWidth(HDK_XML_Int value) throw();

            ///
            /// \brief Get the Channel value.
            ///
            HDK_XML_Int get_Channel() const throw();

            ///
            /// \brief Set the Channel value.
            ///
            void set_Channel(HDK_XML_Int value) throw();

            ///
            /// \brief Get the SecondaryChannel value.
            ///
            HDK_XML_Int get_SecondaryChannel() const throw();

            ///
            /// \brief Set the SecondaryChannel value.
            ///
            void set_SecondaryChannel(HDK_XML_Int value) throw();

            ///
            /// \brief Get the QoS value.
            ///
            bool get_QoS() const throw();

            ///
            /// \brief Set the QoS value.
            ///
            void set_QoS(bool value) throw();

        }; // class SetWLanRadioSettingsStruct : public Struct

        ///
        /// \brief SetWLanRadioSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/SetWLanRadioSettingsResponse</a>
        ///
        class SetWLanRadioSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWLanRadioSettingsResponseStruct() throw();

            ///
            /// \brief Get the SetWLanRadioSettingsResult value.
            ///
            enum SetWLanRadioSettingsResult get_SetWLanRadioSettingsResult() const throw();

        }; // class SetWLanRadioSettingsResponseStruct : public Struct

        ///
        /// \brief SetWanSettings
        ///      <a>http://purenetworks.com/HNAP1/SetWanSettings</a>
        ///
        class SetWanSettingsStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWanSettingsStruct() throw();

            ///
            /// \brief Get the Type value.
            ///
            enum WANType get_Type() const throw();

            ///
            /// \brief Set the Type value.
            ///
            void set_Type(enum WANType value) throw();

            ///
            /// \brief Get the Username value.
            ///
            const char* get_Username() const throw();

            ///
            /// \brief Set the Username value.
            ///
            void set_Username(const char* value) throw();

            ///
            /// \brief Get the Password value.
            ///
            const char* get_Password() const throw();

            ///
            /// \brief Set the Password value.
            ///
            void set_Password(const char* value) throw();

            ///
            /// \brief Get the MaxIdleTime value.
            ///
            HDK_XML_Int get_MaxIdleTime() const throw();

            ///
            /// \brief Set the MaxIdleTime value.
            ///
            void set_MaxIdleTime(HDK_XML_Int value) throw();

            ///
            /// \brief Get the ServiceName value.
            ///
            const char* get_ServiceName() const throw();

            ///
            /// \brief Set the ServiceName value.
            ///
            void set_ServiceName(const char* value) throw();

            ///
            /// \brief Get the AutoReconnect value.
            ///
            bool get_AutoReconnect() const throw();

            ///
            /// \brief Set the AutoReconnect value.
            ///
            void set_AutoReconnect(bool value) throw();

            ///
            /// \brief Get the IPAddress value.
            ///
            IPv4Address get_IPAddress() const throw();

            ///
            /// \brief Set the IPAddress value.
            ///
            void set_IPAddress(const IPv4Address& value) throw();

            ///
            /// \brief Get the SubnetMask value.
            ///
            IPv4Address get_SubnetMask() const throw();

            ///
            /// \brief Set the SubnetMask value.
            ///
            void set_SubnetMask(const IPv4Address& value) throw();

            ///
            /// \brief Get the Gateway value.
            ///
            IPv4Address get_Gateway() const throw();

            ///
            /// \brief Set the Gateway value.
            ///
            void set_Gateway(const IPv4Address& value) throw();

            ///
            /// \brief Get the DNS value.
            ///
            DNSSettingsStruct get_DNS() const throw();

            ///
            /// \brief Set the DNS value.
            ///
            void set_DNS(const DNSSettingsStruct& value) throw();

            ///
            /// \brief Get the MacAddress value.
            ///
            MACAddress get_MacAddress() const throw();

            ///
            /// \brief Set the MacAddress value.
            ///
            void set_MacAddress(const MACAddress& value) throw();

            ///
            /// \brief Get the MTU value.
            ///
            HDK_XML_Int get_MTU() const throw();

            ///
            /// \brief Set the MTU value.
            ///
            void set_MTU(HDK_XML_Int value) throw();

        }; // class SetWanSettingsStruct : public Struct

        ///
        /// \brief SetWanSettingsResponse
        ///      <a>http://purenetworks.com/HNAP1/SetWanSettingsResponse</a>
        ///
        class SetWanSettingsResponseStruct : public Struct
        {
        public:
            //
            // Constructors/Destructor.
            //
            SetWanSettingsResponseStruct() throw();

            ///
            /// \brief Get the SetWanSettingsResult value.
            ///
            enum SetWanSettingsResult get_SetWanSettingsResult() const throw();

        }; // class SetWanSettingsResponseStruct : public Struct

    } // namespace Purenetworks_HNAP1

    namespace Cisco_HNAP
    {
        ///
        /// \brief SOAP method URI for action GetServiceInfo
        ///
#define GetServiceInfo_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_GetServiceInfo)->pszSOAPAction)

        ///
        /// \brief Call the GetServiceInfo method on a given device.
        ///     <a>http://cisco.com/HNAP/GetServiceInfo</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetServiceInfoResult_OK
        ///          - #GetServiceInfoResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the GetServiceInfo HNAP method.
        ///     \arg output The output argument data from the GetServiceInfo HNAP method.
        ///     \arg[optional] result The HNAP result of the GetServiceInfo HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetServiceInfo
        (
            HDK::ITarget* pTarget,
            const GetServiceInfoStruct & input,
            GetServiceInfoResponseStruct & output,
            enum GetServiceInfoResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetServices
        ///
#define GetServices_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_GetServices)->pszSOAPAction)

        ///
        /// \brief Call the GetServices method on a given device.
        ///     <a>http://cisco.com/HNAP/GetServices</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetServicesResult_OK
        ///          - #GetServicesResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetServices HNAP method.
        ///     \arg[optional] result The HNAP result of the GetServices HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetServices
        (
            HDK::ITarget* pTarget,
            GetServicesResponseStruct & output,
            enum GetServicesResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

    } // namespace Cisco_HNAP

    namespace Purenetworks_HNAP1
    {
        ///
        /// \brief SOAP method URI for action AddPortMapping
        ///
#define PN_AddPortMapping_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_AddPortMapping)->pszSOAPAction)

        ///
        /// \brief Call the AddPortMapping method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/AddPortMapping</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #AddPortMappingResult_OK
        ///          - #AddPortMappingResult_REBOOT
        ///          - #AddPortMappingResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the AddPortMapping HNAP method.
        ///     \arg[optional] result The HNAP result of the AddPortMapping HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError AddPortMapping
        (
            HDK::ITarget* pTarget,
            const AddPortMappingStruct & input,
            enum AddPortMappingResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action DeletePortMapping
        ///
#define PN_DeletePortMapping_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_DeletePortMapping)->pszSOAPAction)

        ///
        /// \brief Call the DeletePortMapping method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/DeletePortMapping</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #DeletePortMappingResult_OK
        ///          - #DeletePortMappingResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the DeletePortMapping HNAP method.
        ///     \arg[optional] result The HNAP result of the DeletePortMapping HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError DeletePortMapping
        (
            HDK::ITarget* pTarget,
            const DeletePortMappingStruct & input,
            enum DeletePortMappingResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action DownloadSpeedTest
        ///
#define PN_DownloadSpeedTest_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_DownloadSpeedTest)->pszSOAPAction)

        ///
        /// \brief Call the DownloadSpeedTest method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/DownloadSpeedTest</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #DownloadSpeedTestResult_OK
        ///          - #DownloadSpeedTestResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the DownloadSpeedTest HNAP method.
        ///     \arg output The output argument data from the DownloadSpeedTest HNAP method.
        ///     \arg[optional] result The HNAP result of the DownloadSpeedTest HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError DownloadSpeedTest
        (
            HDK::ITarget* pTarget,
            const DownloadSpeedTestStruct & input,
            DownloadSpeedTestResponseStruct & output,
            enum DownloadSpeedTestResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action FirmwareUpload
        ///
#define PN_FirmwareUpload_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_FirmwareUpload)->pszSOAPAction)

        ///
        /// \brief Call the FirmwareUpload method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/FirmwareUpload</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #FirmwareUploadResult_OK
        ///          - #FirmwareUploadResult_REBOOT
        ///          - #FirmwareUploadResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the FirmwareUpload HNAP method.
        ///     \arg[optional] result The HNAP result of the FirmwareUpload HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError FirmwareUpload
        (
            HDK::ITarget* pTarget,
            const FirmwareUploadStruct & input,
            enum FirmwareUploadResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetClientStats
        ///
#define PN_GetClientStats_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetClientStats)->pszSOAPAction)

        ///
        /// \brief Call the GetClientStats method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetClientStats</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetClientStatsResult_OK
        ///          - #GetClientStatsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetClientStats HNAP method.
        ///     \arg[optional] result The HNAP result of the GetClientStats HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetClientStats
        (
            HDK::ITarget* pTarget,
            GetClientStatsResponseStruct & output,
            enum GetClientStatsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetConfigBlob
        ///
#define PN_GetConfigBlob_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetConfigBlob)->pszSOAPAction)

        ///
        /// \brief Call the GetConfigBlob method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetConfigBlob</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetConfigBlobResult_OK
        ///          - #GetConfigBlobResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetConfigBlob HNAP method.
        ///     \arg[optional] result The HNAP result of the GetConfigBlob HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetConfigBlob
        (
            HDK::ITarget* pTarget,
            GetConfigBlobResponseStruct & output,
            enum GetConfigBlobResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetConnectedDevices
        ///
#define PN_GetConnectedDevices_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetConnectedDevices)->pszSOAPAction)

        ///
        /// \brief Call the GetConnectedDevices method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetConnectedDevices</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetConnectedDevicesResult_OK
        ///          - #GetConnectedDevicesResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetConnectedDevices HNAP method.
        ///     \arg[optional] result The HNAP result of the GetConnectedDevices HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetConnectedDevices
        (
            HDK::ITarget* pTarget,
            GetConnectedDevicesResponseStruct & output,
            enum GetConnectedDevicesResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetDeviceSettings
        ///
#define PN_GetDeviceSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetDeviceSettings)->pszSOAPAction)

        ///
        /// \brief Call the GetDeviceSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetDeviceSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetDeviceSettingsResult_OK
        ///          - #GetDeviceSettingsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetDeviceSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the GetDeviceSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetDeviceSettings
        (
            HDK::ITarget* pTarget,
            GetDeviceSettingsResponseStruct & output,
            enum GetDeviceSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief Call the GetDeviceSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetDeviceSettings</a>
        ///     This method uses HTTP method GET and location '/HNAP1'
        ///     \note This method does NOT require HTTP Basic Authorization.
        ///
        ///
        ///     Possible result values:
        ///          - #GetDeviceSettingsResult_OK
        ///          - #GetDeviceSettingsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetDeviceSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the GetDeviceSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetDeviceSettings_GET
        (
            HDK::ITarget* pTarget,
            GetDeviceSettingsResponseStruct & output,
            enum GetDeviceSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetDeviceSettings2
        ///
#define PN_GetDeviceSettings2_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetDeviceSettings2)->pszSOAPAction)

        ///
        /// \brief Call the GetDeviceSettings2 method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetDeviceSettings2</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetDeviceSettings2Result_OK
        ///          - #GetDeviceSettings2Result_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetDeviceSettings2 HNAP method.
        ///     \arg[optional] result The HNAP result of the GetDeviceSettings2 HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetDeviceSettings2
        (
            HDK::ITarget* pTarget,
            GetDeviceSettings2ResponseStruct & output,
            enum GetDeviceSettings2Result* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetFirmwareSettings
        ///
#define PN_GetFirmwareSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetFirmwareSettings)->pszSOAPAction)

        ///
        /// \brief Call the GetFirmwareSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetFirmwareSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetFirmwareSettingsResult_OK
        ///          - #GetFirmwareSettingsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetFirmwareSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the GetFirmwareSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetFirmwareSettings
        (
            HDK::ITarget* pTarget,
            GetFirmwareSettingsResponseStruct & output,
            enum GetFirmwareSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetMACFilters2
        ///
#define PN_GetMACFilters2_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetMACFilters2)->pszSOAPAction)

        ///
        /// \brief Call the GetMACFilters2 method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetMACFilters2</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetMACFilters2Result_OK
        ///          - #GetMACFilters2Result_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetMACFilters2 HNAP method.
        ///     \arg[optional] result The HNAP result of the GetMACFilters2 HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetMACFilters2
        (
            HDK::ITarget* pTarget,
            GetMACFilters2ResponseStruct & output,
            enum GetMACFilters2Result* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetNetworkStats
        ///
#define PN_GetNetworkStats_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetNetworkStats)->pszSOAPAction)

        ///
        /// \brief Call the GetNetworkStats method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetNetworkStats</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetNetworkStatsResult_OK
        ///          - #GetNetworkStatsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetNetworkStats HNAP method.
        ///     \arg[optional] result The HNAP result of the GetNetworkStats HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetNetworkStats
        (
            HDK::ITarget* pTarget,
            GetNetworkStatsResponseStruct & output,
            enum GetNetworkStatsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetPortMappings
        ///
#define PN_GetPortMappings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetPortMappings)->pszSOAPAction)

        ///
        /// \brief Call the GetPortMappings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetPortMappings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetPortMappingsResult_OK
        ///          - #GetPortMappingsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetPortMappings HNAP method.
        ///     \arg[optional] result The HNAP result of the GetPortMappings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetPortMappings
        (
            HDK::ITarget* pTarget,
            GetPortMappingsResponseStruct & output,
            enum GetPortMappingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetRouterLanSettings2
        ///
#define PN_GetRouterLanSettings2_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetRouterLanSettings2)->pszSOAPAction)

        ///
        /// \brief Call the GetRouterLanSettings2 method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetRouterLanSettings2</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetRouterLanSettings2Result_OK
        ///          - #GetRouterLanSettings2Result_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetRouterLanSettings2 HNAP method.
        ///     \arg[optional] result The HNAP result of the GetRouterLanSettings2 HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetRouterLanSettings2
        (
            HDK::ITarget* pTarget,
            GetRouterLanSettings2ResponseStruct & output,
            enum GetRouterLanSettings2Result* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetRouterSettings
        ///
#define PN_GetRouterSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetRouterSettings)->pszSOAPAction)

        ///
        /// \brief Call the GetRouterSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetRouterSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetRouterSettingsResult_OK
        ///          - #GetRouterSettingsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetRouterSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the GetRouterSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetRouterSettings
        (
            HDK::ITarget* pTarget,
            GetRouterSettingsResponseStruct & output,
            enum GetRouterSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetWLanRadioFrequencies
        ///
#define PN_GetWLanRadioFrequencies_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetWLanRadioFrequencies)->pszSOAPAction)

        ///
        /// \brief Call the GetWLanRadioFrequencies method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetWLanRadioFrequencies</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetWLanRadioFrequenciesResult_OK
        ///          - #GetWLanRadioFrequenciesResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetWLanRadioFrequencies HNAP method.
        ///     \arg[optional] result The HNAP result of the GetWLanRadioFrequencies HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetWLanRadioFrequencies
        (
            HDK::ITarget* pTarget,
            GetWLanRadioFrequenciesResponseStruct & output,
            enum GetWLanRadioFrequenciesResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetWLanRadioSecurity
        ///
#define PN_GetWLanRadioSecurity_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetWLanRadioSecurity)->pszSOAPAction)

        ///
        /// \brief Call the GetWLanRadioSecurity method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetWLanRadioSecurity</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetWLanRadioSecurityResult_OK
        ///          - #GetWLanRadioSecurityResult_ERROR
        ///          - #GetWLanRadioSecurityResult_ERROR_BAD_RADIOID
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the GetWLanRadioSecurity HNAP method.
        ///     \arg output The output argument data from the GetWLanRadioSecurity HNAP method.
        ///     \arg[optional] result The HNAP result of the GetWLanRadioSecurity HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetWLanRadioSecurity
        (
            HDK::ITarget* pTarget,
            const GetWLanRadioSecurityStruct & input,
            GetWLanRadioSecurityResponseStruct & output,
            enum GetWLanRadioSecurityResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetWLanRadioSettings
        ///
#define PN_GetWLanRadioSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetWLanRadioSettings)->pszSOAPAction)

        ///
        /// \brief Call the GetWLanRadioSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetWLanRadioSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetWLanRadioSettingsResult_OK
        ///          - #GetWLanRadioSettingsResult_ERROR
        ///          - #GetWLanRadioSettingsResult_ERROR_BAD_RADIOID
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the GetWLanRadioSettings HNAP method.
        ///     \arg output The output argument data from the GetWLanRadioSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the GetWLanRadioSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetWLanRadioSettings
        (
            HDK::ITarget* pTarget,
            const GetWLanRadioSettingsStruct & input,
            GetWLanRadioSettingsResponseStruct & output,
            enum GetWLanRadioSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetWLanRadios
        ///
#define PN_GetWLanRadios_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetWLanRadios)->pszSOAPAction)

        ///
        /// \brief Call the GetWLanRadios method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetWLanRadios</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetWLanRadiosResult_OK
        ///          - #GetWLanRadiosResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetWLanRadios HNAP method.
        ///     \arg[optional] result The HNAP result of the GetWLanRadios HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetWLanRadios
        (
            HDK::ITarget* pTarget,
            GetWLanRadiosResponseStruct & output,
            enum GetWLanRadiosResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetWanInfo
        ///
#define PN_GetWanInfo_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetWanInfo)->pszSOAPAction)

        ///
        /// \brief Call the GetWanInfo method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetWanInfo</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetWanInfoResult_OK
        ///          - #GetWanInfoResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetWanInfo HNAP method.
        ///     \arg[optional] result The HNAP result of the GetWanInfo HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetWanInfo
        (
            HDK::ITarget* pTarget,
            GetWanInfoResponseStruct & output,
            enum GetWanInfoResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action GetWanSettings
        ///
#define PN_GetWanSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_GetWanSettings)->pszSOAPAction)

        ///
        /// \brief Call the GetWanSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/GetWanSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #GetWanSettingsResult_OK
        ///          - #GetWanSettingsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg output The output argument data from the GetWanSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the GetWanSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError GetWanSettings
        (
            HDK::ITarget* pTarget,
            GetWanSettingsResponseStruct & output,
            enum GetWanSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action IsDeviceReady
        ///
#define PN_IsDeviceReady_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_IsDeviceReady)->pszSOAPAction)

        ///
        /// \brief Call the IsDeviceReady method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/IsDeviceReady</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #IsDeviceReadyResult_OK
        ///          - #IsDeviceReadyResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg[optional] result The HNAP result of the IsDeviceReady HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError IsDeviceReady
        (
            HDK::ITarget* pTarget,
            enum IsDeviceReadyResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action Reboot
        ///
#define PN_Reboot_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_Reboot)->pszSOAPAction)

        ///
        /// \brief Call the Reboot method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/Reboot</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #RebootResult_OK
        ///          - #RebootResult_REBOOT
        ///          - #RebootResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg[optional] result The HNAP result of the Reboot HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError Reboot
        (
            HDK::ITarget* pTarget,
            enum RebootResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action RenewWanConnection
        ///
#define PN_RenewWanConnection_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_RenewWanConnection)->pszSOAPAction)

        ///
        /// \brief Call the RenewWanConnection method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/RenewWanConnection</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #RenewWanConnectionResult_OK
        ///          - #RenewWanConnectionResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the RenewWanConnection HNAP method.
        ///     \arg[optional] result The HNAP result of the RenewWanConnection HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError RenewWanConnection
        (
            HDK::ITarget* pTarget,
            const RenewWanConnectionStruct & input,
            enum RenewWanConnectionResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action RestoreFactoryDefaults
        ///
#define PN_RestoreFactoryDefaults_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_RestoreFactoryDefaults)->pszSOAPAction)

        ///
        /// \brief Call the RestoreFactoryDefaults method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/RestoreFactoryDefaults</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #RestoreFactoryDefaultsResult_OK
        ///          - #RestoreFactoryDefaultsResult_REBOOT
        ///          - #RestoreFactoryDefaultsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg[optional] result The HNAP result of the RestoreFactoryDefaults HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError RestoreFactoryDefaults
        (
            HDK::ITarget* pTarget,
            enum RestoreFactoryDefaultsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetAccessPointMode
        ///
#define PN_SetAccessPointMode_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetAccessPointMode)->pszSOAPAction)

        ///
        /// \brief Call the SetAccessPointMode method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetAccessPointMode</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetAccessPointModeResult_OK
        ///          - #SetAccessPointModeResult_REBOOT
        ///          - #SetAccessPointModeResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetAccessPointMode HNAP method.
        ///     \arg output The output argument data from the SetAccessPointMode HNAP method.
        ///     \arg[optional] result The HNAP result of the SetAccessPointMode HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetAccessPointMode
        (
            HDK::ITarget* pTarget,
            const SetAccessPointModeStruct & input,
            SetAccessPointModeResponseStruct & output,
            enum SetAccessPointModeResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetConfigBlob
        ///
#define PN_SetConfigBlob_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetConfigBlob)->pszSOAPAction)

        ///
        /// \brief Call the SetConfigBlob method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetConfigBlob</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetConfigBlobResult_OK
        ///          - #SetConfigBlobResult_REBOOT
        ///          - #SetConfigBlobResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetConfigBlob HNAP method.
        ///     \arg[optional] result The HNAP result of the SetConfigBlob HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetConfigBlob
        (
            HDK::ITarget* pTarget,
            const SetConfigBlobStruct & input,
            enum SetConfigBlobResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetDeviceSettings
        ///
#define PN_SetDeviceSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetDeviceSettings)->pszSOAPAction)

        ///
        /// \brief Call the SetDeviceSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetDeviceSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetDeviceSettingsResult_OK
        ///          - #SetDeviceSettingsResult_REBOOT
        ///          - #SetDeviceSettingsResult_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetDeviceSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the SetDeviceSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetDeviceSettings
        (
            HDK::ITarget* pTarget,
            const SetDeviceSettingsStruct & input,
            enum SetDeviceSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetDeviceSettings2
        ///
#define PN_SetDeviceSettings2_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetDeviceSettings2)->pszSOAPAction)

        ///
        /// \brief Call the SetDeviceSettings2 method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetDeviceSettings2</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetDeviceSettings2Result_OK
        ///          - #SetDeviceSettings2Result_REBOOT
        ///          - #SetDeviceSettings2Result_ERROR
        ///          - #SetDeviceSettings2Result_ERROR_REMOTE_SSL_NEEDS_SSL
        ///          - #SetDeviceSettings2Result_ERROR_TIMEZONE_NOT_SUPPORTED
        ///          - #SetDeviceSettings2Result_ERROR_USERNAME_NOT_SUPPORTED
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetDeviceSettings2 HNAP method.
        ///     \arg[optional] result The HNAP result of the SetDeviceSettings2 HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetDeviceSettings2
        (
            HDK::ITarget* pTarget,
            const SetDeviceSettings2Struct & input,
            enum SetDeviceSettings2Result* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetMACFilters2
        ///
#define PN_SetMACFilters2_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetMACFilters2)->pszSOAPAction)

        ///
        /// \brief Call the SetMACFilters2 method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetMACFilters2</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetMACFilters2Result_OK
        ///          - #SetMACFilters2Result_REBOOT
        ///          - #SetMACFilters2Result_ERROR
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetMACFilters2 HNAP method.
        ///     \arg[optional] result The HNAP result of the SetMACFilters2 HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetMACFilters2
        (
            HDK::ITarget* pTarget,
            const SetMACFilters2Struct & input,
            enum SetMACFilters2Result* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetRouterLanSettings2
        ///
#define PN_SetRouterLanSettings2_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetRouterLanSettings2)->pszSOAPAction)

        ///
        /// \brief Call the SetRouterLanSettings2 method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetRouterLanSettings2</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetRouterLanSettings2Result_OK
        ///          - #SetRouterLanSettings2Result_ERROR
        ///          - #SetRouterLanSettings2Result_ERROR_BAD_IP_ADDRESS
        ///          - #SetRouterLanSettings2Result_ERROR_BAD_IP_RANGE
        ///          - #SetRouterLanSettings2Result_ERROR_BAD_RESERVATION
        ///          - #SetRouterLanSettings2Result_ERROR_BAD_SUBNET
        ///          - #SetRouterLanSettings2Result_ERROR_RESERVATIONS_NOT_SUPPORTED
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetRouterLanSettings2 HNAP method.
        ///     \arg[optional] result The HNAP result of the SetRouterLanSettings2 HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetRouterLanSettings2
        (
            HDK::ITarget* pTarget,
            const SetRouterLanSettings2Struct & input,
            enum SetRouterLanSettings2Result* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetRouterSettings
        ///
#define PN_SetRouterSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetRouterSettings)->pszSOAPAction)

        ///
        /// \brief Call the SetRouterSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetRouterSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetRouterSettingsResult_OK
        ///          - #SetRouterSettingsResult_REBOOT
        ///          - #SetRouterSettingsResult_ERROR
        ///          - #SetRouterSettingsResult_ERROR_DOMAIN_NOT_SUPPORTED
        ///          - #SetRouterSettingsResult_ERROR_QOS_NOT_SUPPORTED
        ///          - #SetRouterSettingsResult_ERROR_REMOTE_MANAGE_DEFAULT_PASSWORD
        ///          - #SetRouterSettingsResult_ERROR_REMOTE_MANAGE_MUST_BE_SSL
        ///          - #SetRouterSettingsResult_ERROR_REMOTE_MANAGE_NOT_SUPPORTED
        ///          - #SetRouterSettingsResult_ERROR_REMOTE_SSL_NEEDS_SSL
        ///          - #SetRouterSettingsResult_ERROR_REMOTE_SSL_NOT_SUPPORTED
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetRouterSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the SetRouterSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetRouterSettings
        (
            HDK::ITarget* pTarget,
            const SetRouterSettingsStruct & input,
            enum SetRouterSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetWLanRadioFrequency
        ///
#define PN_SetWLanRadioFrequency_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetWLanRadioFrequency)->pszSOAPAction)

        ///
        /// \brief Call the SetWLanRadioFrequency method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetWLanRadioFrequency</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetWLanRadioFrequencyResult_OK
        ///          - #SetWLanRadioFrequencyResult_REBOOT
        ///          - #SetWLanRadioFrequencyResult_ERROR
        ///          - #SetWLanRadioFrequencyResult_ERROR_BAD_RADIOID
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetWLanRadioFrequency HNAP method.
        ///     \arg[optional] result The HNAP result of the SetWLanRadioFrequency HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetWLanRadioFrequency
        (
            HDK::ITarget* pTarget,
            const SetWLanRadioFrequencyStruct & input,
            enum SetWLanRadioFrequencyResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetWLanRadioSecurity
        ///
#define PN_SetWLanRadioSecurity_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetWLanRadioSecurity)->pszSOAPAction)

        ///
        /// \brief Call the SetWLanRadioSecurity method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetWLanRadioSecurity</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetWLanRadioSecurityResult_OK
        ///          - #SetWLanRadioSecurityResult_REBOOT
        ///          - #SetWLanRadioSecurityResult_ERROR
        ///          - #SetWLanRadioSecurityResult_ERROR_BAD_RADIOID
        ///          - #SetWLanRadioSecurityResult_ERROR_BAD_RADIUS_VALUES
        ///          - #SetWLanRadioSecurityResult_ERROR_ENCRYPTION_NOT_SUPPORTED
        ///          - #SetWLanRadioSecurityResult_ERROR_ILLEGAL_KEY_VALUE
        ///          - #SetWLanRadioSecurityResult_ERROR_KEY_RENEWAL_BAD_VALUE
        ///          - #SetWLanRadioSecurityResult_ERROR_TYPE_NOT_SUPPORTED
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetWLanRadioSecurity HNAP method.
        ///     \arg[optional] result The HNAP result of the SetWLanRadioSecurity HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetWLanRadioSecurity
        (
            HDK::ITarget* pTarget,
            const SetWLanRadioSecurityStruct & input,
            enum SetWLanRadioSecurityResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetWLanRadioSettings
        ///
#define PN_SetWLanRadioSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetWLanRadioSettings)->pszSOAPAction)

        ///
        /// \brief Call the SetWLanRadioSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetWLanRadioSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetWLanRadioSettingsResult_OK
        ///          - #SetWLanRadioSettingsResult_REBOOT
        ///          - #SetWLanRadioSettingsResult_ERROR
        ///          - #SetWLanRadioSettingsResult_ERROR_BAD_CHANNEL
        ///          - #SetWLanRadioSettingsResult_ERROR_BAD_CHANNEL_WIDTH
        ///          - #SetWLanRadioSettingsResult_ERROR_BAD_MODE
        ///          - #SetWLanRadioSettingsResult_ERROR_BAD_RADIOID
        ///          - #SetWLanRadioSettingsResult_ERROR_BAD_SECONDARY_CHANNEL
        ///          - #SetWLanRadioSettingsResult_ERROR_BAD_SSID
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetWLanRadioSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the SetWLanRadioSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetWLanRadioSettings
        (
            HDK::ITarget* pTarget,
            const SetWLanRadioSettingsStruct & input,
            enum SetWLanRadioSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

        ///
        /// \brief SOAP method URI for action SetWanSettings
        ///
#define PN_SetWanSettings_URI (HDK_MOD_GetMethod(ACTUAL_CLIENT_MOD_Module(), ACTUAL_CLIENT_MOD_MethodEnum_PN_SetWanSettings)->pszSOAPAction)

        ///
        /// \brief Call the SetWanSettings method on a given device.
        ///     <a>http://purenetworks.com/HNAP1/SetWanSettings</a>
        ///     This method uses HTTP method POST and location '/HNAP1'
        ///
        ///     Possible result values:
        ///          - #SetWanSettingsResult_OK
        ///          - #SetWanSettingsResult_REBOOT
        ///          - #SetWanSettingsResult_ERROR
        ///          - #SetWanSettingsResult_ERROR_AUTO_MTU_NOT_SUPPORTED
        ///          - #SetWanSettingsResult_ERROR_BAD_WANTYPE
        ///     \arg pTarget The target on which to call this method.
        ///     \arg input The input argument data to the SetWanSettings HNAP method.
        ///     \arg[optional] result The HNAP result of the SetWanSettings HNAP method.
        ///     \arg timeoutSecs An optional timeout, in seconds, to use for the HNAP call.
        ///     \retval The result of the HNAP method call.
        ///
        HDK::ClientError SetWanSettings
        (
            HDK::ITarget* pTarget,
            const SetWanSettingsStruct & input,
            enum SetWanSettingsResult* presult = NULL,
            unsigned int timeoutSecs = 0
        ) throw();

    } // namespace Purenetworks_HNAP1
} // namespace HDK
