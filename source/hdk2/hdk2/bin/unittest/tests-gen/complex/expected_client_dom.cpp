/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2015 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

/**********************************************************************
   Copyright [2014] [Cisco Systems, Inc.]
 
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**********************************************************************/

/*
 * Copyright (c) 2008-2010 Cisco Systems, Inc. All rights reserved.
 *
 * Cisco Systems, Inc. retains all right, title and interest (including all
 * intellectual property rights) in and to this computer program, which is
 * protected by applicable intellectual property laws.  Unless you have obtained
 * a separate written license from Cisco Systems, Inc., you are not authorized
 * to utilize all or a part of this computer program for any purpose (including
 * reproduction, distribution, modification, and compilation into object code),
 * and you must immediately destroy or return to Cisco Systems, Inc. all copies
 * of this computer program.  If you are licensed by Cisco Systems, Inc., your
 * rights to utilize this computer program are limited by the terms of that
 * license.  To obtain a license, please contact Cisco Systems, Inc.
 *
 * This computer program contains trade secrets owned by Cisco Systems, Inc.
 * and, unless unauthorized by Cisco Systems, Inc. in writing, you agree to
 * maintain the confidentiality of this computer program and related information
 * and to not disclose this computer program and related information to any
 * other person or entity.
 *
 * THIS COMPUTER PROGRAM IS PROVIDED AS IS WITHOUT ANY WARRANTIES, AND CISCO
 * SYSTEMS, INC. EXPRESSLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED,
 * INCLUDING THE WARRANTIES OF MERCHANTIBILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, TITLE, AND NONINFRINGEMENT.
 */

// actual_client_dom.cpp - [Generated by hdkcli_cpp]

// Local header.
#include "actual_client_dom.h"

using namespace HDK;

Cisco_HNAP::ServiceInfoStruct::ServiceInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_ServiceInfo)
{
}

Cisco_HNAP::ServiceInfoStruct::ServiceInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Cisco_HNAP::ServiceInfoStruct::get_ServiceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_ServiceName, 0);
}

void Cisco_HNAP::ServiceInfoStruct::set_ServiceName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_ServiceName, value);
}

HDK_XML_Int Cisco_HNAP::ServiceInfoStruct::get_ServiceLevel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_ServiceLevel, 0);
}

void Cisco_HNAP::ServiceInfoStruct::set_ServiceLevel(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_ServiceLevel, value);
}

bool Cisco_HNAP::ServiceInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_ServiceInfo(), pszFile);
}

bool Cisco_HNAP::ServiceInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_ServiceInfo(), pszFile, 0);
}

Purenetworks_HNAP1::ClientStatStruct::ClientStatStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_ClientStat)
{
}

Purenetworks_HNAP1::ClientStatStruct::ClientStatStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

MACAddress Purenetworks_HNAP1::ClientStatStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

void Purenetworks_HNAP1::ClientStatStruct::set_MacAddress(const MACAddress& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress);
        return;
    }
    (void)HDK_XML_Set_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, value);
}

bool Purenetworks_HNAP1::ClientStatStruct::get_Wireless() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Wireless, 0);
}

void Purenetworks_HNAP1::ClientStatStruct::set_Wireless(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Wireless, (int)value);
}

HDK_XML_Int Purenetworks_HNAP1::ClientStatStruct::get_LinkSpeedIn() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_LinkSpeedIn, 0);
}

void Purenetworks_HNAP1::ClientStatStruct::set_LinkSpeedIn(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_LinkSpeedIn, value);
}

HDK_XML_Int Purenetworks_HNAP1::ClientStatStruct::get_LinkSpeedOut() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_LinkSpeedOut, 0);
}

void Purenetworks_HNAP1::ClientStatStruct::set_LinkSpeedOut(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_LinkSpeedOut, value);
}

HDK_XML_Int Purenetworks_HNAP1::ClientStatStruct::get_SignalStrength() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SignalStrength, 0);
}

void Purenetworks_HNAP1::ClientStatStruct::set_SignalStrength(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SignalStrength, value);
}

bool Purenetworks_HNAP1::ClientStatStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_ClientStat(), pszFile);
}

bool Purenetworks_HNAP1::ClientStatStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_ClientStat(), pszFile, 0);
}

Purenetworks_HNAP1::ConnectedClientStruct::ConnectedClientStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_ConnectedClient)
{
}

Purenetworks_HNAP1::ConnectedClientStruct::ConnectedClientStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

time_t Purenetworks_HNAP1::ConnectedClientStruct::get_ConnectTime() const throw()
{
    return HDK_XML_GetEx_DateTime(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ConnectTime, 0);
}

void Purenetworks_HNAP1::ConnectedClientStruct::set_ConnectTime(time_t value) throw()
{
    (void)HDK_XML_Set_DateTime(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ConnectTime, value);
}

MACAddress Purenetworks_HNAP1::ConnectedClientStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

void Purenetworks_HNAP1::ConnectedClientStruct::set_MacAddress(const MACAddress& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress);
        return;
    }
    (void)HDK_XML_Set_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, value);
}

const char* Purenetworks_HNAP1::ConnectedClientStruct::get_DeviceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, 0);
}

void Purenetworks_HNAP1::ConnectedClientStruct::set_DeviceName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, value);
}

enum Purenetworks_HNAP1::LANConnection Purenetworks_HNAP1::ConnectedClientStruct::get_PortName() const throw()
{
    return (enum Purenetworks_HNAP1::LANConnection)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_LANConnection(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortName, ACTUAL_CLIENT_DOM_MOD_Enum_PN_LANConnection__UNKNOWN__);
}

void Purenetworks_HNAP1::ConnectedClientStruct::set_PortName(enum Purenetworks_HNAP1::LANConnection value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_LANConnection(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortName, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_LANConnection)value);
}

bool Purenetworks_HNAP1::ConnectedClientStruct::get_Wireless() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Wireless, 0);
}

void Purenetworks_HNAP1::ConnectedClientStruct::set_Wireless(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Wireless, (int)value);
}

bool Purenetworks_HNAP1::ConnectedClientStruct::get_Active() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Active, 0);
}

void Purenetworks_HNAP1::ConnectedClientStruct::set_Active(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Active, (int)value);
}

bool Purenetworks_HNAP1::ConnectedClientStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_ConnectedClient(), pszFile);
}

bool Purenetworks_HNAP1::ConnectedClientStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_ConnectedClient(), pszFile, 0);
}

Purenetworks_HNAP1::DHCPReservationStruct::DHCPReservationStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_DHCPReservation)
{
}

Purenetworks_HNAP1::DHCPReservationStruct::DHCPReservationStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::DHCPReservationStruct::get_DeviceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, 0);
}

void Purenetworks_HNAP1::DHCPReservationStruct::set_DeviceName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, value);
}

IPv4Address Purenetworks_HNAP1::DHCPReservationStruct::get_IPAddress() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddress, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::DHCPReservationStruct::set_IPAddress(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddress);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddress, value);
}

MACAddress Purenetworks_HNAP1::DHCPReservationStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

void Purenetworks_HNAP1::DHCPReservationStruct::set_MacAddress(const MACAddress& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress);
        return;
    }
    (void)HDK_XML_Set_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, value);
}

bool Purenetworks_HNAP1::DHCPReservationStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_DHCPReservation(), pszFile);
}

bool Purenetworks_HNAP1::DHCPReservationStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_DHCPReservation(), pszFile, 0);
}

Purenetworks_HNAP1::DNSSettingsStruct::DNSSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_DNSSettings)
{
}

Purenetworks_HNAP1::DNSSettingsStruct::DNSSettingsStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

IPv4Address Purenetworks_HNAP1::DNSSettingsStruct::get_Primary() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Primary, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::DNSSettingsStruct::set_Primary(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Primary);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Primary, value);
}

IPv4Address Purenetworks_HNAP1::DNSSettingsStruct::get_Secondary() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Secondary, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::DNSSettingsStruct::set_Secondary(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Secondary);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Secondary, value);
}

IPv4Address Purenetworks_HNAP1::DNSSettingsStruct::get_Tertiary() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Tertiary, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::DNSSettingsStruct::set_Tertiary(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Tertiary);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Tertiary, value);
}

bool Purenetworks_HNAP1::DNSSettingsStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_DNSSettings(), pszFile);
}

bool Purenetworks_HNAP1::DNSSettingsStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_DNSSettings(), pszFile, 0);
}

Purenetworks_HNAP1::MACInfoStruct::MACInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_MACInfo)
{
}

Purenetworks_HNAP1::MACInfoStruct::MACInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

MACAddress Purenetworks_HNAP1::MACInfoStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

void Purenetworks_HNAP1::MACInfoStruct::set_MacAddress(const MACAddress& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress);
        return;
    }
    (void)HDK_XML_Set_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, value);
}

const char* Purenetworks_HNAP1::MACInfoStruct::get_DeviceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, 0);
}

void Purenetworks_HNAP1::MACInfoStruct::set_DeviceName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, value);
}

bool Purenetworks_HNAP1::MACInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_MACInfo(), pszFile);
}

bool Purenetworks_HNAP1::MACInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_MACInfo(), pszFile, 0);
}

Purenetworks_HNAP1::NetworkStatsStruct::NetworkStatsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_NetworkStats)
{
}

Purenetworks_HNAP1::NetworkStatsStruct::NetworkStatsStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

enum Purenetworks_HNAP1::LANConnection Purenetworks_HNAP1::NetworkStatsStruct::get_PortName() const throw()
{
    return (enum Purenetworks_HNAP1::LANConnection)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_LANConnection(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortName, ACTUAL_CLIENT_DOM_MOD_Enum_PN_LANConnection__UNKNOWN__);
}

void Purenetworks_HNAP1::NetworkStatsStruct::set_PortName(enum Purenetworks_HNAP1::LANConnection value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_LANConnection(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortName, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_LANConnection)value);
}

HDK_XML_Long Purenetworks_HNAP1::NetworkStatsStruct::get_PacketsReceived() const throw()
{
    return HDK_XML_GetEx_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PacketsReceived, 0);
}

void Purenetworks_HNAP1::NetworkStatsStruct::set_PacketsReceived(HDK_XML_Long value) throw()
{
    (void)HDK_XML_Set_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PacketsReceived, value);
}

HDK_XML_Long Purenetworks_HNAP1::NetworkStatsStruct::get_PacketsSent() const throw()
{
    return HDK_XML_GetEx_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PacketsSent, 0);
}

void Purenetworks_HNAP1::NetworkStatsStruct::set_PacketsSent(HDK_XML_Long value) throw()
{
    (void)HDK_XML_Set_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PacketsSent, value);
}

HDK_XML_Long Purenetworks_HNAP1::NetworkStatsStruct::get_BytesReceived() const throw()
{
    return HDK_XML_GetEx_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_BytesReceived, 0);
}

void Purenetworks_HNAP1::NetworkStatsStruct::set_BytesReceived(HDK_XML_Long value) throw()
{
    (void)HDK_XML_Set_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_BytesReceived, value);
}

HDK_XML_Long Purenetworks_HNAP1::NetworkStatsStruct::get_BytesSent() const throw()
{
    return HDK_XML_GetEx_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_BytesSent, 0);
}

void Purenetworks_HNAP1::NetworkStatsStruct::set_BytesSent(HDK_XML_Long value) throw()
{
    (void)HDK_XML_Set_Long(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_BytesSent, value);
}

bool Purenetworks_HNAP1::NetworkStatsStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_NetworkStats(), pszFile);
}

bool Purenetworks_HNAP1::NetworkStatsStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_NetworkStats(), pszFile, 0);
}

Purenetworks_HNAP1::PortMappingStruct::PortMappingStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMapping)
{
}

Purenetworks_HNAP1::PortMappingStruct::PortMappingStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::PortMappingStruct::get_PortMappingDescription() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingDescription, 0);
}

void Purenetworks_HNAP1::PortMappingStruct::set_PortMappingDescription(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingDescription, value);
}

IPv4Address Purenetworks_HNAP1::PortMappingStruct::get_InternalClient() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalClient, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::PortMappingStruct::set_InternalClient(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalClient);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalClient, value);
}

enum Purenetworks_HNAP1::IPProtocol Purenetworks_HNAP1::PortMappingStruct::get_PortMappingProtocol() const throw()
{
    return (enum Purenetworks_HNAP1::IPProtocol)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_IPProtocol(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingProtocol, ACTUAL_CLIENT_DOM_MOD_Enum_PN_IPProtocol__UNKNOWN__);
}

void Purenetworks_HNAP1::PortMappingStruct::set_PortMappingProtocol(enum Purenetworks_HNAP1::IPProtocol value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_IPProtocol(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingProtocol, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_IPProtocol)value);
}

HDK_XML_Int Purenetworks_HNAP1::PortMappingStruct::get_ExternalPort() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ExternalPort, 0);
}

void Purenetworks_HNAP1::PortMappingStruct::set_ExternalPort(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ExternalPort, value);
}

HDK_XML_Int Purenetworks_HNAP1::PortMappingStruct::get_InternalPort() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalPort, 0);
}

void Purenetworks_HNAP1::PortMappingStruct::set_InternalPort(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalPort, value);
}

bool Purenetworks_HNAP1::PortMappingStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_PortMapping(), pszFile);
}

bool Purenetworks_HNAP1::PortMappingStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_PortMapping(), pszFile, 0);
}

Purenetworks_HNAP1::RadioFrequencyInfoStruct::RadioFrequencyInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioFrequencyInfo)
{
}

Purenetworks_HNAP1::RadioFrequencyInfoStruct::RadioFrequencyInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::RadioFrequencyInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::RadioFrequencyInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

Purenetworks_HNAP1::IntArray Purenetworks_HNAP1::RadioFrequencyInfoStruct::get_Frequencies() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequencies);
}

void Purenetworks_HNAP1::RadioFrequencyInfoStruct::set_Frequencies(const Purenetworks_HNAP1::IntArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequencies, value);
}

bool Purenetworks_HNAP1::RadioFrequencyInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_RadioFrequencyInfo(), pszFile);
}

bool Purenetworks_HNAP1::RadioFrequencyInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_RadioFrequencyInfo(), pszFile, 0);
}

Purenetworks_HNAP1::RadioInfoStruct::RadioInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioInfo)
{
}

Purenetworks_HNAP1::RadioInfoStruct::RadioInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::RadioInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::RadioInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::RadioInfoStruct::get_Frequency() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequency, 0);
}

void Purenetworks_HNAP1::RadioInfoStruct::set_Frequency(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequency, value);
}

Purenetworks_HNAP1::WiFiModeArray Purenetworks_HNAP1::RadioInfoStruct::get_SupportedModes() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SupportedModes);
}

void Purenetworks_HNAP1::RadioInfoStruct::set_SupportedModes(const Purenetworks_HNAP1::WiFiModeArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SupportedModes, value);
}

Purenetworks_HNAP1::IntArray Purenetworks_HNAP1::RadioInfoStruct::get_Channels() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channels);
}

void Purenetworks_HNAP1::RadioInfoStruct::set_Channels(const Purenetworks_HNAP1::IntArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channels, value);
}

Purenetworks_HNAP1::WideChannelArray Purenetworks_HNAP1::RadioInfoStruct::get_WideChannels() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_WideChannels);
}

void Purenetworks_HNAP1::RadioInfoStruct::set_WideChannels(const Purenetworks_HNAP1::WideChannelArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_WideChannels, value);
}

Purenetworks_HNAP1::SecurityInfoArray Purenetworks_HNAP1::RadioInfoStruct::get_SupportedSecurity() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SupportedSecurity);
}

void Purenetworks_HNAP1::RadioInfoStruct::set_SupportedSecurity(const Purenetworks_HNAP1::SecurityInfoArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SupportedSecurity, value);
}

bool Purenetworks_HNAP1::RadioInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_RadioInfo(), pszFile);
}

bool Purenetworks_HNAP1::RadioInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_RadioInfo(), pszFile, 0);
}

Purenetworks_HNAP1::SecurityInfoStruct::SecurityInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SecurityInfo)
{
}

Purenetworks_HNAP1::SecurityInfoStruct::SecurityInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

enum Purenetworks_HNAP1::WiFiSecurity Purenetworks_HNAP1::SecurityInfoStruct::get_SecurityType() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiSecurity)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiSecurity(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecurityType, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiSecurity__UNKNOWN__);
}

void Purenetworks_HNAP1::SecurityInfoStruct::set_SecurityType(enum Purenetworks_HNAP1::WiFiSecurity value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WiFiSecurity(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecurityType, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiSecurity)value);
}

Purenetworks_HNAP1::WiFiEncryptionArray Purenetworks_HNAP1::SecurityInfoStruct::get_Encryptions() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Encryptions);
}

void Purenetworks_HNAP1::SecurityInfoStruct::set_Encryptions(const Purenetworks_HNAP1::WiFiEncryptionArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Encryptions, value);
}

bool Purenetworks_HNAP1::SecurityInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_SecurityInfo(), pszFile);
}

bool Purenetworks_HNAP1::SecurityInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_SecurityInfo(), pszFile, 0);
}

Purenetworks_HNAP1::TaskExtensionStruct::TaskExtensionStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_TaskExtension)
{
}

Purenetworks_HNAP1::TaskExtensionStruct::TaskExtensionStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::TaskExtensionStruct::get_Name() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Name, 0);
}

void Purenetworks_HNAP1::TaskExtensionStruct::set_Name(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Name, value);
}

const char* Purenetworks_HNAP1::TaskExtensionStruct::get_URL() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_URL, 0);
}

void Purenetworks_HNAP1::TaskExtensionStruct::set_URL(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_URL, value);
}

enum Purenetworks_HNAP1::TaskExtType Purenetworks_HNAP1::TaskExtensionStruct::get_Type() const throw()
{
    return (enum Purenetworks_HNAP1::TaskExtType)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_TaskExtType(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, ACTUAL_CLIENT_DOM_MOD_Enum_PN_TaskExtType__UNKNOWN__);
}

void Purenetworks_HNAP1::TaskExtensionStruct::set_Type(enum Purenetworks_HNAP1::TaskExtType value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_TaskExtType(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_TaskExtType)value);
}

bool Purenetworks_HNAP1::TaskExtensionStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_TaskExtension(), pszFile);
}

bool Purenetworks_HNAP1::TaskExtensionStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_TaskExtension(), pszFile, 0);
}

Purenetworks_HNAP1::WLanChannelInfoStruct::WLanChannelInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanChannelInfo)
{
}

Purenetworks_HNAP1::WLanChannelInfoStruct::WLanChannelInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanChannelInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanChannelInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::WLanChannelInfoStruct::get_Channel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channel, 0);
}

void Purenetworks_HNAP1::WLanChannelInfoStruct::set_Channel(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channel, value);
}

bool Purenetworks_HNAP1::WLanChannelInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanChannelInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanChannelInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanChannelInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanChannelWidthInfoStruct::WLanChannelWidthInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanChannelWidthInfo)
{
}

Purenetworks_HNAP1::WLanChannelWidthInfoStruct::WLanChannelWidthInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanChannelWidthInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanChannelWidthInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::WLanChannelWidthInfoStruct::get_ChannelWidth() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ChannelWidth, 0);
}

void Purenetworks_HNAP1::WLanChannelWidthInfoStruct::set_ChannelWidth(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ChannelWidth, value);
}

bool Purenetworks_HNAP1::WLanChannelWidthInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanChannelWidthInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanChannelWidthInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanChannelWidthInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanEnabledInfoStruct::WLanEnabledInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanEnabledInfo)
{
}

Purenetworks_HNAP1::WLanEnabledInfoStruct::WLanEnabledInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanEnabledInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanEnabledInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

bool Purenetworks_HNAP1::WLanEnabledInfoStruct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

void Purenetworks_HNAP1::WLanEnabledInfoStruct::set_Enabled(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, (int)value);
}

bool Purenetworks_HNAP1::WLanEnabledInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanEnabledInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanEnabledInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanEnabledInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanEncryptionInfoStruct::WLanEncryptionInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanEncryptionInfo)
{
}

Purenetworks_HNAP1::WLanEncryptionInfoStruct::WLanEncryptionInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanEncryptionInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanEncryptionInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

enum Purenetworks_HNAP1::WiFiEncryption Purenetworks_HNAP1::WLanEncryptionInfoStruct::get_Encryption() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiEncryption)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiEncryption(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Encryption, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiEncryption__UNKNOWN__);
}

void Purenetworks_HNAP1::WLanEncryptionInfoStruct::set_Encryption(enum Purenetworks_HNAP1::WiFiEncryption value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WiFiEncryption(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Encryption, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiEncryption)value);
}

bool Purenetworks_HNAP1::WLanEncryptionInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanEncryptionInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanEncryptionInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanEncryptionInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanFrequencyInfoStruct::WLanFrequencyInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanFrequencyInfo)
{
}

Purenetworks_HNAP1::WLanFrequencyInfoStruct::WLanFrequencyInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanFrequencyInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanFrequencyInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::WLanFrequencyInfoStruct::get_Frequency() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequency, 0);
}

void Purenetworks_HNAP1::WLanFrequencyInfoStruct::set_Frequency(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequency, value);
}

bool Purenetworks_HNAP1::WLanFrequencyInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanFrequencyInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanFrequencyInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanFrequencyInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanKeyInfoStruct::WLanKeyInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanKeyInfo)
{
}

Purenetworks_HNAP1::WLanKeyInfoStruct::WLanKeyInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanKeyInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanKeyInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

const char* Purenetworks_HNAP1::WLanKeyInfoStruct::get_Key() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Key, 0);
}

void Purenetworks_HNAP1::WLanKeyInfoStruct::set_Key(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Key, value);
}

bool Purenetworks_HNAP1::WLanKeyInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanKeyInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanKeyInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanKeyInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::WLanKeyRenewalInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanKeyRenewalInfo)
{
}

Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::WLanKeyRenewalInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::get_KeyRenewal() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_KeyRenewal, 0);
}

void Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::set_KeyRenewal(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_KeyRenewal, value);
}

bool Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanKeyRenewalInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanKeyRenewalInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanKeyRenewalInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanMacAddressInfoStruct::WLanMacAddressInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanMacAddressInfo)
{
}

Purenetworks_HNAP1::WLanMacAddressInfoStruct::WLanMacAddressInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanMacAddressInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanMacAddressInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

MACAddress Purenetworks_HNAP1::WLanMacAddressInfoStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

void Purenetworks_HNAP1::WLanMacAddressInfoStruct::set_MacAddress(const MACAddress& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress);
        return;
    }
    (void)HDK_XML_Set_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, value);
}

bool Purenetworks_HNAP1::WLanMacAddressInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanMacAddressInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanMacAddressInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanMacAddressInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanModeInfoStruct::WLanModeInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanModeInfo)
{
}

Purenetworks_HNAP1::WLanModeInfoStruct::WLanModeInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanModeInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanModeInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

enum Purenetworks_HNAP1::WiFiMode Purenetworks_HNAP1::WLanModeInfoStruct::get_Mode() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiMode)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiMode(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Mode, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiMode__UNKNOWN__);
}

void Purenetworks_HNAP1::WLanModeInfoStruct::set_Mode(enum Purenetworks_HNAP1::WiFiMode value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WiFiMode(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Mode, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiMode)value);
}

bool Purenetworks_HNAP1::WLanModeInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanModeInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanModeInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanModeInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanQoSInfoStruct::WLanQoSInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanQoSInfo)
{
}

Purenetworks_HNAP1::WLanQoSInfoStruct::WLanQoSInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanQoSInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanQoSInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

bool Purenetworks_HNAP1::WLanQoSInfoStruct::get_QoS() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_QoS, 0);
}

void Purenetworks_HNAP1::WLanQoSInfoStruct::set_QoS(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_QoS, (int)value);
}

bool Purenetworks_HNAP1::WLanQoSInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanQoSInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanQoSInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanQoSInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::WLanRadiusIP1InfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanRadiusIP1Info)
{
}

Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::WLanRadiusIP1InfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

IPv4Address Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::get_RadiusIP1() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP1, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::set_RadiusIP1(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP1);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP1, value);
}

bool Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusIP1Info(), pszFile);
}

bool Purenetworks_HNAP1::WLanRadiusIP1InfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusIP1Info(), pszFile, 0);
}

Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::WLanRadiusIP2InfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanRadiusIP2Info)
{
}

Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::WLanRadiusIP2InfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

IPv4Address Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::get_RadiusIP2() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP2, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::set_RadiusIP2(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP2);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP2, value);
}

bool Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusIP2Info(), pszFile);
}

bool Purenetworks_HNAP1::WLanRadiusIP2InfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusIP2Info(), pszFile, 0);
}

Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::WLanRadiusPort1InfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanRadiusPort1Info)
{
}

Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::WLanRadiusPort1InfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::get_RadiusPort1() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort1, 0);
}

void Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::set_RadiusPort1(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort1, value);
}

bool Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusPort1Info(), pszFile);
}

bool Purenetworks_HNAP1::WLanRadiusPort1InfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusPort1Info(), pszFile, 0);
}

Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::WLanRadiusPort2InfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanRadiusPort2Info)
{
}

Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::WLanRadiusPort2InfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::get_RadiusPort2() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort2, 0);
}

void Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::set_RadiusPort2(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort2, value);
}

bool Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusPort2Info(), pszFile);
}

bool Purenetworks_HNAP1::WLanRadiusPort2InfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusPort2Info(), pszFile, 0);
}

Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::WLanRadiusSecret1InfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanRadiusSecret1Info)
{
}

Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::WLanRadiusSecret1InfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

const char* Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::get_RadiusSecret1() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret1, 0);
}

void Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::set_RadiusSecret1(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret1, value);
}

bool Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusSecret1Info(), pszFile);
}

bool Purenetworks_HNAP1::WLanRadiusSecret1InfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusSecret1Info(), pszFile, 0);
}

Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::WLanRadiusSecret2InfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanRadiusSecret2Info)
{
}

Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::WLanRadiusSecret2InfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

const char* Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::get_RadiusSecret2() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret2, 0);
}

void Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::set_RadiusSecret2(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret2, value);
}

bool Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusSecret2Info(), pszFile);
}

bool Purenetworks_HNAP1::WLanRadiusSecret2InfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanRadiusSecret2Info(), pszFile, 0);
}

Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::WLanSSIDBroadcastInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanSSIDBroadcastInfo)
{
}

Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::WLanSSIDBroadcastInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

bool Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::get_SSIDBroadcast() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSIDBroadcast, 0);
}

void Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::set_SSIDBroadcast(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSIDBroadcast, (int)value);
}

bool Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSSIDBroadcastInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanSSIDBroadcastInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSSIDBroadcastInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanSSIDInfoStruct::WLanSSIDInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanSSIDInfo)
{
}

Purenetworks_HNAP1::WLanSSIDInfoStruct::WLanSSIDInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanSSIDInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanSSIDInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

const char* Purenetworks_HNAP1::WLanSSIDInfoStruct::get_SSID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSID, 0);
}

void Purenetworks_HNAP1::WLanSSIDInfoStruct::set_SSID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSID, value);
}

bool Purenetworks_HNAP1::WLanSSIDInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSSIDInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanSSIDInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSSIDInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::WLanSecondaryChannelInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanSecondaryChannelInfo)
{
}

Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::WLanSecondaryChannelInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::get_SecondaryChannel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecondaryChannel, 0);
}

void Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::set_SecondaryChannel(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecondaryChannel, value);
}

bool Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSecondaryChannelInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanSecondaryChannelInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSecondaryChannelInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::WLanSecurityEnabledInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanSecurityEnabledInfo)
{
}

Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::WLanSecurityEnabledInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

bool Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

void Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::set_Enabled(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, (int)value);
}

bool Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSecurityEnabledInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanSecurityEnabledInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanSecurityEnabledInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WLanTypeInfoStruct::WLanTypeInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WLanTypeInfo)
{
}

Purenetworks_HNAP1::WLanTypeInfoStruct::WLanTypeInfoStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

const char* Purenetworks_HNAP1::WLanTypeInfoStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::WLanTypeInfoStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

enum Purenetworks_HNAP1::WiFiSecurity Purenetworks_HNAP1::WLanTypeInfoStruct::get_Type() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiSecurity)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiSecurity(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiSecurity__UNKNOWN__);
}

void Purenetworks_HNAP1::WLanTypeInfoStruct::set_Type(enum Purenetworks_HNAP1::WiFiSecurity value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WiFiSecurity(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiSecurity)value);
}

bool Purenetworks_HNAP1::WLanTypeInfoStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanTypeInfo(), pszFile);
}

bool Purenetworks_HNAP1::WLanTypeInfoStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WLanTypeInfo(), pszFile, 0);
}

Purenetworks_HNAP1::WideChannelStruct::WideChannelStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_WideChannel)
{
}

Purenetworks_HNAP1::WideChannelStruct::WideChannelStruct(HDK_XML_Struct* phdkstruct) throw() :
    Struct(phdkstruct)
{
}

HDK_XML_Int Purenetworks_HNAP1::WideChannelStruct::get_Channel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channel, 0);
}

void Purenetworks_HNAP1::WideChannelStruct::set_Channel(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channel, value);
}

Purenetworks_HNAP1::IntArray Purenetworks_HNAP1::WideChannelStruct::get_SecondaryChannels() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecondaryChannels);
}

void Purenetworks_HNAP1::WideChannelStruct::set_SecondaryChannels(const Purenetworks_HNAP1::IntArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecondaryChannels, value);
}

bool Purenetworks_HNAP1::WideChannelStruct::FromFile(const char* pszFile) throw()
{
    return HDK::Struct::DeserializeFromFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WideChannel(), pszFile);
}

bool Purenetworks_HNAP1::WideChannelStruct::ToFile(const char* pszFile) const throw()
{
    return HDK::Struct::SerializeToFile(ACTUAL_CLIENT_DOM_MOD_Schema_PN_WideChannel(), pszFile, 0);
}

Cisco_HNAP::GetServiceInfoStruct::GetServiceInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_GetServiceInfo)
{
}

const char* Cisco_HNAP::GetServiceInfoStruct::get_ServiceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_ServiceName, 0);
}

void Cisco_HNAP::GetServiceInfoStruct::set_ServiceName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_ServiceName, value);
}

Cisco_HNAP::GetServiceInfoResponseStruct::GetServiceInfoResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_GetServiceInfo)
{
}

enum Cisco_HNAP::GetServiceInfoResult Cisco_HNAP::GetServiceInfoResponseStruct::get_GetServiceInfoResult() const throw()
{
    return (enum Cisco_HNAP::GetServiceInfoResult)ACTUAL_CLIENT_DOM_MOD_GetEx_GetServiceInfoResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_GetServiceInfoResult, ACTUAL_CLIENT_DOM_MOD_Enum_GetServiceInfoResult__UNKNOWN__);
}

Cisco_HNAP::ServiceInfoStruct Cisco_HNAP::GetServiceInfoResponseStruct::get_Info() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_Info);
}

Cisco_HNAP::GetServicesStruct::GetServicesStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_GetServices)
{
}

Cisco_HNAP::GetServicesResponseStruct::GetServicesResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_GetServices)
{
}

enum Cisco_HNAP::GetServicesResult Cisco_HNAP::GetServicesResponseStruct::get_GetServicesResult() const throw()
{
    return (enum Cisco_HNAP::GetServicesResult)ACTUAL_CLIENT_DOM_MOD_GetEx_GetServicesResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_GetServicesResult, ACTUAL_CLIENT_DOM_MOD_Enum_GetServicesResult__UNKNOWN__);
}

Cisco_HNAP::ServiceInfoArray Cisco_HNAP::GetServicesResponseStruct::get_Services() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_Services);
}

Purenetworks_HNAP1::AddPortMappingStruct::AddPortMappingStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_AddPortMapping)
{
}

const char* Purenetworks_HNAP1::AddPortMappingStruct::get_PortMappingDescription() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingDescription, 0);
}

void Purenetworks_HNAP1::AddPortMappingStruct::set_PortMappingDescription(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingDescription, value);
}

IPv4Address Purenetworks_HNAP1::AddPortMappingStruct::get_InternalClient() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalClient, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::AddPortMappingStruct::set_InternalClient(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalClient);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalClient, value);
}

enum Purenetworks_HNAP1::IPProtocol Purenetworks_HNAP1::AddPortMappingStruct::get_PortMappingProtocol() const throw()
{
    return (enum Purenetworks_HNAP1::IPProtocol)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_IPProtocol(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingProtocol, ACTUAL_CLIENT_DOM_MOD_Enum_PN_IPProtocol__UNKNOWN__);
}

void Purenetworks_HNAP1::AddPortMappingStruct::set_PortMappingProtocol(enum Purenetworks_HNAP1::IPProtocol value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_IPProtocol(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingProtocol, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_IPProtocol)value);
}

HDK_XML_Int Purenetworks_HNAP1::AddPortMappingStruct::get_ExternalPort() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ExternalPort, 0);
}

void Purenetworks_HNAP1::AddPortMappingStruct::set_ExternalPort(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ExternalPort, value);
}

HDK_XML_Int Purenetworks_HNAP1::AddPortMappingStruct::get_InternalPort() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalPort, 0);
}

void Purenetworks_HNAP1::AddPortMappingStruct::set_InternalPort(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_InternalPort, value);
}

Purenetworks_HNAP1::AddPortMappingResponseStruct::AddPortMappingResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_AddPortMapping)
{
}

enum Purenetworks_HNAP1::AddPortMappingResult Purenetworks_HNAP1::AddPortMappingResponseStruct::get_AddPortMappingResult() const throw()
{
    return (enum Purenetworks_HNAP1::AddPortMappingResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_AddPortMappingResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AddPortMappingResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_AddPortMappingResult__UNKNOWN__);
}

Purenetworks_HNAP1::DeletePortMappingStruct::DeletePortMappingStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_DeletePortMapping)
{
}

enum Purenetworks_HNAP1::IPProtocol Purenetworks_HNAP1::DeletePortMappingStruct::get_PortMappingProtocol() const throw()
{
    return (enum Purenetworks_HNAP1::IPProtocol)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_IPProtocol(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingProtocol, ACTUAL_CLIENT_DOM_MOD_Enum_PN_IPProtocol__UNKNOWN__);
}

void Purenetworks_HNAP1::DeletePortMappingStruct::set_PortMappingProtocol(enum Purenetworks_HNAP1::IPProtocol value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_IPProtocol(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappingProtocol, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_IPProtocol)value);
}

HDK_XML_Int Purenetworks_HNAP1::DeletePortMappingStruct::get_ExternalPort() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ExternalPort, 0);
}

void Purenetworks_HNAP1::DeletePortMappingStruct::set_ExternalPort(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ExternalPort, value);
}

Purenetworks_HNAP1::DeletePortMappingResponseStruct::DeletePortMappingResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_DeletePortMapping)
{
}

enum Purenetworks_HNAP1::DeletePortMappingResult Purenetworks_HNAP1::DeletePortMappingResponseStruct::get_DeletePortMappingResult() const throw()
{
    return (enum Purenetworks_HNAP1::DeletePortMappingResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_DeletePortMappingResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeletePortMappingResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_DeletePortMappingResult__UNKNOWN__);
}

Purenetworks_HNAP1::DownloadSpeedTestStruct::DownloadSpeedTestStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_DownloadSpeedTest)
{
}

HDK_XML_Int Purenetworks_HNAP1::DownloadSpeedTestStruct::get_Bytes() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Bytes, 0);
}

void Purenetworks_HNAP1::DownloadSpeedTestStruct::set_Bytes(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Bytes, value);
}

HDK_XML_Int Purenetworks_HNAP1::DownloadSpeedTestStruct::get_BufferSize() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_BufferSize, 0);
}

void Purenetworks_HNAP1::DownloadSpeedTestStruct::set_BufferSize(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_BufferSize, value);
}

Purenetworks_HNAP1::DownloadSpeedTestResponseStruct::DownloadSpeedTestResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_DownloadSpeedTest)
{
}

enum Purenetworks_HNAP1::DownloadSpeedTestResult Purenetworks_HNAP1::DownloadSpeedTestResponseStruct::get_DownloadSpeedTestResult() const throw()
{
    return (enum Purenetworks_HNAP1::DownloadSpeedTestResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_DownloadSpeedTestResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DownloadSpeedTestResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_DownloadSpeedTestResult__UNKNOWN__);
}

const char* Purenetworks_HNAP1::DownloadSpeedTestResponseStruct::get_ByteStream() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ByteStream, 0);
}

Purenetworks_HNAP1::FirmwareUploadStruct::FirmwareUploadStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_FirmwareUpload)
{
}

Blob Purenetworks_HNAP1::FirmwareUploadStruct::get_Base64Image() const throw()
{
    unsigned int cbBlob = 0;
    char* pbBlob = HDK_XML_Get_Blob(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Base64Image, &cbBlob);
    return Blob(pbBlob, cbBlob);
}

void Purenetworks_HNAP1::FirmwareUploadStruct::set_Base64Image(const Blob& value) throw()
{
    (void)HDK_XML_Set_Blob(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Base64Image, value.get_Data(), value.get_Size());
}

Purenetworks_HNAP1::FirmwareUploadResponseStruct::FirmwareUploadResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_FirmwareUpload)
{
}

enum Purenetworks_HNAP1::FirmwareUploadResult Purenetworks_HNAP1::FirmwareUploadResponseStruct::get_FirmwareUploadResult() const throw()
{
    return (enum Purenetworks_HNAP1::FirmwareUploadResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_FirmwareUploadResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_FirmwareUploadResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_FirmwareUploadResult__UNKNOWN__);
}

Purenetworks_HNAP1::GetClientStatsStruct::GetClientStatsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetClientStats)
{
}

Purenetworks_HNAP1::GetClientStatsResponseStruct::GetClientStatsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetClientStats)
{
}

enum Purenetworks_HNAP1::GetClientStatsResult Purenetworks_HNAP1::GetClientStatsResponseStruct::get_GetClientStatsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetClientStatsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetClientStatsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetClientStatsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetClientStatsResult__UNKNOWN__);
}

Purenetworks_HNAP1::ClientStatArray Purenetworks_HNAP1::GetClientStatsResponseStruct::get_ClientStats() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ClientStats);
}

Purenetworks_HNAP1::GetConfigBlobStruct::GetConfigBlobStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetConfigBlob)
{
}

Purenetworks_HNAP1::GetConfigBlobResponseStruct::GetConfigBlobResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetConfigBlob)
{
}

enum Purenetworks_HNAP1::GetConfigBlobResult Purenetworks_HNAP1::GetConfigBlobResponseStruct::get_GetConfigBlobResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetConfigBlobResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetConfigBlobResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetConfigBlobResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetConfigBlobResult__UNKNOWN__);
}

Blob Purenetworks_HNAP1::GetConfigBlobResponseStruct::get_ConfigBlob() const throw()
{
    unsigned int cbBlob = 0;
    char* pbBlob = HDK_XML_Get_Blob(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ConfigBlob, &cbBlob);
    return Blob(pbBlob, cbBlob);
}

Purenetworks_HNAP1::GetConnectedDevicesStruct::GetConnectedDevicesStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetConnectedDevices)
{
}

Purenetworks_HNAP1::GetConnectedDevicesResponseStruct::GetConnectedDevicesResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetConnectedDevices)
{
}

enum Purenetworks_HNAP1::GetConnectedDevicesResult Purenetworks_HNAP1::GetConnectedDevicesResponseStruct::get_GetConnectedDevicesResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetConnectedDevicesResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetConnectedDevicesResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetConnectedDevicesResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetConnectedDevicesResult__UNKNOWN__);
}

Purenetworks_HNAP1::ConnectedClientArray Purenetworks_HNAP1::GetConnectedDevicesResponseStruct::get_ConnectedClients() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ConnectedClients);
}

Purenetworks_HNAP1::GetDeviceSettingsStruct::GetDeviceSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetDeviceSettings)
{
}

Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::GetDeviceSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetDeviceSettings)
{
}

enum Purenetworks_HNAP1::GetDeviceSettingsResult Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_GetDeviceSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetDeviceSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetDeviceSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetDeviceSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetDeviceSettingsResult__UNKNOWN__);
}

enum Purenetworks_HNAP1::DeviceType Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_Type() const throw()
{
    return (enum Purenetworks_HNAP1::DeviceType)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_DeviceType(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, ACTUAL_CLIENT_DOM_MOD_Enum_PN_DeviceType__UNKNOWN__);
}

const char* Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_DeviceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, 0);
}

const char* Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_VendorName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_VendorName, 0);
}

const char* Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_ModelDescription() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ModelDescription, 0);
}

const char* Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_ModelName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ModelName, 0);
}

const char* Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_FirmwareVersion() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_FirmwareVersion, 0);
}

const char* Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_PresentationURL() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PresentationURL, 0);
}

Purenetworks_HNAP1::StringArray Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_SOAPActions() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SOAPActions);
}

Purenetworks_HNAP1::StringArray Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_SubDeviceURLs() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SubDeviceURLs);
}

Purenetworks_HNAP1::TaskExtensionArray Purenetworks_HNAP1::GetDeviceSettingsResponseStruct::get_Tasks() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Tasks);
}

Purenetworks_HNAP1::GetDeviceSettings2Struct::GetDeviceSettings2Struct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetDeviceSettings2)
{
}

Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::GetDeviceSettings2ResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetDeviceSettings2)
{
}

enum Purenetworks_HNAP1::GetDeviceSettings2Result Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::get_GetDeviceSettings2Result() const throw()
{
    return (enum Purenetworks_HNAP1::GetDeviceSettings2Result)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetDeviceSettings2Result(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetDeviceSettings2Result, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetDeviceSettings2Result__UNKNOWN__);
}

const char* Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::get_SerialNumber() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SerialNumber, 0);
}

const char* Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::get_TimeZone() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_TimeZone, 0);
}

bool Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::get_AutoAdjustDST() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AutoAdjustDST, 0);
}

const char* Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::get_Locale() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Locale, 0);
}

Purenetworks_HNAP1::StringArray Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::get_SupportedLocales() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SupportedLocales);
}

bool Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct::get_SSL() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSL, 0);
}

Purenetworks_HNAP1::GetFirmwareSettingsStruct::GetFirmwareSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetFirmwareSettings)
{
}

Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::GetFirmwareSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetFirmwareSettings)
{
}

enum Purenetworks_HNAP1::GetFirmwareSettingsResult Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::get_GetFirmwareSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetFirmwareSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetFirmwareSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetFirmwareSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetFirmwareSettingsResult__UNKNOWN__);
}

const char* Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::get_VendorName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_VendorName, 0);
}

const char* Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::get_ModelName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ModelName, 0);
}

const char* Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::get_ModelRevision() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ModelRevision, 0);
}

const char* Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::get_FirmwareVersion() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_FirmwareVersion, 0);
}

time_t Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::get_FirmwareDate() const throw()
{
    return HDK_XML_GetEx_DateTime(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_FirmwareDate, 0);
}

Purenetworks_HNAP1::UpdateMethodArray Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct::get_UpdateMethods() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_UpdateMethods);
}

Purenetworks_HNAP1::GetMACFilters2Struct::GetMACFilters2Struct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetMACFilters2)
{
}

Purenetworks_HNAP1::GetMACFilters2ResponseStruct::GetMACFilters2ResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetMACFilters2)
{
}

enum Purenetworks_HNAP1::GetMACFilters2Result Purenetworks_HNAP1::GetMACFilters2ResponseStruct::get_GetMACFilters2Result() const throw()
{
    return (enum Purenetworks_HNAP1::GetMACFilters2Result)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetMACFilters2Result(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetMACFilters2Result, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetMACFilters2Result__UNKNOWN__);
}

bool Purenetworks_HNAP1::GetMACFilters2ResponseStruct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

bool Purenetworks_HNAP1::GetMACFilters2ResponseStruct::get_IsAllowList() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IsAllowList, 0);
}

Purenetworks_HNAP1::MACInfoArray Purenetworks_HNAP1::GetMACFilters2ResponseStruct::get_MACList() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MACList);
}

Purenetworks_HNAP1::GetNetworkStatsStruct::GetNetworkStatsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetNetworkStats)
{
}

Purenetworks_HNAP1::GetNetworkStatsResponseStruct::GetNetworkStatsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetNetworkStats)
{
}

enum Purenetworks_HNAP1::GetNetworkStatsResult Purenetworks_HNAP1::GetNetworkStatsResponseStruct::get_GetNetworkStatsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetNetworkStatsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetNetworkStatsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetNetworkStatsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetNetworkStatsResult__UNKNOWN__);
}

Purenetworks_HNAP1::NetworkStatsArray Purenetworks_HNAP1::GetNetworkStatsResponseStruct::get_Stats() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Stats);
}

Purenetworks_HNAP1::GetPortMappingsStruct::GetPortMappingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetPortMappings)
{
}

Purenetworks_HNAP1::GetPortMappingsResponseStruct::GetPortMappingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetPortMappings)
{
}

enum Purenetworks_HNAP1::GetPortMappingsResult Purenetworks_HNAP1::GetPortMappingsResponseStruct::get_GetPortMappingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetPortMappingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetPortMappingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetPortMappingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetPortMappingsResult__UNKNOWN__);
}

Purenetworks_HNAP1::PortMappingArray Purenetworks_HNAP1::GetPortMappingsResponseStruct::get_PortMappings() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_PortMappings);
}

Purenetworks_HNAP1::GetRouterLanSettings2Struct::GetRouterLanSettings2Struct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetRouterLanSettings2)
{
}

Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::GetRouterLanSettings2ResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetRouterLanSettings2)
{
}

enum Purenetworks_HNAP1::GetRouterLanSettings2Result Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_GetRouterLanSettings2Result() const throw()
{
    return (enum Purenetworks_HNAP1::GetRouterLanSettings2Result)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetRouterLanSettings2Result(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetRouterLanSettings2Result, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetRouterLanSettings2Result__UNKNOWN__);
}

IPv4Address Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_RouterIPAddress() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterIPAddress, HDK::IPv4Address::Blank());
}

IPv4Address Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_RouterSubnetMask() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterSubnetMask, HDK::IPv4Address::Blank());
}

bool Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_DHCPServerEnabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DHCPServerEnabled, 0);
}

IPv4Address Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_IPAddressFirst() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressFirst, HDK::IPv4Address::Blank());
}

IPv4Address Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_IPAddressLast() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressLast, HDK::IPv4Address::Blank());
}

HDK_XML_Int Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_LeaseTime() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_LeaseTime, 0);
}

Purenetworks_HNAP1::DHCPReservationArray Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct::get_DHCPReservations() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DHCPReservations);
}

Purenetworks_HNAP1::GetRouterSettingsStruct::GetRouterSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetRouterSettings)
{
}

Purenetworks_HNAP1::GetRouterSettingsResponseStruct::GetRouterSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetRouterSettings)
{
}

enum Purenetworks_HNAP1::GetRouterSettingsResult Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_GetRouterSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetRouterSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetRouterSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetRouterSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetRouterSettingsResult__UNKNOWN__);
}

bool Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_ManageRemote() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ManageRemote, 0);
}

bool Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_ManageWireless() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ManageWireless, 0);
}

HDK_XML_Int Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_RemotePort() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RemotePort, 0);
}

bool Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_RemoteSSL() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RemoteSSL, 0);
}

const char* Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_DomainName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DomainName, 0);
}

bool Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_WiredQoS() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_WiredQoS, 0);
}

const char* Purenetworks_HNAP1::GetRouterSettingsResponseStruct::get_WPSPin() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_WPSPin, 0);
}

Purenetworks_HNAP1::GetWLanRadioFrequenciesStruct::GetWLanRadioFrequenciesStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioFrequencies)
{
}

Purenetworks_HNAP1::GetWLanRadioFrequenciesResponseStruct::GetWLanRadioFrequenciesResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioFrequencies)
{
}

enum Purenetworks_HNAP1::GetWLanRadioFrequenciesResult Purenetworks_HNAP1::GetWLanRadioFrequenciesResponseStruct::get_GetWLanRadioFrequenciesResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetWLanRadioFrequenciesResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetWLanRadioFrequenciesResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioFrequenciesResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetWLanRadioFrequenciesResult__UNKNOWN__);
}

Purenetworks_HNAP1::RadioFrequencyInfoArray Purenetworks_HNAP1::GetWLanRadioFrequenciesResponseStruct::get_RadioFrequencyInfos() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioFrequencyInfos);
}

Purenetworks_HNAP1::GetWLanRadioSecurityStruct::GetWLanRadioSecurityStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioSecurity)
{
}

const char* Purenetworks_HNAP1::GetWLanRadioSecurityStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::GetWLanRadioSecurityStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::GetWLanRadioSecurityResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioSecurity)
{
}

enum Purenetworks_HNAP1::GetWLanRadioSecurityResult Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_GetWLanRadioSecurityResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetWLanRadioSecurityResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetWLanRadioSecurityResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioSecurityResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetWLanRadioSecurityResult__UNKNOWN__);
}

bool Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

enum Purenetworks_HNAP1::WiFiSecurity Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_Type() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiSecurity)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiSecurity(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiSecurity__UNKNOWN__);
}

enum Purenetworks_HNAP1::WiFiEncryption Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_Encryption() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiEncryption)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiEncryption(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Encryption, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiEncryption__UNKNOWN__);
}

const char* Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_Key() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Key, 0);
}

HDK_XML_Int Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_KeyRenewal() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_KeyRenewal, 0);
}

IPv4Address Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_RadiusIP1() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP1, HDK::IPv4Address::Blank());
}

HDK_XML_Int Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_RadiusPort1() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort1, 0);
}

const char* Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_RadiusSecret1() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret1, 0);
}

IPv4Address Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_RadiusIP2() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP2, HDK::IPv4Address::Blank());
}

HDK_XML_Int Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_RadiusPort2() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort2, 0);
}

const char* Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct::get_RadiusSecret2() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret2, 0);
}

Purenetworks_HNAP1::GetWLanRadioSettingsStruct::GetWLanRadioSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioSettings)
{
}

const char* Purenetworks_HNAP1::GetWLanRadioSettingsStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::GetWLanRadioSettingsStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::GetWLanRadioSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioSettings)
{
}

enum Purenetworks_HNAP1::GetWLanRadioSettingsResult Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_GetWLanRadioSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetWLanRadioSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetWLanRadioSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadioSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetWLanRadioSettingsResult__UNKNOWN__);
}

bool Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

enum Purenetworks_HNAP1::WiFiMode Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_Mode() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiMode)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiMode(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Mode, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiMode__UNKNOWN__);
}

MACAddress Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

const char* Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_SSID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSID, 0);
}

bool Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_SSIDBroadcast() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSIDBroadcast, 0);
}

HDK_XML_Int Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_ChannelWidth() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ChannelWidth, 0);
}

HDK_XML_Int Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_Channel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channel, 0);
}

HDK_XML_Int Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_SecondaryChannel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecondaryChannel, 0);
}

bool Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct::get_QoS() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_QoS, 0);
}

Purenetworks_HNAP1::GetWLanRadiosStruct::GetWLanRadiosStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadios)
{
}

Purenetworks_HNAP1::GetWLanRadiosResponseStruct::GetWLanRadiosResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadios)
{
}

enum Purenetworks_HNAP1::GetWLanRadiosResult Purenetworks_HNAP1::GetWLanRadiosResponseStruct::get_GetWLanRadiosResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetWLanRadiosResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetWLanRadiosResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWLanRadiosResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetWLanRadiosResult__UNKNOWN__);
}

Purenetworks_HNAP1::RadioInfoArray Purenetworks_HNAP1::GetWLanRadiosResponseStruct::get_RadioInfos() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioInfos);
}

Purenetworks_HNAP1::GetWanInfoStruct::GetWanInfoStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWanInfo)
{
}

Purenetworks_HNAP1::GetWanInfoResponseStruct::GetWanInfoResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWanInfo)
{
}

enum Purenetworks_HNAP1::GetWanInfoResult Purenetworks_HNAP1::GetWanInfoResponseStruct::get_GetWanInfoResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetWanInfoResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetWanInfoResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWanInfoResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetWanInfoResult__UNKNOWN__);
}

Purenetworks_HNAP1::WANTypeArray Purenetworks_HNAP1::GetWanInfoResponseStruct::get_SupportedTypes() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SupportedTypes);
}

enum Purenetworks_HNAP1::WANType Purenetworks_HNAP1::GetWanInfoResponseStruct::get_AutoDetectType() const throw()
{
    return (enum Purenetworks_HNAP1::WANType)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WANType(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AutoDetectType, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WANType__UNKNOWN__);
}

enum Purenetworks_HNAP1::WANStatus Purenetworks_HNAP1::GetWanInfoResponseStruct::get_Status() const throw()
{
    return (enum Purenetworks_HNAP1::WANStatus)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WANStatus(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Status, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WANStatus__UNKNOWN__);
}

Purenetworks_HNAP1::GetWanSettingsStruct::GetWanSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWanSettings)
{
}

Purenetworks_HNAP1::GetWanSettingsResponseStruct::GetWanSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWanSettings)
{
}

enum Purenetworks_HNAP1::GetWanSettingsResult Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_GetWanSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::GetWanSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_GetWanSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_GetWanSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_GetWanSettingsResult__UNKNOWN__);
}

enum Purenetworks_HNAP1::WANType Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_Type() const throw()
{
    return (enum Purenetworks_HNAP1::WANType)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WANType(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WANType__UNKNOWN__);
}

const char* Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_Username() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Username, 0);
}

const char* Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_Password() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Password, 0);
}

HDK_XML_Int Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_MaxIdleTime() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MaxIdleTime, 0);
}

HDK_XML_Int Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_MTU() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MTU, 0);
}

const char* Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_ServiceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ServiceName, 0);
}

bool Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_AutoReconnect() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AutoReconnect, 0);
}

IPv4Address Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_IPAddress() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddress, HDK::IPv4Address::Blank());
}

IPv4Address Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_SubnetMask() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SubnetMask, HDK::IPv4Address::Blank());
}

IPv4Address Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_Gateway() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Gateway, HDK::IPv4Address::Blank());
}

Purenetworks_HNAP1::DNSSettingsStruct Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_DNS() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DNS);
}

MACAddress Purenetworks_HNAP1::GetWanSettingsResponseStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

Purenetworks_HNAP1::IsDeviceReadyStruct::IsDeviceReadyStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_IsDeviceReady)
{
}

Purenetworks_HNAP1::IsDeviceReadyResponseStruct::IsDeviceReadyResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_IsDeviceReady)
{
}

enum Purenetworks_HNAP1::IsDeviceReadyResult Purenetworks_HNAP1::IsDeviceReadyResponseStruct::get_IsDeviceReadyResult() const throw()
{
    return (enum Purenetworks_HNAP1::IsDeviceReadyResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_IsDeviceReadyResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IsDeviceReadyResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_IsDeviceReadyResult__UNKNOWN__);
}

Purenetworks_HNAP1::RebootStruct::RebootStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_Reboot)
{
}

Purenetworks_HNAP1::RebootResponseStruct::RebootResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_Reboot)
{
}

enum Purenetworks_HNAP1::RebootResult Purenetworks_HNAP1::RebootResponseStruct::get_RebootResult() const throw()
{
    return (enum Purenetworks_HNAP1::RebootResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_RebootResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RebootResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_RebootResult__UNKNOWN__);
}

Purenetworks_HNAP1::RenewWanConnectionStruct::RenewWanConnectionStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_RenewWanConnection)
{
}

HDK_XML_Int Purenetworks_HNAP1::RenewWanConnectionStruct::get_RenewTimeout() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RenewTimeout, 0);
}

void Purenetworks_HNAP1::RenewWanConnectionStruct::set_RenewTimeout(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RenewTimeout, value);
}

Purenetworks_HNAP1::RenewWanConnectionResponseStruct::RenewWanConnectionResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_RenewWanConnection)
{
}

enum Purenetworks_HNAP1::RenewWanConnectionResult Purenetworks_HNAP1::RenewWanConnectionResponseStruct::get_RenewWanConnectionResult() const throw()
{
    return (enum Purenetworks_HNAP1::RenewWanConnectionResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_RenewWanConnectionResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RenewWanConnectionResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_RenewWanConnectionResult__UNKNOWN__);
}

Purenetworks_HNAP1::RestoreFactoryDefaultsStruct::RestoreFactoryDefaultsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_RestoreFactoryDefaults)
{
}

Purenetworks_HNAP1::RestoreFactoryDefaultsResponseStruct::RestoreFactoryDefaultsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_RestoreFactoryDefaults)
{
}

enum Purenetworks_HNAP1::RestoreFactoryDefaultsResult Purenetworks_HNAP1::RestoreFactoryDefaultsResponseStruct::get_RestoreFactoryDefaultsResult() const throw()
{
    return (enum Purenetworks_HNAP1::RestoreFactoryDefaultsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_RestoreFactoryDefaultsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RestoreFactoryDefaultsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_RestoreFactoryDefaultsResult__UNKNOWN__);
}

Purenetworks_HNAP1::SetAccessPointModeStruct::SetAccessPointModeStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetAccessPointMode)
{
}

bool Purenetworks_HNAP1::SetAccessPointModeStruct::get_IsAccessPoint() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IsAccessPoint, 0);
}

void Purenetworks_HNAP1::SetAccessPointModeStruct::set_IsAccessPoint(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IsAccessPoint, (int)value);
}

Purenetworks_HNAP1::SetAccessPointModeResponseStruct::SetAccessPointModeResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetAccessPointMode)
{
}

enum Purenetworks_HNAP1::SetAccessPointModeResult Purenetworks_HNAP1::SetAccessPointModeResponseStruct::get_SetAccessPointModeResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetAccessPointModeResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetAccessPointModeResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetAccessPointModeResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetAccessPointModeResult__UNKNOWN__);
}

IPv4Address Purenetworks_HNAP1::SetAccessPointModeResponseStruct::get_NewIPAddress() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_NewIPAddress, HDK::IPv4Address::Blank());
}

Purenetworks_HNAP1::SetConfigBlobStruct::SetConfigBlobStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetConfigBlob)
{
}

Blob Purenetworks_HNAP1::SetConfigBlobStruct::get_ConfigBlob() const throw()
{
    unsigned int cbBlob = 0;
    char* pbBlob = HDK_XML_Get_Blob(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ConfigBlob, &cbBlob);
    return Blob(pbBlob, cbBlob);
}

void Purenetworks_HNAP1::SetConfigBlobStruct::set_ConfigBlob(const Blob& value) throw()
{
    (void)HDK_XML_Set_Blob(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ConfigBlob, value.get_Data(), value.get_Size());
}

Purenetworks_HNAP1::SetConfigBlobResponseStruct::SetConfigBlobResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetConfigBlob)
{
}

enum Purenetworks_HNAP1::SetConfigBlobResult Purenetworks_HNAP1::SetConfigBlobResponseStruct::get_SetConfigBlobResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetConfigBlobResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetConfigBlobResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetConfigBlobResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetConfigBlobResult__UNKNOWN__);
}

Purenetworks_HNAP1::SetDeviceSettingsStruct::SetDeviceSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetDeviceSettings)
{
}

const char* Purenetworks_HNAP1::SetDeviceSettingsStruct::get_DeviceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, 0);
}

void Purenetworks_HNAP1::SetDeviceSettingsStruct::set_DeviceName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DeviceName, value);
}

const char* Purenetworks_HNAP1::SetDeviceSettingsStruct::get_AdminPassword() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AdminPassword, 0);
}

void Purenetworks_HNAP1::SetDeviceSettingsStruct::set_AdminPassword(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AdminPassword, value);
}

Purenetworks_HNAP1::SetDeviceSettingsResponseStruct::SetDeviceSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetDeviceSettings)
{
}

enum Purenetworks_HNAP1::SetDeviceSettingsResult Purenetworks_HNAP1::SetDeviceSettingsResponseStruct::get_SetDeviceSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetDeviceSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetDeviceSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetDeviceSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetDeviceSettingsResult__UNKNOWN__);
}

Purenetworks_HNAP1::SetDeviceSettings2Struct::SetDeviceSettings2Struct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetDeviceSettings2)
{
}

const char* Purenetworks_HNAP1::SetDeviceSettings2Struct::get_Username() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Username, 0);
}

void Purenetworks_HNAP1::SetDeviceSettings2Struct::set_Username(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Username, value);
}

const char* Purenetworks_HNAP1::SetDeviceSettings2Struct::get_TimeZone() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_TimeZone, 0);
}

void Purenetworks_HNAP1::SetDeviceSettings2Struct::set_TimeZone(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_TimeZone, value);
}

bool Purenetworks_HNAP1::SetDeviceSettings2Struct::get_AutoAdjustDST() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AutoAdjustDST, 0);
}

void Purenetworks_HNAP1::SetDeviceSettings2Struct::set_AutoAdjustDST(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AutoAdjustDST, (int)value);
}

const char* Purenetworks_HNAP1::SetDeviceSettings2Struct::get_Locale() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Locale, 0);
}

void Purenetworks_HNAP1::SetDeviceSettings2Struct::set_Locale(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Locale, value);
}

bool Purenetworks_HNAP1::SetDeviceSettings2Struct::get_SSL() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSL, 0);
}

void Purenetworks_HNAP1::SetDeviceSettings2Struct::set_SSL(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSL, (int)value);
}

Purenetworks_HNAP1::SetDeviceSettings2ResponseStruct::SetDeviceSettings2ResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetDeviceSettings2)
{
}

enum Purenetworks_HNAP1::SetDeviceSettings2Result Purenetworks_HNAP1::SetDeviceSettings2ResponseStruct::get_SetDeviceSettings2Result() const throw()
{
    return (enum Purenetworks_HNAP1::SetDeviceSettings2Result)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetDeviceSettings2Result(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetDeviceSettings2Result, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetDeviceSettings2Result__UNKNOWN__);
}

Purenetworks_HNAP1::SetMACFilters2Struct::SetMACFilters2Struct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetMACFilters2)
{
}

bool Purenetworks_HNAP1::SetMACFilters2Struct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

void Purenetworks_HNAP1::SetMACFilters2Struct::set_Enabled(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, (int)value);
}

bool Purenetworks_HNAP1::SetMACFilters2Struct::get_IsAllowList() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IsAllowList, 0);
}

void Purenetworks_HNAP1::SetMACFilters2Struct::set_IsAllowList(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IsAllowList, (int)value);
}

Purenetworks_HNAP1::MACInfoArray Purenetworks_HNAP1::SetMACFilters2Struct::get_MACList() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MACList);
}

void Purenetworks_HNAP1::SetMACFilters2Struct::set_MACList(const Purenetworks_HNAP1::MACInfoArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MACList, value);
}

Purenetworks_HNAP1::SetMACFilters2ResponseStruct::SetMACFilters2ResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetMACFilters2)
{
}

enum Purenetworks_HNAP1::SetMACFilters2Result Purenetworks_HNAP1::SetMACFilters2ResponseStruct::get_SetMACFilters2Result() const throw()
{
    return (enum Purenetworks_HNAP1::SetMACFilters2Result)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetMACFilters2Result(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetMACFilters2Result, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetMACFilters2Result__UNKNOWN__);
}

Purenetworks_HNAP1::SetRouterLanSettings2Struct::SetRouterLanSettings2Struct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetRouterLanSettings2)
{
}

IPv4Address Purenetworks_HNAP1::SetRouterLanSettings2Struct::get_RouterIPAddress() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterIPAddress, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetRouterLanSettings2Struct::set_RouterIPAddress(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterIPAddress);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterIPAddress, value);
}

IPv4Address Purenetworks_HNAP1::SetRouterLanSettings2Struct::get_RouterSubnetMask() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterSubnetMask, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetRouterLanSettings2Struct::set_RouterSubnetMask(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterSubnetMask);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RouterSubnetMask, value);
}

bool Purenetworks_HNAP1::SetRouterLanSettings2Struct::get_DHCPServerEnabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DHCPServerEnabled, 0);
}

void Purenetworks_HNAP1::SetRouterLanSettings2Struct::set_DHCPServerEnabled(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DHCPServerEnabled, (int)value);
}

IPv4Address Purenetworks_HNAP1::SetRouterLanSettings2Struct::get_IPAddressFirst() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressFirst, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetRouterLanSettings2Struct::set_IPAddressFirst(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressFirst);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressFirst, value);
}

IPv4Address Purenetworks_HNAP1::SetRouterLanSettings2Struct::get_IPAddressLast() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressLast, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetRouterLanSettings2Struct::set_IPAddressLast(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressLast);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddressLast, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetRouterLanSettings2Struct::get_LeaseTime() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_LeaseTime, 0);
}

void Purenetworks_HNAP1::SetRouterLanSettings2Struct::set_LeaseTime(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_LeaseTime, value);
}

Purenetworks_HNAP1::DHCPReservationArray Purenetworks_HNAP1::SetRouterLanSettings2Struct::get_DHCPReservations() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DHCPReservations);
}

void Purenetworks_HNAP1::SetRouterLanSettings2Struct::set_DHCPReservations(const Purenetworks_HNAP1::DHCPReservationArray& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DHCPReservations, value);
}

Purenetworks_HNAP1::SetRouterLanSettings2ResponseStruct::SetRouterLanSettings2ResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetRouterLanSettings2)
{
}

enum Purenetworks_HNAP1::SetRouterLanSettings2Result Purenetworks_HNAP1::SetRouterLanSettings2ResponseStruct::get_SetRouterLanSettings2Result() const throw()
{
    return (enum Purenetworks_HNAP1::SetRouterLanSettings2Result)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetRouterLanSettings2Result(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetRouterLanSettings2Result, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetRouterLanSettings2Result__UNKNOWN__);
}

Purenetworks_HNAP1::SetRouterSettingsStruct::SetRouterSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetRouterSettings)
{
}

bool Purenetworks_HNAP1::SetRouterSettingsStruct::get_ManageRemote() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ManageRemote, 0);
}

void Purenetworks_HNAP1::SetRouterSettingsStruct::set_ManageRemote(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ManageRemote, (int)value);
}

bool Purenetworks_HNAP1::SetRouterSettingsStruct::get_ManageWireless() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ManageWireless, 0);
}

void Purenetworks_HNAP1::SetRouterSettingsStruct::set_ManageWireless(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ManageWireless, (int)value);
}

HDK_XML_Int Purenetworks_HNAP1::SetRouterSettingsStruct::get_RemotePort() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RemotePort, 0);
}

void Purenetworks_HNAP1::SetRouterSettingsStruct::set_RemotePort(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RemotePort, value);
}

bool Purenetworks_HNAP1::SetRouterSettingsStruct::get_RemoteSSL() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RemoteSSL, 0);
}

void Purenetworks_HNAP1::SetRouterSettingsStruct::set_RemoteSSL(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RemoteSSL, (int)value);
}

const char* Purenetworks_HNAP1::SetRouterSettingsStruct::get_DomainName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DomainName, 0);
}

void Purenetworks_HNAP1::SetRouterSettingsStruct::set_DomainName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DomainName, value);
}

bool Purenetworks_HNAP1::SetRouterSettingsStruct::get_WiredQoS() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_WiredQoS, 0);
}

void Purenetworks_HNAP1::SetRouterSettingsStruct::set_WiredQoS(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_WiredQoS, (int)value);
}

Purenetworks_HNAP1::SetRouterSettingsResponseStruct::SetRouterSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetRouterSettings)
{
}

enum Purenetworks_HNAP1::SetRouterSettingsResult Purenetworks_HNAP1::SetRouterSettingsResponseStruct::get_SetRouterSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetRouterSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetRouterSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetRouterSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetRouterSettingsResult__UNKNOWN__);
}

Purenetworks_HNAP1::SetWLanRadioFrequencyStruct::SetWLanRadioFrequencyStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioFrequency)
{
}

const char* Purenetworks_HNAP1::SetWLanRadioFrequencyStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::SetWLanRadioFrequencyStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWLanRadioFrequencyStruct::get_Frequency() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequency, 0);
}

void Purenetworks_HNAP1::SetWLanRadioFrequencyStruct::set_Frequency(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Frequency, value);
}

Purenetworks_HNAP1::SetWLanRadioFrequencyResponseStruct::SetWLanRadioFrequencyResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioFrequency)
{
}

enum Purenetworks_HNAP1::SetWLanRadioFrequencyResult Purenetworks_HNAP1::SetWLanRadioFrequencyResponseStruct::get_SetWLanRadioFrequencyResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetWLanRadioFrequencyResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetWLanRadioFrequencyResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioFrequencyResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetWLanRadioFrequencyResult__UNKNOWN__);
}

Purenetworks_HNAP1::SetWLanRadioSecurityStruct::SetWLanRadioSecurityStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioSecurity)
{
}

const char* Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

bool Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_Enabled(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, (int)value);
}

enum Purenetworks_HNAP1::WiFiSecurity Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_Type() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiSecurity)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiSecurity(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiSecurity__UNKNOWN__);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_Type(enum Purenetworks_HNAP1::WiFiSecurity value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WiFiSecurity(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiSecurity)value);
}

enum Purenetworks_HNAP1::WiFiEncryption Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_Encryption() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiEncryption)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiEncryption(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Encryption, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiEncryption__UNKNOWN__);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_Encryption(enum Purenetworks_HNAP1::WiFiEncryption value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WiFiEncryption(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Encryption, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiEncryption)value);
}

const char* Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_Key() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Key, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_Key(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Key, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_KeyRenewal() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_KeyRenewal, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_KeyRenewal(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_KeyRenewal, value);
}

IPv4Address Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_RadiusIP1() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP1, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_RadiusIP1(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP1);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP1, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_RadiusPort1() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort1, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_RadiusPort1(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort1, value);
}

const char* Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_RadiusSecret1() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret1, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_RadiusSecret1(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret1, value);
}

IPv4Address Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_RadiusIP2() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP2, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_RadiusIP2(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP2);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusIP2, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_RadiusPort2() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort2, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_RadiusPort2(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusPort2, value);
}

const char* Purenetworks_HNAP1::SetWLanRadioSecurityStruct::get_RadiusSecret2() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret2, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSecurityStruct::set_RadiusSecret2(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadiusSecret2, value);
}

Purenetworks_HNAP1::SetWLanRadioSecurityResponseStruct::SetWLanRadioSecurityResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioSecurity)
{
}

enum Purenetworks_HNAP1::SetWLanRadioSecurityResult Purenetworks_HNAP1::SetWLanRadioSecurityResponseStruct::get_SetWLanRadioSecurityResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetWLanRadioSecurityResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetWLanRadioSecurityResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioSecurityResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetWLanRadioSecurityResult__UNKNOWN__);
}

Purenetworks_HNAP1::SetWLanRadioSettingsStruct::SetWLanRadioSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioSettings)
{
}

const char* Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_RadioID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_RadioID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_RadioID, value);
}

bool Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_Enabled() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_Enabled(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Enabled, (int)value);
}

enum Purenetworks_HNAP1::WiFiMode Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_Mode() const throw()
{
    return (enum Purenetworks_HNAP1::WiFiMode)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WiFiMode(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Mode, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiMode__UNKNOWN__);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_Mode(enum Purenetworks_HNAP1::WiFiMode value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WiFiMode(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Mode, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WiFiMode)value);
}

const char* Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_SSID() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSID, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_SSID(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSID, value);
}

bool Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_SSIDBroadcast() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSIDBroadcast, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_SSIDBroadcast(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SSIDBroadcast, (int)value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_ChannelWidth() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ChannelWidth, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_ChannelWidth(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ChannelWidth, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_Channel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channel, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_Channel(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Channel, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_SecondaryChannel() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecondaryChannel, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_SecondaryChannel(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SecondaryChannel, value);
}

bool Purenetworks_HNAP1::SetWLanRadioSettingsStruct::get_QoS() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_QoS, 0);
}

void Purenetworks_HNAP1::SetWLanRadioSettingsStruct::set_QoS(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_QoS, (int)value);
}

Purenetworks_HNAP1::SetWLanRadioSettingsResponseStruct::SetWLanRadioSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioSettings)
{
}

enum Purenetworks_HNAP1::SetWLanRadioSettingsResult Purenetworks_HNAP1::SetWLanRadioSettingsResponseStruct::get_SetWLanRadioSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetWLanRadioSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetWLanRadioSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWLanRadioSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetWLanRadioSettingsResult__UNKNOWN__);
}

Purenetworks_HNAP1::SetWanSettingsStruct::SetWanSettingsStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWanSettings)
{
}

enum Purenetworks_HNAP1::WANType Purenetworks_HNAP1::SetWanSettingsStruct::get_Type() const throw()
{
    return (enum Purenetworks_HNAP1::WANType)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_WANType(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, ACTUAL_CLIENT_DOM_MOD_Enum_PN_WANType__UNKNOWN__);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_Type(enum Purenetworks_HNAP1::WANType value) throw()
{
    (void)ACTUAL_CLIENT_DOM_MOD_Set_PN_WANType(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Type, (ACTUAL_CLIENT_DOM_MOD_Enum_PN_WANType)value);
}

const char* Purenetworks_HNAP1::SetWanSettingsStruct::get_Username() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Username, 0);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_Username(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Username, value);
}

const char* Purenetworks_HNAP1::SetWanSettingsStruct::get_Password() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Password, 0);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_Password(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Password, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWanSettingsStruct::get_MaxIdleTime() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MaxIdleTime, 0);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_MaxIdleTime(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MaxIdleTime, value);
}

const char* Purenetworks_HNAP1::SetWanSettingsStruct::get_ServiceName() const throw()
{
    return HDK_XML_GetEx_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ServiceName, 0);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_ServiceName(const char* value) throw()
{
    (void)HDK_XML_Set_String(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_ServiceName, value);
}

bool Purenetworks_HNAP1::SetWanSettingsStruct::get_AutoReconnect() const throw()
{
    return 0 != HDK_XML_GetEx_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AutoReconnect, 0);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_AutoReconnect(bool value) throw()
{
    (void)HDK_XML_Set_Bool(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_AutoReconnect, (int)value);
}

IPv4Address Purenetworks_HNAP1::SetWanSettingsStruct::get_IPAddress() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddress, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_IPAddress(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddress);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_IPAddress, value);
}

IPv4Address Purenetworks_HNAP1::SetWanSettingsStruct::get_SubnetMask() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SubnetMask, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_SubnetMask(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SubnetMask);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SubnetMask, value);
}

IPv4Address Purenetworks_HNAP1::SetWanSettingsStruct::get_Gateway() const throw()
{
    return HDK_XML_GetEx_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Gateway, HDK::IPv4Address::Blank());
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_Gateway(const IPv4Address& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Gateway);
        return;
    }
    (void)HDK_XML_Set_IPAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_Gateway, value);
}

Purenetworks_HNAP1::DNSSettingsStruct Purenetworks_HNAP1::SetWanSettingsStruct::get_DNS() const throw()
{
    return HDK_XML_Get_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DNS);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_DNS(const Purenetworks_HNAP1::DNSSettingsStruct& value) throw()
{
    (void)HDK_XML_SetEx_Struct(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_DNS, value);
}

MACAddress Purenetworks_HNAP1::SetWanSettingsStruct::get_MacAddress() const throw()
{
    return HDK_XML_GetEx_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, HDK::MACAddress::Blank());
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_MacAddress(const MACAddress& value) throw()
{
    if (value.IsBlank())
    {
        (void)HDK_XML_Set_Blank(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress);
        return;
    }
    (void)HDK_XML_Set_MACAddress(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MacAddress, value);
}

HDK_XML_Int Purenetworks_HNAP1::SetWanSettingsStruct::get_MTU() const throw()
{
    return HDK_XML_GetEx_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MTU, 0);
}

void Purenetworks_HNAP1::SetWanSettingsStruct::set_MTU(HDK_XML_Int value) throw()
{
    (void)HDK_XML_Set_Int(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_MTU, value);
}

Purenetworks_HNAP1::SetWanSettingsResponseStruct::SetWanSettingsResponseStruct() throw() :
    Struct(ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWanSettings)
{
}

enum Purenetworks_HNAP1::SetWanSettingsResult Purenetworks_HNAP1::SetWanSettingsResponseStruct::get_SetWanSettingsResult() const throw()
{
    return (enum Purenetworks_HNAP1::SetWanSettingsResult)ACTUAL_CLIENT_DOM_MOD_GetEx_PN_SetWanSettingsResult(GetStruct(), ACTUAL_CLIENT_DOM_MOD_Element_PN_SetWanSettingsResult, ACTUAL_CLIENT_DOM_MOD_Enum_PN_SetWanSettingsResult__UNKNOWN__);
}

bool HDK::InitializeClient() throw()
{
    return !!HDK_CLI_Init();
}

void HDK::UninitializeClient() throw()
{
    HDK_CLI_Cleanup();
}

HDK::ClientError Cisco_HNAP::GetServiceInfo
(
    HDK::ITarget* pTarget,
    const Cisco_HNAP::GetServiceInfoStruct & input,
    Cisco_HNAP::GetServiceInfoResponseStruct & output,
    enum Cisco_HNAP::GetServiceInfoResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_GetServiceInfo,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_GetServiceInfo);

    // Get the result value.
    enum Cisco_HNAP::GetServiceInfoResult result = output.get_GetServiceInfoResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Cisco_HNAP::GetServices
(
    HDK::ITarget* pTarget,
    Cisco_HNAP::GetServicesResponseStruct & output,
    enum Cisco_HNAP::GetServicesResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Cisco_HNAP::GetServicesStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_GetServices,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_GetServices);

    // Get the result value.
    enum Cisco_HNAP::GetServicesResult result = output.get_GetServicesResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::AddPortMapping
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::AddPortMappingStruct & input,
    enum Purenetworks_HNAP1::AddPortMappingResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::AddPortMappingResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_AddPortMapping,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_AddPortMapping);

    // Get the result value.
    enum Purenetworks_HNAP1::AddPortMappingResult result = output.get_AddPortMappingResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::DeletePortMapping
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::DeletePortMappingStruct & input,
    enum Purenetworks_HNAP1::DeletePortMappingResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::DeletePortMappingResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_DeletePortMapping,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_DeletePortMapping);

    // Get the result value.
    enum Purenetworks_HNAP1::DeletePortMappingResult result = output.get_DeletePortMappingResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::DownloadSpeedTest
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::DownloadSpeedTestStruct & input,
    Purenetworks_HNAP1::DownloadSpeedTestResponseStruct & output,
    enum Purenetworks_HNAP1::DownloadSpeedTestResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_DownloadSpeedTest,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_DownloadSpeedTest);

    // Get the result value.
    enum Purenetworks_HNAP1::DownloadSpeedTestResult result = output.get_DownloadSpeedTestResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::FirmwareUpload
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::FirmwareUploadStruct & input,
    enum Purenetworks_HNAP1::FirmwareUploadResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::FirmwareUploadResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_FirmwareUpload,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_FirmwareUpload);

    // Get the result value.
    enum Purenetworks_HNAP1::FirmwareUploadResult result = output.get_FirmwareUploadResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetClientStats
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetClientStatsResponseStruct & output,
    enum Purenetworks_HNAP1::GetClientStatsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetClientStatsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetClientStats,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetClientStats);

    // Get the result value.
    enum Purenetworks_HNAP1::GetClientStatsResult result = output.get_GetClientStatsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetConfigBlob
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetConfigBlobResponseStruct & output,
    enum Purenetworks_HNAP1::GetConfigBlobResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetConfigBlobStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetConfigBlob,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetConfigBlob);

    // Get the result value.
    enum Purenetworks_HNAP1::GetConfigBlobResult result = output.get_GetConfigBlobResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetConnectedDevices
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetConnectedDevicesResponseStruct & output,
    enum Purenetworks_HNAP1::GetConnectedDevicesResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetConnectedDevicesStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetConnectedDevices,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetConnectedDevices);

    // Get the result value.
    enum Purenetworks_HNAP1::GetConnectedDevicesResult result = output.get_GetConnectedDevicesResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetDeviceSettings
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetDeviceSettingsResponseStruct & output,
    enum Purenetworks_HNAP1::GetDeviceSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetDeviceSettingsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetDeviceSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetDeviceSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::GetDeviceSettingsResult result = output.get_GetDeviceSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetDeviceSettings_GET
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetDeviceSettingsResponseStruct & output,
    enum Purenetworks_HNAP1::GetDeviceSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetDeviceSettingsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_GET_PN_GetDeviceSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_GET_PN_GetDeviceSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::GetDeviceSettingsResult result = output.get_GetDeviceSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetDeviceSettings2
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetDeviceSettings2ResponseStruct & output,
    enum Purenetworks_HNAP1::GetDeviceSettings2Result* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetDeviceSettings2Struct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetDeviceSettings2,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetDeviceSettings2);

    // Get the result value.
    enum Purenetworks_HNAP1::GetDeviceSettings2Result result = output.get_GetDeviceSettings2Result();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetFirmwareSettings
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetFirmwareSettingsResponseStruct & output,
    enum Purenetworks_HNAP1::GetFirmwareSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetFirmwareSettingsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetFirmwareSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetFirmwareSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::GetFirmwareSettingsResult result = output.get_GetFirmwareSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetMACFilters2
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetMACFilters2ResponseStruct & output,
    enum Purenetworks_HNAP1::GetMACFilters2Result* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetMACFilters2Struct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetMACFilters2,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetMACFilters2);

    // Get the result value.
    enum Purenetworks_HNAP1::GetMACFilters2Result result = output.get_GetMACFilters2Result();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetNetworkStats
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetNetworkStatsResponseStruct & output,
    enum Purenetworks_HNAP1::GetNetworkStatsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetNetworkStatsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetNetworkStats,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetNetworkStats);

    // Get the result value.
    enum Purenetworks_HNAP1::GetNetworkStatsResult result = output.get_GetNetworkStatsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetPortMappings
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetPortMappingsResponseStruct & output,
    enum Purenetworks_HNAP1::GetPortMappingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetPortMappingsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetPortMappings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetPortMappings);

    // Get the result value.
    enum Purenetworks_HNAP1::GetPortMappingsResult result = output.get_GetPortMappingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetRouterLanSettings2
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetRouterLanSettings2ResponseStruct & output,
    enum Purenetworks_HNAP1::GetRouterLanSettings2Result* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetRouterLanSettings2Struct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetRouterLanSettings2,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetRouterLanSettings2);

    // Get the result value.
    enum Purenetworks_HNAP1::GetRouterLanSettings2Result result = output.get_GetRouterLanSettings2Result();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetRouterSettings
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetRouterSettingsResponseStruct & output,
    enum Purenetworks_HNAP1::GetRouterSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetRouterSettingsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetRouterSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetRouterSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::GetRouterSettingsResult result = output.get_GetRouterSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetWLanRadioFrequencies
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetWLanRadioFrequenciesResponseStruct & output,
    enum Purenetworks_HNAP1::GetWLanRadioFrequenciesResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetWLanRadioFrequenciesStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadioFrequencies,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadioFrequencies);

    // Get the result value.
    enum Purenetworks_HNAP1::GetWLanRadioFrequenciesResult result = output.get_GetWLanRadioFrequenciesResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetWLanRadioSecurity
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::GetWLanRadioSecurityStruct & input,
    Purenetworks_HNAP1::GetWLanRadioSecurityResponseStruct & output,
    enum Purenetworks_HNAP1::GetWLanRadioSecurityResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadioSecurity,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadioSecurity);

    // Get the result value.
    enum Purenetworks_HNAP1::GetWLanRadioSecurityResult result = output.get_GetWLanRadioSecurityResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetWLanRadioSettings
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::GetWLanRadioSettingsStruct & input,
    Purenetworks_HNAP1::GetWLanRadioSettingsResponseStruct & output,
    enum Purenetworks_HNAP1::GetWLanRadioSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadioSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadioSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::GetWLanRadioSettingsResult result = output.get_GetWLanRadioSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetWLanRadios
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetWLanRadiosResponseStruct & output,
    enum Purenetworks_HNAP1::GetWLanRadiosResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetWLanRadiosStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadios,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWLanRadios);

    // Get the result value.
    enum Purenetworks_HNAP1::GetWLanRadiosResult result = output.get_GetWLanRadiosResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetWanInfo
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetWanInfoResponseStruct & output,
    enum Purenetworks_HNAP1::GetWanInfoResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetWanInfoStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWanInfo,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWanInfo);

    // Get the result value.
    enum Purenetworks_HNAP1::GetWanInfoResult result = output.get_GetWanInfoResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::GetWanSettings
(
    HDK::ITarget* pTarget,
    Purenetworks_HNAP1::GetWanSettingsResponseStruct & output,
    enum Purenetworks_HNAP1::GetWanSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::GetWanSettingsStruct input;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWanSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_GetWanSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::GetWanSettingsResult result = output.get_GetWanSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::IsDeviceReady
(
    HDK::ITarget* pTarget,
    enum Purenetworks_HNAP1::IsDeviceReadyResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::IsDeviceReadyStruct input;

    Purenetworks_HNAP1::IsDeviceReadyResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_IsDeviceReady,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_IsDeviceReady);

    // Get the result value.
    enum Purenetworks_HNAP1::IsDeviceReadyResult result = output.get_IsDeviceReadyResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::Reboot
(
    HDK::ITarget* pTarget,
    enum Purenetworks_HNAP1::RebootResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::RebootStruct input;

    Purenetworks_HNAP1::RebootResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_Reboot,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_Reboot);

    // Get the result value.
    enum Purenetworks_HNAP1::RebootResult result = output.get_RebootResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::RenewWanConnection
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::RenewWanConnectionStruct & input,
    enum Purenetworks_HNAP1::RenewWanConnectionResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::RenewWanConnectionResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_RenewWanConnection,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_RenewWanConnection);

    // Get the result value.
    enum Purenetworks_HNAP1::RenewWanConnectionResult result = output.get_RenewWanConnectionResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::RestoreFactoryDefaults
(
    HDK::ITarget* pTarget,
    enum Purenetworks_HNAP1::RestoreFactoryDefaultsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }
    Purenetworks_HNAP1::RestoreFactoryDefaultsStruct input;

    Purenetworks_HNAP1::RestoreFactoryDefaultsResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_RestoreFactoryDefaults,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_RestoreFactoryDefaults);

    // Get the result value.
    enum Purenetworks_HNAP1::RestoreFactoryDefaultsResult result = output.get_RestoreFactoryDefaultsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetAccessPointMode
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetAccessPointModeStruct & input,
    Purenetworks_HNAP1::SetAccessPointModeResponseStruct & output,
    enum Purenetworks_HNAP1::SetAccessPointModeResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetAccessPointMode,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetAccessPointMode);

    // Get the result value.
    enum Purenetworks_HNAP1::SetAccessPointModeResult result = output.get_SetAccessPointModeResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetConfigBlob
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetConfigBlobStruct & input,
    enum Purenetworks_HNAP1::SetConfigBlobResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetConfigBlobResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetConfigBlob,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetConfigBlob);

    // Get the result value.
    enum Purenetworks_HNAP1::SetConfigBlobResult result = output.get_SetConfigBlobResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetDeviceSettings
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetDeviceSettingsStruct & input,
    enum Purenetworks_HNAP1::SetDeviceSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetDeviceSettingsResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetDeviceSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetDeviceSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::SetDeviceSettingsResult result = output.get_SetDeviceSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetDeviceSettings2
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetDeviceSettings2Struct & input,
    enum Purenetworks_HNAP1::SetDeviceSettings2Result* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetDeviceSettings2ResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetDeviceSettings2,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetDeviceSettings2);

    // Get the result value.
    enum Purenetworks_HNAP1::SetDeviceSettings2Result result = output.get_SetDeviceSettings2Result();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetMACFilters2
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetMACFilters2Struct & input,
    enum Purenetworks_HNAP1::SetMACFilters2Result* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetMACFilters2ResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetMACFilters2,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetMACFilters2);

    // Get the result value.
    enum Purenetworks_HNAP1::SetMACFilters2Result result = output.get_SetMACFilters2Result();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetRouterLanSettings2
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetRouterLanSettings2Struct & input,
    enum Purenetworks_HNAP1::SetRouterLanSettings2Result* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetRouterLanSettings2ResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetRouterLanSettings2,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetRouterLanSettings2);

    // Get the result value.
    enum Purenetworks_HNAP1::SetRouterLanSettings2Result result = output.get_SetRouterLanSettings2Result();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetRouterSettings
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetRouterSettingsStruct & input,
    enum Purenetworks_HNAP1::SetRouterSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetRouterSettingsResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetRouterSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetRouterSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::SetRouterSettingsResult result = output.get_SetRouterSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetWLanRadioFrequency
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetWLanRadioFrequencyStruct & input,
    enum Purenetworks_HNAP1::SetWLanRadioFrequencyResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetWLanRadioFrequencyResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWLanRadioFrequency,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWLanRadioFrequency);

    // Get the result value.
    enum Purenetworks_HNAP1::SetWLanRadioFrequencyResult result = output.get_SetWLanRadioFrequencyResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetWLanRadioSecurity
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetWLanRadioSecurityStruct & input,
    enum Purenetworks_HNAP1::SetWLanRadioSecurityResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetWLanRadioSecurityResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWLanRadioSecurity,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWLanRadioSecurity);

    // Get the result value.
    enum Purenetworks_HNAP1::SetWLanRadioSecurityResult result = output.get_SetWLanRadioSecurityResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetWLanRadioSettings
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetWLanRadioSettingsStruct & input,
    enum Purenetworks_HNAP1::SetWLanRadioSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetWLanRadioSettingsResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWLanRadioSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWLanRadioSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::SetWLanRadioSettingsResult result = output.get_SetWLanRadioSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}

HDK::ClientError Purenetworks_HNAP1::SetWanSettings
(
    HDK::ITarget* pTarget,
    const Purenetworks_HNAP1::SetWanSettingsStruct & input,
    enum Purenetworks_HNAP1::SetWanSettingsResult* presult /* = NULL */,
    unsigned int timeoutSecs /* = 0 */
) throw()
{
    if (!pTarget)
    {
        return ClientError_InvalidArg;
    }

    Purenetworks_HNAP1::SetWanSettingsResponseStruct output;

    ClientError error = pTarget->Request(timeoutSecs,
                                         ACTUAL_CLIENT_DOM_MOD_Module(),
                                         ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWanSettings,
                                         input,
                                         &output);

    const HDK_MOD_Method* pMethod = HDK_MOD_GetMethod(ACTUAL_CLIENT_DOM_MOD_Module(), ACTUAL_CLIENT_DOM_MOD_MethodEnum_PN_SetWanSettings);

    // Get the result value.
    enum Purenetworks_HNAP1::SetWanSettingsResult result = output.get_SetWanSettingsResult();
    if (NULL != presult)
    {
        *presult = result;
    }

    // Determine if there was an HNAP-result, and whether it was an error or not.
    if ((ClientError_OK == error) && (HDK_XML_BuiltinElement_Unknown != pMethod->hnapResultElement))
    {
        if ((pMethod->hnapResultOK != (int)result) && (pMethod->hnapResultREBOOT != (int)result))
        {
            // An HNAP error response.
            error = HDK::ClientError_HnapMethod;
        }
    }

    return error;
}
